
c:/Users/Chris/Desktop/Msc/IoT/Car-o-Meter/target/1.5.2/argon/Car-o-Meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002dd4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6df0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003b4a8  000d6df4  0001b4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000032dc  2003b514  2003b514  0002b514  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6e60  000d6e60  00026e60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6e88  000d6e88  00026e88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000ebe2f  00000000  00000000  00026e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000123d3  00000000  00000000  00112cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001dcc4  00000000  00000000  0012508e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000024b8  00000000  00000000  00142d52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004630  00000000  00000000  0014520a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000369d1  00000000  00000000  0014983a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002b7cb  00000000  00000000  0018020b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00107133  00000000  00000000  001ab9d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ce64  00000000  00000000  002b2b0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fc33 	bl	d6898 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fc38 	bl	d68ae <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003b4a8 	.word	0x2003b4a8
   d4048:	000d6df4 	.word	0x000d6df4
   d404c:	2003b514 	.word	0x2003b514
   d4050:	2003b514 	.word	0x2003b514
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f97b 	bl	d5354 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6de8 	.word	0x000d6de8
   d4080:	000d6da8 	.word	0x000d6da8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b83c 	b.w	d4100 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9b9 	bl	d4400 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b921 	b.w	d52d8 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bf2d 	b.w	d4ef4 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bf33 	b.w	d4f04 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bf31 	b.w	d4f04 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d40b2:	4770      	bx	lr

000d40b4 <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   d40b4:	4770      	bx	lr
	...

000d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.4>:
// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40b8:	b513      	push	{r0, r1, r4, lr}
   d40ba:	4b05      	ldr	r3, [pc, #20]	; (d40d0 <_ZN10CloudClass7publishEPKcS1_.isra.4+0x18>)
   d40bc:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40be:	f88d 3000 	strb.w	r3, [sp]
   d40c2:	233c      	movs	r3, #60	; 0x3c
// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40c4:	4604      	mov	r4, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40c6:	f001 fab3 	bl	d5630 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
}
   d40ca:	4620      	mov	r0, r4
   d40cc:	b002      	add	sp, #8
   d40ce:	bd10      	pop	{r4, pc}
   d40d0:	2003b51c 	.word	0x2003b51c

000d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40d4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d40d6:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d40d8:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d40da:	b17c      	cbz	r4, d40fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d40dc:	6863      	ldr	r3, [r4, #4]
   d40de:	3b01      	subs	r3, #1
   d40e0:	6063      	str	r3, [r4, #4]
   d40e2:	b95b      	cbnz	r3, d40fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d40e4:	6823      	ldr	r3, [r4, #0]
   d40e6:	4620      	mov	r0, r4
   d40e8:	689b      	ldr	r3, [r3, #8]
   d40ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40ec:	68a3      	ldr	r3, [r4, #8]
   d40ee:	3b01      	subs	r3, #1
   d40f0:	60a3      	str	r3, [r4, #8]
   d40f2:	b91b      	cbnz	r3, d40fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d40f4:	6823      	ldr	r3, [r4, #0]
   d40f6:	4620      	mov	r0, r4
   d40f8:	68db      	ldr	r3, [r3, #12]
   d40fa:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d40fc:	4628      	mov	r0, r5
   d40fe:	bd38      	pop	{r3, r4, r5, pc}

000d4100 <setup>:
   d4100:	b507      	push	{r0, r1, r2, lr}
   d4102:	2118      	movs	r1, #24
   d4104:	4813      	ldr	r0, [pc, #76]	; (d4154 <setup+0x54>)
   d4106:	f000 fb9c 	bl	d4842 <_ZN15Adafruit_LIS3DH5beginEh>
   d410a:	b938      	cbnz	r0, d411c <setup+0x1c>
   d410c:	4668      	mov	r0, sp
   d410e:	4a12      	ldr	r2, [pc, #72]	; (d4158 <setup+0x58>)
   d4110:	4912      	ldr	r1, [pc, #72]	; (d415c <setup+0x5c>)
   d4112:	f7ff ffd1 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.4>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4116:	a801      	add	r0, sp, #4
   d4118:	f7ff ffdc 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d411c:	2101      	movs	r1, #1
   d411e:	480d      	ldr	r0, [pc, #52]	; (d4154 <setup+0x54>)
   d4120:	f000 fb66 	bl	d47f0 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>
   d4124:	4a0e      	ldr	r2, [pc, #56]	; (d4160 <setup+0x60>)
   d4126:	490d      	ldr	r1, [pc, #52]	; (d415c <setup+0x5c>)
   d4128:	4668      	mov	r0, sp
   d412a:	f7ff ffc5 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.4>
   d412e:	a801      	add	r0, sp, #4
   d4130:	f7ff ffd0 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4134:	2102      	movs	r1, #2
   d4136:	2006      	movs	r0, #6
   d4138:	f001 fffe 	bl	d6138 <pinMode>
   d413c:	2101      	movs	r1, #1
   d413e:	2007      	movs	r0, #7
   d4140:	f001 fffa 	bl	d6138 <pinMode>
   d4144:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4148:	f001 f878 	bl	d523c <delay>
   d414c:	b003      	add	sp, #12
   d414e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4152:	bf00      	nop
   d4154:	2003d4a0 	.word	0x2003d4a0
   d4158:	000d6990 	.word	0x000d6990
   d415c:	000d69ab 	.word	0x000d69ab
   d4160:	000d69ae 	.word	0x000d69ae

000d4164 <_Z9showStatsv>:
   d4164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4168:	ed2d 8b04 	vpush	{d8-d9}
   d416c:	4a8a      	ldr	r2, [pc, #552]	; (d4398 <_Z9showStatsv+0x234>)
   d416e:	498b      	ldr	r1, [pc, #556]	; (d439c <_Z9showStatsv+0x238>)
   d4170:	6810      	ldr	r0, [r2, #0]
   d4172:	2300      	movs	r3, #0
   d4174:	b091      	sub	sp, #68	; 0x44
   d4176:	461e      	mov	r6, r3
   d4178:	4690      	mov	r8, r2
   d417a:	4283      	cmp	r3, r0
   d417c:	dc04      	bgt.n	d4188 <_Z9showStatsv+0x24>
   d417e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   d4182:	3301      	adds	r3, #1
   d4184:	4416      	add	r6, r2
   d4186:	e7f8      	b.n	d417a <_Z9showStatsv+0x16>
   d4188:	4f85      	ldr	r7, [pc, #532]	; (d43a0 <_Z9showStatsv+0x23c>)
   d418a:	4986      	ldr	r1, [pc, #536]	; (d43a4 <_Z9showStatsv+0x240>)
   d418c:	6838      	ldr	r0, [r7, #0]
   d418e:	2300      	movs	r3, #0
   d4190:	461d      	mov	r5, r3
   d4192:	4283      	cmp	r3, r0
   d4194:	dc04      	bgt.n	d41a0 <_Z9showStatsv+0x3c>
   d4196:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   d419a:	3301      	adds	r3, #1
   d419c:	4415      	add	r5, r2
   d419e:	e7f8      	b.n	d4192 <_Z9showStatsv+0x2e>
   d41a0:	4b81      	ldr	r3, [pc, #516]	; (d43a8 <_Z9showStatsv+0x244>)
   d41a2:	4982      	ldr	r1, [pc, #520]	; (d43ac <_Z9showStatsv+0x248>)
   d41a4:	6818      	ldr	r0, [r3, #0]
   d41a6:	2300      	movs	r3, #0
   d41a8:	461c      	mov	r4, r3
   d41aa:	4283      	cmp	r3, r0
   d41ac:	dc04      	bgt.n	d41b8 <_Z9showStatsv+0x54>
   d41ae:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   d41b2:	3301      	adds	r3, #1
   d41b4:	4414      	add	r4, r2
   d41b6:	e7f8      	b.n	d41aa <_Z9showStatsv+0x46>
   d41b8:	4632      	mov	r2, r6
   d41ba:	497d      	ldr	r1, [pc, #500]	; (d43b0 <_Z9showStatsv+0x24c>)
   d41bc:	f8df 91e8 	ldr.w	r9, [pc, #488]	; d43a8 <_Z9showStatsv+0x244>
   d41c0:	a804      	add	r0, sp, #16
   d41c2:	f000 fea7 	bl	d4f14 <sprintf>
   d41c6:	462a      	mov	r2, r5
   d41c8:	4979      	ldr	r1, [pc, #484]	; (d43b0 <_Z9showStatsv+0x24c>)
   d41ca:	a807      	add	r0, sp, #28
   d41cc:	f000 fea2 	bl	d4f14 <sprintf>
   d41d0:	4622      	mov	r2, r4
   d41d2:	4977      	ldr	r1, [pc, #476]	; (d43b0 <_Z9showStatsv+0x24c>)
   d41d4:	a80a      	add	r0, sp, #40	; 0x28
   d41d6:	f000 fe9d 	bl	d4f14 <sprintf>
   d41da:	f8d8 2000 	ldr.w	r2, [r8]
   d41de:	4974      	ldr	r1, [pc, #464]	; (d43b0 <_Z9showStatsv+0x24c>)
   d41e0:	4874      	ldr	r0, [pc, #464]	; (d43b4 <_Z9showStatsv+0x250>)
   d41e2:	f000 fe97 	bl	d4f14 <sprintf>
   d41e6:	683a      	ldr	r2, [r7, #0]
   d41e8:	4971      	ldr	r1, [pc, #452]	; (d43b0 <_Z9showStatsv+0x24c>)
   d41ea:	4873      	ldr	r0, [pc, #460]	; (d43b8 <_Z9showStatsv+0x254>)
   d41ec:	f000 fe92 	bl	d4f14 <sprintf>
   d41f0:	f8d9 2000 	ldr.w	r2, [r9]
   d41f4:	496e      	ldr	r1, [pc, #440]	; (d43b0 <_Z9showStatsv+0x24c>)
   d41f6:	4871      	ldr	r0, [pc, #452]	; (d43bc <_Z9showStatsv+0x258>)
   d41f8:	f000 fe8c 	bl	d4f14 <sprintf>
   d41fc:	ee07 6a90 	vmov	s15, r6
   d4200:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
   d4204:	edd8 7a00 	vldr	s15, [r8]
   d4208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d420c:	ee87 7a89 	vdiv.f32	s14, s15, s18
   d4210:	ee17 0a10 	vmov	r0, s14
   d4214:	f002 fade 	bl	d67d4 <__aeabi_f2d>
   d4218:	4602      	mov	r2, r0
   d421a:	460b      	mov	r3, r1
   d421c:	4868      	ldr	r0, [pc, #416]	; (d43c0 <_Z9showStatsv+0x25c>)
   d421e:	4969      	ldr	r1, [pc, #420]	; (d43c4 <_Z9showStatsv+0x260>)
   d4220:	f000 fe78 	bl	d4f14 <sprintf>
   d4224:	ee07 5a90 	vmov	s15, r5
   d4228:	eef8 8ae7 	vcvt.f32.s32	s17, s15
   d422c:	edd7 7a00 	vldr	s15, [r7]
   d4230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4234:	ee87 7aa8 	vdiv.f32	s14, s15, s17
   d4238:	ee17 0a10 	vmov	r0, s14
   d423c:	f002 faca 	bl	d67d4 <__aeabi_f2d>
   d4240:	4602      	mov	r2, r0
   d4242:	460b      	mov	r3, r1
   d4244:	4860      	ldr	r0, [pc, #384]	; (d43c8 <_Z9showStatsv+0x264>)
   d4246:	495f      	ldr	r1, [pc, #380]	; (d43c4 <_Z9showStatsv+0x260>)
   d4248:	f000 fe64 	bl	d4f14 <sprintf>
   d424c:	ee07 4a90 	vmov	s15, r4
   d4250:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
   d4254:	edd9 7a00 	vldr	s15, [r9]
   d4258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d425c:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d4260:	ee17 0a10 	vmov	r0, s14
   d4264:	f002 fab6 	bl	d67d4 <__aeabi_f2d>
   d4268:	4602      	mov	r2, r0
   d426a:	460b      	mov	r3, r1
   d426c:	4857      	ldr	r0, [pc, #348]	; (d43cc <_Z9showStatsv+0x268>)
   d426e:	4955      	ldr	r1, [pc, #340]	; (d43c4 <_Z9showStatsv+0x260>)
   d4270:	f000 fe50 	bl	d4f14 <sprintf>
   d4274:	ed98 7a00 	vldr	s14, [r8]
   d4278:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   d427c:	eec7 7a09 	vdiv.f32	s15, s14, s18
   d4280:	ed97 7a00 	vldr	s14, [r7]
   d4284:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   d4288:	eec7 6a28 	vdiv.f32	s13, s14, s17
   d428c:	ed99 7a00 	vldr	s14, [r9]
   d4290:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   d4294:	ee77 7aa6 	vadd.f32	s15, s15, s13
   d4298:	eec7 6a08 	vdiv.f32	s13, s14, s16
   d429c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
   d42a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
   d42a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d42a8:	ee16 0a90 	vmov	r0, s13
   d42ac:	f002 fa92 	bl	d67d4 <__aeabi_f2d>
   d42b0:	4602      	mov	r2, r0
   d42b2:	460b      	mov	r3, r1
   d42b4:	a80d      	add	r0, sp, #52	; 0x34
   d42b6:	4943      	ldr	r1, [pc, #268]	; (d43c4 <_Z9showStatsv+0x260>)
   d42b8:	f000 fe2c 	bl	d4f14 <sprintf>
   d42bc:	4b44      	ldr	r3, [pc, #272]	; (d43d0 <_Z9showStatsv+0x26c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d42be:	4945      	ldr	r1, [pc, #276]	; (d43d4 <_Z9showStatsv+0x270>)
   d42c0:	781b      	ldrb	r3, [r3, #0]
   d42c2:	f88d 3000 	strb.w	r3, [sp]
   d42c6:	2200      	movs	r2, #0
   d42c8:	233c      	movs	r3, #60	; 0x3c
   d42ca:	a802      	add	r0, sp, #8
   d42cc:	f001 f9b0 	bl	d5630 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d42d0:	a803      	add	r0, sp, #12
   d42d2:	f7ff feff 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42d6:	4a37      	ldr	r2, [pc, #220]	; (d43b4 <_Z9showStatsv+0x250>)
   d42d8:	493f      	ldr	r1, [pc, #252]	; (d43d8 <_Z9showStatsv+0x274>)
   d42da:	a802      	add	r0, sp, #8
   d42dc:	f7ff feec 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.4>
   d42e0:	a803      	add	r0, sp, #12
   d42e2:	f7ff fef7 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42e6:	4a34      	ldr	r2, [pc, #208]	; (d43b8 <_Z9showStatsv+0x254>)
   d42e8:	493c      	ldr	r1, [pc, #240]	; (d43dc <_Z9showStatsv+0x278>)
   d42ea:	a802      	add	r0, sp, #8
   d42ec:	f7ff fee4 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.4>
   d42f0:	a803      	add	r0, sp, #12
   d42f2:	f7ff feef 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d42fa:	f000 ff9f 	bl	d523c <delay>
   d42fe:	4a2f      	ldr	r2, [pc, #188]	; (d43bc <_Z9showStatsv+0x258>)
   d4300:	4937      	ldr	r1, [pc, #220]	; (d43e0 <_Z9showStatsv+0x27c>)
   d4302:	a802      	add	r0, sp, #8
   d4304:	f7ff fed8 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.4>
   d4308:	a803      	add	r0, sp, #12
   d430a:	f7ff fee3 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d430e:	aa04      	add	r2, sp, #16
   d4310:	4934      	ldr	r1, [pc, #208]	; (d43e4 <_Z9showStatsv+0x280>)
   d4312:	a802      	add	r0, sp, #8
   d4314:	f7ff fed0 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.4>
   d4318:	a803      	add	r0, sp, #12
   d431a:	f7ff fedb 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d431e:	aa07      	add	r2, sp, #28
   d4320:	4931      	ldr	r1, [pc, #196]	; (d43e8 <_Z9showStatsv+0x284>)
   d4322:	a802      	add	r0, sp, #8
   d4324:	f7ff fec8 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.4>
   d4328:	a803      	add	r0, sp, #12
   d432a:	f7ff fed3 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d432e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4332:	f000 ff83 	bl	d523c <delay>
   d4336:	aa0a      	add	r2, sp, #40	; 0x28
   d4338:	492c      	ldr	r1, [pc, #176]	; (d43ec <_Z9showStatsv+0x288>)
   d433a:	a802      	add	r0, sp, #8
   d433c:	f7ff febc 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.4>
   d4340:	a803      	add	r0, sp, #12
   d4342:	f7ff fec7 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4346:	4a1e      	ldr	r2, [pc, #120]	; (d43c0 <_Z9showStatsv+0x25c>)
   d4348:	4929      	ldr	r1, [pc, #164]	; (d43f0 <_Z9showStatsv+0x28c>)
   d434a:	a802      	add	r0, sp, #8
   d434c:	f7ff feb4 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.4>
   d4350:	a803      	add	r0, sp, #12
   d4352:	f7ff febf 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4356:	4a1c      	ldr	r2, [pc, #112]	; (d43c8 <_Z9showStatsv+0x264>)
   d4358:	4926      	ldr	r1, [pc, #152]	; (d43f4 <_Z9showStatsv+0x290>)
   d435a:	a802      	add	r0, sp, #8
   d435c:	f7ff feac 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.4>
   d4360:	a803      	add	r0, sp, #12
   d4362:	f7ff feb7 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4366:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d436a:	f000 ff67 	bl	d523c <delay>
   d436e:	4a17      	ldr	r2, [pc, #92]	; (d43cc <_Z9showStatsv+0x268>)
   d4370:	4921      	ldr	r1, [pc, #132]	; (d43f8 <_Z9showStatsv+0x294>)
   d4372:	a802      	add	r0, sp, #8
   d4374:	f7ff fea0 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.4>
   d4378:	a803      	add	r0, sp, #12
   d437a:	f7ff feab 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d437e:	aa0d      	add	r2, sp, #52	; 0x34
   d4380:	491e      	ldr	r1, [pc, #120]	; (d43fc <_Z9showStatsv+0x298>)
   d4382:	a802      	add	r0, sp, #8
   d4384:	f7ff fe98 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.4>
   d4388:	a803      	add	r0, sp, #12
   d438a:	f7ff fea3 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d438e:	b011      	add	sp, #68	; 0x44
   d4390:	ecbd 8b04 	vpop	{d8-d9}
   d4394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4398:	2003d518 	.word	0x2003d518
   d439c:	2003b53c 	.word	0x2003b53c
   d43a0:	2003d51c 	.word	0x2003d51c
   d43a4:	2003c4dc 	.word	0x2003c4dc
   d43a8:	2003d520 	.word	0x2003d520
   d43ac:	2003d524 	.word	0x2003d524
   d43b0:	000d69cd 	.word	0x000d69cd
   d43b4:	2003b527 	.word	0x2003b527
   d43b8:	2003d4e4 	.word	0x2003d4e4
   d43bc:	2003b531 	.word	0x2003b531
   d43c0:	2003d494 	.word	0x2003d494
   d43c4:	000d69d0 	.word	0x000d69d0
   d43c8:	2003b51d 	.word	0x2003b51d
   d43cc:	2003d4cc 	.word	0x2003d4cc
   d43d0:	2003b51c 	.word	0x2003b51c
   d43d4:	000d69d3 	.word	0x000d69d3
   d43d8:	000d69e4 	.word	0x000d69e4
   d43dc:	000d69ee 	.word	0x000d69ee
   d43e0:	000d69f8 	.word	0x000d69f8
   d43e4:	000d6a02 	.word	0x000d6a02
   d43e8:	000d6a0c 	.word	0x000d6a0c
   d43ec:	000d6a16 	.word	0x000d6a16
   d43f0:	000d6a20 	.word	0x000d6a20
   d43f4:	000d6a3b 	.word	0x000d6a3b
   d43f8:	000d6a57 	.word	0x000d6a57
   d43fc:	000d6a73 	.word	0x000d6a73

000d4400 <loop>:
   d4400:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d4404:	4c48      	ldr	r4, [pc, #288]	; (d4528 <loop+0x128>)
   d4406:	4d49      	ldr	r5, [pc, #292]	; (d452c <loop+0x12c>)
   d4408:	4626      	mov	r6, r4
   d440a:	782b      	ldrb	r3, [r5, #0]
   d440c:	2b00      	cmp	r3, #0
   d440e:	f000 8087 	beq.w	d4520 <loop+0x120>
   d4412:	4f47      	ldr	r7, [pc, #284]	; (d4530 <loop+0x130>)
   d4414:	4847      	ldr	r0, [pc, #284]	; (d4534 <loop+0x134>)
   d4416:	f8df 9148 	ldr.w	r9, [pc, #328]	; d4560 <loop+0x160>
   d441a:	f8df 8158 	ldr.w	r8, [pc, #344]	; d4574 <loop+0x174>
   d441e:	4639      	mov	r1, r7
   d4420:	f000 fb20 	bl	d4a64 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>
   d4424:	edd7 7a05 	vldr	s15, [r7, #20]
   d4428:	4943      	ldr	r1, [pc, #268]	; (d4538 <loop+0x138>)
   d442a:	4844      	ldr	r0, [pc, #272]	; (d453c <loop+0x13c>)
   d442c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4430:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   d4434:	ee17 2a90 	vmov	r2, s15
   d4438:	edc4 7a00 	vstr	s15, [r4]
   d443c:	edd7 7a06 	vldr	s15, [r7, #24]
   d4440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4444:	edc9 7a00 	vstr	s15, [r9]
   d4448:	edd7 7a07 	vldr	s15, [r7, #28]
   d444c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d4450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4454:	edc8 7a00 	vstr	s15, [r8]
   d4458:	f000 fd5c 	bl	d4f14 <sprintf>
   d445c:	f8d9 2000 	ldr.w	r2, [r9]
   d4460:	4935      	ldr	r1, [pc, #212]	; (d4538 <loop+0x138>)
   d4462:	4837      	ldr	r0, [pc, #220]	; (d4540 <loop+0x140>)
   d4464:	f000 fd56 	bl	d4f14 <sprintf>
   d4468:	f8d8 2000 	ldr.w	r2, [r8]
   d446c:	4932      	ldr	r1, [pc, #200]	; (d4538 <loop+0x138>)
   d446e:	4835      	ldr	r0, [pc, #212]	; (d4544 <loop+0x144>)
   d4470:	f000 fd50 	bl	d4f14 <sprintf>
   d4474:	2006      	movs	r0, #6
   d4476:	f001 fe89 	bl	d618c <digitalRead>
   d447a:	4607      	mov	r7, r0
   d447c:	b938      	cbnz	r0, d448e <loop+0x8e>
   d447e:	2101      	movs	r1, #1
   d4480:	2007      	movs	r0, #7
   d4482:	f001 fe6a 	bl	d615a <digitalWrite>
   d4486:	702f      	strb	r7, [r5, #0]
   d4488:	f7ff fe6c 	bl	d4164 <_Z9showStatsv>
   d448c:	e003      	b.n	d4496 <loop+0x96>
   d448e:	2100      	movs	r1, #0
   d4490:	2007      	movs	r0, #7
   d4492:	f001 fe62 	bl	d615a <digitalWrite>
   d4496:	4b2c      	ldr	r3, [pc, #176]	; (d4548 <loop+0x148>)
   d4498:	6832      	ldr	r2, [r6, #0]
   d449a:	681b      	ldr	r3, [r3, #0]
   d449c:	429a      	cmp	r2, r3
   d449e:	d00c      	beq.n	d44ba <loop+0xba>
   d44a0:	4a26      	ldr	r2, [pc, #152]	; (d453c <loop+0x13c>)
   d44a2:	492a      	ldr	r1, [pc, #168]	; (d454c <loop+0x14c>)
   d44a4:	4668      	mov	r0, sp
   d44a6:	f7ff fe07 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.4>
   d44aa:	a801      	add	r0, sp, #4
   d44ac:	f7ff fe12 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d44b0:	6823      	ldr	r3, [r4, #0]
   d44b2:	4927      	ldr	r1, [pc, #156]	; (d4550 <loop+0x150>)
   d44b4:	4a27      	ldr	r2, [pc, #156]	; (d4554 <loop+0x154>)
   d44b6:	2b00      	cmp	r3, #0
   d44b8:	e026      	b.n	d4508 <loop+0x108>
   d44ba:	4b27      	ldr	r3, [pc, #156]	; (d4558 <loop+0x158>)
   d44bc:	f8d9 2000 	ldr.w	r2, [r9]
   d44c0:	681b      	ldr	r3, [r3, #0]
   d44c2:	429a      	cmp	r2, r3
   d44c4:	d00d      	beq.n	d44e2 <loop+0xe2>
   d44c6:	4a1e      	ldr	r2, [pc, #120]	; (d4540 <loop+0x140>)
   d44c8:	4924      	ldr	r1, [pc, #144]	; (d455c <loop+0x15c>)
   d44ca:	4668      	mov	r0, sp
   d44cc:	f7ff fdf4 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.4>
   d44d0:	a801      	add	r0, sp, #4
   d44d2:	f7ff fdff 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d44d6:	4b22      	ldr	r3, [pc, #136]	; (d4560 <loop+0x160>)
   d44d8:	4922      	ldr	r1, [pc, #136]	; (d4564 <loop+0x164>)
   d44da:	681b      	ldr	r3, [r3, #0]
   d44dc:	4a22      	ldr	r2, [pc, #136]	; (d4568 <loop+0x168>)
   d44de:	2b00      	cmp	r3, #0
   d44e0:	e012      	b.n	d4508 <loop+0x108>
   d44e2:	4b22      	ldr	r3, [pc, #136]	; (d456c <loop+0x16c>)
   d44e4:	f8d8 2000 	ldr.w	r2, [r8]
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	429a      	cmp	r2, r3
   d44ec:	d018      	beq.n	d4520 <loop+0x120>
   d44ee:	4a15      	ldr	r2, [pc, #84]	; (d4544 <loop+0x144>)
   d44f0:	491f      	ldr	r1, [pc, #124]	; (d4570 <loop+0x170>)
   d44f2:	4668      	mov	r0, sp
   d44f4:	f7ff fde0 	bl	d40b8 <_ZN10CloudClass7publishEPKcS1_.isra.4>
   d44f8:	a801      	add	r0, sp, #4
   d44fa:	f7ff fdeb 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d44fe:	4b1d      	ldr	r3, [pc, #116]	; (d4574 <loop+0x174>)
   d4500:	491d      	ldr	r1, [pc, #116]	; (d4578 <loop+0x178>)
   d4502:	681b      	ldr	r3, [r3, #0]
   d4504:	4a1d      	ldr	r2, [pc, #116]	; (d457c <loop+0x17c>)
   d4506:	2b00      	cmp	r3, #0
   d4508:	6810      	ldr	r0, [r2, #0]
   d450a:	bfb8      	it	lt
   d450c:	425b      	neglt	r3, r3
   d450e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
   d4512:	6813      	ldr	r3, [r2, #0]
   d4514:	3301      	adds	r3, #1
   d4516:	6013      	str	r3, [r2, #0]
   d4518:	2032      	movs	r0, #50	; 0x32
   d451a:	f000 fe8f 	bl	d523c <delay>
   d451e:	e774      	b.n	d440a <loop+0xa>
   d4520:	b003      	add	sp, #12
   d4522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4526:	bf00      	nop
   d4528:	2003d4f0 	.word	0x2003d4f0
   d452c:	2003b4a8 	.word	0x2003b4a8
   d4530:	2003d4f4 	.word	0x2003d4f4
   d4534:	2003d4a0 	.word	0x2003d4a0
   d4538:	000d69cd 	.word	0x000d69cd
   d453c:	2003d480 	.word	0x2003d480
   d4540:	2003e4c4 	.word	0x2003e4c4
   d4544:	2003d48a 	.word	0x2003d48a
   d4548:	2003d4d8 	.word	0x2003d4d8
   d454c:	000d6a85 	.word	0x000d6a85
   d4550:	2003b53c 	.word	0x2003b53c
   d4554:	2003d518 	.word	0x2003d518
   d4558:	2003d4dc 	.word	0x2003d4dc
   d455c:	000d6a87 	.word	0x000d6a87
   d4560:	2003d47c 	.word	0x2003d47c
   d4564:	2003c4dc 	.word	0x2003c4dc
   d4568:	2003d51c 	.word	0x2003d51c
   d456c:	2003d4e0 	.word	0x2003d4e0
   d4570:	000d6a89 	.word	0x000d6a89
   d4574:	2003b518 	.word	0x2003b518
   d4578:	2003d524 	.word	0x2003d524
   d457c:	2003d520 	.word	0x2003d520

000d4580 <_ZN15Adafruit_LIS3DHD0Ev>:
   d4580:	b510      	push	{r4, lr}
   d4582:	212c      	movs	r1, #44	; 0x2c
   d4584:	4604      	mov	r4, r0
   d4586:	f001 fe63 	bl	d6250 <_ZdlPvj>
   d458a:	4620      	mov	r0, r4
   d458c:	bd10      	pop	{r4, pc}
	...

000d4590 <_GLOBAL__sub_I_lis>:
   d4590:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4592:	4b08      	ldr	r3, [pc, #32]	; (d45b4 <_GLOBAL__sub_I_lis+0x24>)
   d4594:	4c08      	ldr	r4, [pc, #32]	; (d45b8 <_GLOBAL__sub_I_lis+0x28>)
   d4596:	2200      	movs	r2, #0
   d4598:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d459a:	f000 fa8f 	bl	d4abc <HAL_Pin_Map>
   d459e:	4620      	mov	r0, r4
   d45a0:	f000 f832 	bl	d4608 <_ZN15Adafruit_LIS3DHC1Ev>
   d45a4:	4620      	mov	r0, r4
   d45a6:	4a05      	ldr	r2, [pc, #20]	; (d45bc <_GLOBAL__sub_I_lis+0x2c>)
   d45a8:	4905      	ldr	r1, [pc, #20]	; (d45c0 <_GLOBAL__sub_I_lis+0x30>)
   d45aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d45ae:	f001 be41 	b.w	d6234 <__aeabi_atexit>
   d45b2:	bf00      	nop
   d45b4:	2003b51c 	.word	0x2003b51c
   d45b8:	2003d4a0 	.word	0x2003d4a0
   d45bc:	2003b514 	.word	0x2003b514
   d45c0:	000d40b5 	.word	0x000d40b5

000d45c4 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev>:
   d45c4:	f000 ba7a 	b.w	d4abc <HAL_Pin_Map>

000d45c8 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d45c8:	b538      	push	{r3, r4, r5, lr}
   d45ca:	460c      	mov	r4, r1
   d45cc:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d45ce:	2228      	movs	r2, #40	; 0x28
   d45d0:	2100      	movs	r1, #0
   d45d2:	4620      	mov	r0, r4
   d45d4:	f002 f96b 	bl	d68ae <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d45d8:	220b      	movs	r2, #11
   d45da:	4908      	ldr	r1, [pc, #32]	; (d45fc <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
   d45dc:	4620      	mov	r0, r4
   d45de:	f002 f9ba 	bl	d6956 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d45e2:	2300      	movs	r3, #0
  sensor->version     = 1;
   d45e4:	2201      	movs	r2, #1
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d45e6:	72e3      	strb	r3, [r4, #11]
  sensor->version     = 1;
   d45e8:	60e2      	str	r2, [r4, #12]
  sensor->sensor_id   = _sensorID;
   d45ea:	69a9      	ldr	r1, [r5, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
   d45ec:	6263      	str	r3, [r4, #36]	; 0x24
  sensor->max_value   = 0;
   d45ee:	2300      	movs	r3, #0

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
   d45f0:	6121      	str	r1, [r4, #16]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   d45f2:	6162      	str	r2, [r4, #20]
  sensor->min_delay   = 0;
  sensor->max_value   = 0;
   d45f4:	61a3      	str	r3, [r4, #24]
  sensor->min_value   = 0;
   d45f6:	61e3      	str	r3, [r4, #28]
  sensor->resolution  = 0;
   d45f8:	6223      	str	r3, [r4, #32]
   d45fa:	bd38      	pop	{r3, r4, r5, pc}
   d45fc:	000d6a8b 	.word	0x000d6a8b

000d4600 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4600:	6803      	ldr	r3, [r0, #0]
   d4602:	b2c9      	uxtb	r1, r1
   d4604:	689b      	ldr	r3, [r3, #8]
   d4606:	4718      	bx	r3

000d4608 <_ZN15Adafruit_LIS3DHC1Ev>:
    @brief  Instantiates a new LIS3DH class in I2C or SPI mode
*/
/**************************************************************************/
// I2C
Adafruit_LIS3DH::Adafruit_LIS3DH()
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   d4608:	4a06      	ldr	r2, [pc, #24]	; (d4624 <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
   d460a:	6002      	str	r2, [r0, #0]
   d460c:	f04f 32ff 	mov.w	r2, #4294967295
   d4610:	6182      	str	r2, [r0, #24]
   d4612:	7742      	strb	r2, [r0, #29]
   d4614:	21ff      	movs	r1, #255	; 0xff
   d4616:	77c2      	strb	r2, [r0, #31]
   d4618:	f880 2020 	strb.w	r2, [r0, #32]
   d461c:	2208      	movs	r2, #8
   d461e:	7781      	strb	r1, [r0, #30]
   d4620:	6242      	str	r2, [r0, #36]	; 0x24
{
}
   d4622:	4770      	bx	lr
   d4624:	000d6a9c 	.word	0x000d6a9c

000d4628 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4628:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d462a:	4d09      	ldr	r5, [pc, #36]	; (d4650 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d462c:	6829      	ldr	r1, [r5, #0]
   d462e:	f011 0401 	ands.w	r4, r1, #1
   d4632:	d10a      	bne.n	d464a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d4634:	4628      	mov	r0, r5
   d4636:	f7ff fd34 	bl	d40a2 <__cxa_guard_acquire>
   d463a:	b130      	cbz	r0, d464a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d463c:	4621      	mov	r1, r4
   d463e:	4805      	ldr	r0, [pc, #20]	; (d4654 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d4640:	f000 fcc4 	bl	d4fcc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d4644:	4628      	mov	r0, r5
   d4646:	f7ff fd31 	bl	d40ac <__cxa_guard_release>
        return instance;
    }
   d464a:	4802      	ldr	r0, [pc, #8]	; (d4654 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d464c:	bd38      	pop	{r3, r4, r5, pc}
   d464e:	bf00      	nop
   d4650:	2003e4d0 	.word	0x2003e4d0
   d4654:	2003e4d4 	.word	0x2003e4d4

000d4658 <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d4658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
   d465c:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4660:	3301      	adds	r3, #1
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d4662:	4605      	mov	r5, r0
   d4664:	460f      	mov	r7, r1
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
   d4666:	d106      	bne.n	d4676 <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4668:	f7ff ffde 	bl	d4628 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d466c:	4639      	mov	r1, r7
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
   d466e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4672:	f000 bd31 	b.w	d50d8 <_ZN8SPIClass8transferEh>
   d4676:	2607      	movs	r6, #7
   d4678:	2400      	movs	r4, #0
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
   d467a:	f04f 0801 	mov.w	r8, #1
  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_sck, LOW);
   d467e:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d4682:	2100      	movs	r1, #0
   d4684:	b280      	uxth	r0, r0
   d4686:	f001 fd68 	bl	d615a <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   d468a:	f995 001e 	ldrsb.w	r0, [r5, #30]
   d468e:	fa08 f106 	lsl.w	r1, r8, r6
   d4692:	4039      	ands	r1, r7
   d4694:	b280      	uxth	r0, r0
   d4696:	f001 fd60 	bl	d615a <digitalWrite>
    digitalWrite(_sck, HIGH);
   d469a:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d469e:	2101      	movs	r1, #1
   d46a0:	b280      	uxth	r0, r0
   d46a2:	f001 fd5a 	bl	d615a <digitalWrite>
    if (digitalRead(_miso))
   d46a6:	f995 001f 	ldrsb.w	r0, [r5, #31]

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
   d46aa:	0064      	lsls	r4, r4, #1
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
   d46ac:	b280      	uxth	r0, r0

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
   d46ae:	b2e4      	uxtb	r4, r4
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
   d46b0:	f001 fd6c 	bl	d618c <digitalRead>
   d46b4:	b108      	cbz	r0, d46ba <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
   d46b6:	f044 0401 	orr.w	r4, r4, #1
    return SPI.transfer(x);

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
   d46ba:	f116 36ff 	adds.w	r6, r6, #4294967295
   d46be:	d2de      	bcs.n	d467e <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
   d46c0:	4620      	mov	r0, r4
   d46c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d46c8 <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   d46c8:	b508      	push	{r3, lr}
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
   d46ca:	f7ff ffad 	bl	d4628 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d46ce:	2101      	movs	r1, #1
   d46d0:	f000 fc97 	bl	d5002 <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
   d46d4:	f7ff ffa8 	bl	d4628 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d46d8:	4905      	ldr	r1, [pc, #20]	; (d46f0 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   d46da:	2201      	movs	r2, #1
   d46dc:	f000 fcca 	bl	d5074 <_ZN8SPIClass13setClockSpeedEjj>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
   d46e0:	f7ff ffa2 	bl	d4628 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d46e4:	2100      	movs	r1, #0
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   d46e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d46ea:	f000 bc9b 	b.w	d5024 <_ZN8SPIClass11setDataModeEh>
   d46ee:	bf00      	nop
   d46f0:	0007a120 	.word	0x0007a120

000d46f4 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d46f4:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   d46f6:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d46fa:	3301      	adds	r3, #1
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d46fc:	4604      	mov	r4, r0
   d46fe:	460e      	mov	r6, r1
   d4700:	4615      	mov	r5, r2
  if (_cs == -1) {
   d4702:	d116      	bne.n	d4732 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   d4704:	f001 fd70 	bl	d61e8 <_Z19__fetch_global_Wirev>
   d4708:	7f21      	ldrb	r1, [r4, #28]
   d470a:	f001 fb2e 	bl	d5d6a <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d470e:	f001 fd6b 	bl	d61e8 <_Z19__fetch_global_Wirev>
   d4712:	6803      	ldr	r3, [r0, #0]
   d4714:	4631      	mov	r1, r6
   d4716:	689b      	ldr	r3, [r3, #8]
   d4718:	4798      	blx	r3
    Wire.write((uint8_t)value);
   d471a:	f001 fd65 	bl	d61e8 <_Z19__fetch_global_Wirev>
   d471e:	6803      	ldr	r3, [r0, #0]
   d4720:	4629      	mov	r1, r5
   d4722:	689b      	ldr	r3, [r3, #8]
   d4724:	4798      	blx	r3
    Wire.endTransmission();
   d4726:	f001 fd5f 	bl	d61e8 <_Z19__fetch_global_Wirev>
    digitalWrite(_cs, HIGH);
    if (_sck == -1)
    	endTransaction();
  }
  #endif
}
   d472a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
  if (_cs == -1) {
    Wire.beginTransmission((uint8_t)_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)value);
    Wire.endTransmission();
   d472e:	f001 bb27 	b.w	d5d80 <_ZN7TwoWire15endTransmissionEv>
  }
  #ifndef __AVR_ATtiny85__
  else {
	if (_sck == -1)
   d4732:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4736:	3301      	adds	r3, #1
   d4738:	d101      	bne.n	d473e <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   d473a:	f7ff ffc5 	bl	d46c8 <_ZN15Adafruit_LIS3DH16beginTransactionEv>

    digitalWrite(_cs, LOW);
   d473e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4742:	2100      	movs	r1, #0
   d4744:	b280      	uxth	r0, r0
   d4746:	f001 fd08 	bl	d615a <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   d474a:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d474e:	4620      	mov	r0, r4
   d4750:	f7ff ff82 	bl	d4658 <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   d4754:	4629      	mov	r1, r5
   d4756:	4620      	mov	r0, r4
   d4758:	f7ff ff7e 	bl	d4658 <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   d475c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4760:	2101      	movs	r1, #1
   d4762:	b280      	uxth	r0, r0
    if (_sck == -1)
    	endTransaction();
  }
  #endif
}
   d4764:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  beginTransaction();

    digitalWrite(_cs, LOW);
    spixfer(reg & ~0x80); // write, bit 7 low
    spixfer(value);
    digitalWrite(_cs, HIGH);
   d4768:	f001 bcf7 	b.w	d615a <digitalWrite>

000d476c <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d476c:	b538      	push	{r3, r4, r5, lr}
  uint8_t value;

  if (_cs == -1) {
   d476e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4772:	3301      	adds	r3, #1
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d4774:	4604      	mov	r4, r0
   d4776:	460d      	mov	r5, r1
  uint8_t value;

  if (_cs == -1) {
   d4778:	d11c      	bne.n	d47b4 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x48>
    Wire.beginTransmission(_i2caddr);
   d477a:	f001 fd35 	bl	d61e8 <_Z19__fetch_global_Wirev>
   d477e:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d4782:	f001 faf6 	bl	d5d72 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   d4786:	f001 fd2f 	bl	d61e8 <_Z19__fetch_global_Wirev>
   d478a:	6803      	ldr	r3, [r0, #0]
   d478c:	4629      	mov	r1, r5
   d478e:	689b      	ldr	r3, [r3, #8]
   d4790:	4798      	blx	r3
    Wire.endTransmission();
   d4792:	f001 fd29 	bl	d61e8 <_Z19__fetch_global_Wirev>
   d4796:	f001 faf3 	bl	d5d80 <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(_i2caddr, 1);
   d479a:	f001 fd25 	bl	d61e8 <_Z19__fetch_global_Wirev>
   d479e:	2201      	movs	r2, #1
   d47a0:	7f21      	ldrb	r1, [r4, #28]
   d47a2:	f001 fadf 	bl	d5d64 <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   d47a6:	f001 fd1f 	bl	d61e8 <_Z19__fetch_global_Wirev>
   d47aa:	6803      	ldr	r3, [r0, #0]
   d47ac:	695b      	ldr	r3, [r3, #20]
   d47ae:	4798      	blx	r3
   d47b0:	b2c5      	uxtb	r5, r0
   d47b2:	e01b      	b.n	d47ec <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x80>
  }
  #ifndef __AVR_ATtiny85__
  else {
	if (_sck == -1)
   d47b4:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d47b8:	3301      	adds	r3, #1
   d47ba:	d101      	bne.n	d47c0 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x54>
	  beginTransaction();
   d47bc:	f7ff ff84 	bl	d46c8 <_ZN15Adafruit_LIS3DH16beginTransactionEv>

	digitalWrite(_cs, LOW);
   d47c0:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d47c4:	2100      	movs	r1, #0
   d47c6:	b280      	uxth	r0, r0
   d47c8:	f001 fcc7 	bl	d615a <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   d47cc:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d47d0:	4620      	mov	r0, r4
   d47d2:	f7ff ff41 	bl	d4658 <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   d47d6:	2100      	movs	r1, #0
   d47d8:	4620      	mov	r0, r4
   d47da:	f7ff ff3d 	bl	d4658 <_ZN15Adafruit_LIS3DH7spixferEh>
   d47de:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   d47e0:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d47e4:	2101      	movs	r1, #1
   d47e6:	b280      	uxth	r0, r0
   d47e8:	f001 fcb7 	bl	d615a <digitalWrite>
    if (_sck == -1)
    	endTransaction();
  }
  #endif
  return value;
}
   d47ec:	4628      	mov	r0, r5
   d47ee:	bd38      	pop	{r3, r4, r5, pc}

000d47f0 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>:
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
void Adafruit_LIS3DH::setRange(lis3dh_range_t range)
{
   d47f0:	b538      	push	{r3, r4, r5, lr}
   d47f2:	460d      	mov	r5, r1
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d47f4:	2123      	movs	r1, #35	; 0x23
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
void Adafruit_LIS3DH::setRange(lis3dh_range_t range)
{
   d47f6:	4604      	mov	r4, r0
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d47f8:	f7ff ffb8 	bl	d476c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  r &= ~(0x30);
  r |= range << 4;
   d47fc:	f020 0030 	bic.w	r0, r0, #48	; 0x30
   d4800:	ea40 1205 	orr.w	r2, r0, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d4804:	b2d2      	uxtb	r2, r2
   d4806:	4620      	mov	r0, r4
   d4808:	2123      	movs	r1, #35	; 0x23
}
   d480a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_LIS3DH::setRange(lis3dh_range_t range)
{
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
  r &= ~(0x30);
  r |= range << 4;
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d480e:	f7ff bf71 	b.w	d46f4 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d4812 <_ZN15Adafruit_LIS3DH8getRangeEv>:
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
lis3dh_range_t Adafruit_LIS3DH::getRange(void)
{
   d4812:	b508      	push	{r3, lr}
  /* Read the data format register to preserve bits */
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   d4814:	2123      	movs	r1, #35	; 0x23
   d4816:	f7ff ffa9 	bl	d476c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   d481a:	f3c0 1001 	ubfx	r0, r0, #4, #2
   d481e:	bd08      	pop	{r3, pc}

000d4820 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
/*!
    @brief  Sets the data rate for the LIS3DH (controls power consumption)
*/
/**************************************************************************/
void Adafruit_LIS3DH::setDataRate(lis3dh_dataRate_t dataRate)
{
   d4820:	b538      	push	{r3, r4, r5, lr}
   d4822:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d4824:	2120      	movs	r1, #32
/*!
    @brief  Sets the data rate for the LIS3DH (controls power consumption)
*/
/**************************************************************************/
void Adafruit_LIS3DH::setDataRate(lis3dh_dataRate_t dataRate)
{
   d4826:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d4828:	f7ff ffa0 	bl	d476c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
  ctl1 |= (dataRate << 4);
   d482c:	f000 000f 	and.w	r0, r0, #15
   d4830:	ea40 1205 	orr.w	r2, r0, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d4834:	b2d2      	uxtb	r2, r2
   d4836:	4620      	mov	r0, r4
   d4838:	2120      	movs	r1, #32
}
   d483a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_LIS3DH::setDataRate(lis3dh_dataRate_t dataRate)
{
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
  ctl1 &= ~(0xF0); // mask off bits
  ctl1 |= (dataRate << 4);
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d483e:	f7ff bf59 	b.w	d46f4 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d4842 <_ZN15Adafruit_LIS3DH5beginEh>:
/**************************************************************************/
/*!
    @brief  Setups the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   d4842:	b510      	push	{r4, lr}
   d4844:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   d4846:	7701      	strb	r1, [r0, #28]


  if (_cs == -1) {
   d4848:	f990 001d 	ldrsb.w	r0, [r0, #29]
   d484c:	1c42      	adds	r2, r0, #1
   d484e:	d104      	bne.n	d485a <_ZN15Adafruit_LIS3DH5beginEh+0x18>
    // i2c
    Wire.begin();
   d4850:	f001 fcca 	bl	d61e8 <_Z19__fetch_global_Wirev>
   d4854:	f001 fa52 	bl	d5cfc <_ZN7TwoWire5beginEv>
   d4858:	e022      	b.n	d48a0 <_ZN15Adafruit_LIS3DH5beginEh+0x5e>
  } else {
    digitalWrite(_cs, HIGH);
   d485a:	2101      	movs	r1, #1
   d485c:	b280      	uxth	r0, r0
   d485e:	f001 fc7c 	bl	d615a <digitalWrite>
    pinMode(_cs, OUTPUT);
   d4862:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4866:	2101      	movs	r1, #1
   d4868:	b280      	uxth	r0, r0
   d486a:	f001 fc65 	bl	d6138 <pinMode>

#ifndef __AVR_ATtiny85__
    if (_sck == -1) {
   d486e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4872:	1c43      	adds	r3, r0, #1
   d4874:	d104      	bne.n	d4880 <_ZN15Adafruit_LIS3DH5beginEh+0x3e>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4876:	f7ff fed7 	bl	d4628 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d487a:	f000 fbb1 	bl	d4fe0 <_ZN8SPIClass5beginEv>
   d487e:	e00f      	b.n	d48a0 <_ZN15Adafruit_LIS3DH5beginEh+0x5e>
      // hardware SPI
      SPI.begin();
    } else {
      // software SPI
      pinMode(_sck, OUTPUT);
   d4880:	2101      	movs	r1, #1
   d4882:	b280      	uxth	r0, r0
   d4884:	f001 fc58 	bl	d6138 <pinMode>
      pinMode(_mosi, OUTPUT);
   d4888:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d488c:	2101      	movs	r1, #1
   d488e:	b280      	uxth	r0, r0
   d4890:	f001 fc52 	bl	d6138 <pinMode>
      pinMode(_miso, INPUT);
   d4894:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4898:	2100      	movs	r1, #0
   d489a:	b280      	uxth	r0, r0
   d489c:	f001 fc4c 	bl	d6138 <pinMode>
    Serial.println(readRegister8(i), HEX);
  }
  */

  /* Check connection */
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   d48a0:	210f      	movs	r1, #15
   d48a2:	4620      	mov	r0, r4
   d48a4:	f7ff ff62 	bl	d476c <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   d48a8:	2833      	cmp	r0, #51	; 0x33
   d48aa:	d119      	bne.n	d48e0 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
    //Serial.println(deviceid, HEX);
    return false;
  }

  // enable all axes, normal mode
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   d48ac:	2207      	movs	r2, #7
   d48ae:	4620      	mov	r0, r4
   d48b0:	2120      	movs	r1, #32
   d48b2:	f7ff ff1f 	bl	d46f4 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  // 400Hz rate
  setDataRate(LIS3DH_DATARATE_400_HZ);
   d48b6:	4620      	mov	r0, r4
   d48b8:	2107      	movs	r1, #7
   d48ba:	f7ff ffb1 	bl	d4820 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>

  // High res & BDU enabled
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   d48be:	4620      	mov	r0, r4
   d48c0:	2288      	movs	r2, #136	; 0x88
   d48c2:	2123      	movs	r1, #35	; 0x23
   d48c4:	f7ff ff16 	bl	d46f4 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

  // DRDY on INT1
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   d48c8:	4620      	mov	r0, r4
   d48ca:	2210      	movs	r2, #16
   d48cc:	2122      	movs	r1, #34	; 0x22
   d48ce:	f7ff ff11 	bl	d46f4 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

  // Turn on orientation config
  //writeRegister8(LIS3DH_REG_PL_CFG, 0x40);

  // enable adcs
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   d48d2:	4620      	mov	r0, r4
   d48d4:	2280      	movs	r2, #128	; 0x80
   d48d6:	211f      	movs	r1, #31
   d48d8:	f7ff ff0c 	bl	d46f4 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
    Serial.print(i, HEX); Serial.print(" = 0x");
    Serial.println(readRegister8(i), HEX);
  }
  */

  return true;
   d48dc:	2001      	movs	r0, #1
   d48de:	bd10      	pop	{r4, pc}
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
  if (deviceid != 0x33)
  {
    /* No LIS3DH detected ... return false */
    //Serial.println(deviceid, HEX);
    return false;
   d48e0:	2000      	movs	r0, #0
    Serial.println(readRegister8(i), HEX);
  }
  */

  return true;
}
   d48e2:	bd10      	pop	{r4, pc}

000d48e4 <_ZN15Adafruit_LIS3DH4readEv>:


void Adafruit_LIS3DH::read(void) {
   d48e4:	b510      	push	{r4, lr}
  // read x y z at once

  if (_cs == -1) {
   d48e6:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d48ea:	3301      	adds	r3, #1

  return true;
}


void Adafruit_LIS3DH::read(void) {
   d48ec:	4604      	mov	r4, r0
  // read x y z at once

  if (_cs == -1) {
   d48ee:	d142      	bne.n	d4976 <_ZN15Adafruit_LIS3DH4readEv+0x92>
    // i2c
    Wire.beginTransmission(_i2caddr);
   d48f0:	f001 fc7a 	bl	d61e8 <_Z19__fetch_global_Wirev>
   d48f4:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d48f8:	f001 fa3b 	bl	d5d72 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   d48fc:	f001 fc74 	bl	d61e8 <_Z19__fetch_global_Wirev>
   d4900:	21a8      	movs	r1, #168	; 0xa8
   d4902:	f7ff fe7d 	bl	d4600 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d4906:	f001 fc6f 	bl	d61e8 <_Z19__fetch_global_Wirev>
   d490a:	f001 fa39 	bl	d5d80 <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(_i2caddr, 6);
   d490e:	f001 fc6b 	bl	d61e8 <_Z19__fetch_global_Wirev>
   d4912:	2206      	movs	r2, #6
   d4914:	7f21      	ldrb	r1, [r4, #28]
   d4916:	f001 fa25 	bl	d5d64 <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d491a:	f001 fc65 	bl	d61e8 <_Z19__fetch_global_Wirev>
   d491e:	6803      	ldr	r3, [r0, #0]
   d4920:	695b      	ldr	r3, [r3, #20]
   d4922:	4798      	blx	r3
   d4924:	80e0      	strh	r0, [r4, #6]
   d4926:	f001 fc5f 	bl	d61e8 <_Z19__fetch_global_Wirev>
   d492a:	6803      	ldr	r3, [r0, #0]
   d492c:	695b      	ldr	r3, [r3, #20]
   d492e:	4798      	blx	r3
   d4930:	88e3      	ldrh	r3, [r4, #6]
   d4932:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4936:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   d4938:	f001 fc56 	bl	d61e8 <_Z19__fetch_global_Wirev>
   d493c:	6803      	ldr	r3, [r0, #0]
   d493e:	695b      	ldr	r3, [r3, #20]
   d4940:	4798      	blx	r3
   d4942:	8120      	strh	r0, [r4, #8]
   d4944:	f001 fc50 	bl	d61e8 <_Z19__fetch_global_Wirev>
   d4948:	6803      	ldr	r3, [r0, #0]
   d494a:	695b      	ldr	r3, [r3, #20]
   d494c:	4798      	blx	r3
   d494e:	8923      	ldrh	r3, [r4, #8]
   d4950:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4954:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   d4956:	f001 fc47 	bl	d61e8 <_Z19__fetch_global_Wirev>
   d495a:	6803      	ldr	r3, [r0, #0]
   d495c:	695b      	ldr	r3, [r3, #20]
   d495e:	4798      	blx	r3
   d4960:	8160      	strh	r0, [r4, #10]
   d4962:	f001 fc41 	bl	d61e8 <_Z19__fetch_global_Wirev>
   d4966:	6803      	ldr	r3, [r0, #0]
   d4968:	695b      	ldr	r3, [r3, #20]
   d496a:	4798      	blx	r3
   d496c:	8963      	ldrh	r3, [r4, #10]
   d496e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4972:	8160      	strh	r0, [r4, #10]
   d4974:	e03c      	b.n	d49f0 <_ZN15Adafruit_LIS3DH4readEv+0x10c>
  }
  #ifndef __AVR_ATtiny85__
  else {
    if (_sck == -1)
   d4976:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d497a:	3301      	adds	r3, #1
   d497c:	d101      	bne.n	d4982 <_ZN15Adafruit_LIS3DH4readEv+0x9e>
      beginTransaction();
   d497e:	f7ff fea3 	bl	d46c8 <_ZN15Adafruit_LIS3DH16beginTransactionEv>

    digitalWrite(_cs, LOW);
   d4982:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4986:	2100      	movs	r1, #0
   d4988:	b280      	uxth	r0, r0
   d498a:	f001 fbe6 	bl	d615a <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   d498e:	21e8      	movs	r1, #232	; 0xe8
   d4990:	4620      	mov	r0, r4
   d4992:	f7ff fe61 	bl	d4658 <_ZN15Adafruit_LIS3DH7spixferEh>

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   d4996:	21ff      	movs	r1, #255	; 0xff
   d4998:	4620      	mov	r0, r4
   d499a:	f7ff fe5d 	bl	d4658 <_ZN15Adafruit_LIS3DH7spixferEh>
   d499e:	21ff      	movs	r1, #255	; 0xff
   d49a0:	80e0      	strh	r0, [r4, #6]
   d49a2:	4620      	mov	r0, r4
   d49a4:	f7ff fe58 	bl	d4658 <_ZN15Adafruit_LIS3DH7spixferEh>
   d49a8:	88e3      	ldrh	r3, [r4, #6]
   d49aa:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d49ae:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   d49b0:	21ff      	movs	r1, #255	; 0xff
   d49b2:	4620      	mov	r0, r4
   d49b4:	f7ff fe50 	bl	d4658 <_ZN15Adafruit_LIS3DH7spixferEh>
   d49b8:	21ff      	movs	r1, #255	; 0xff
   d49ba:	8120      	strh	r0, [r4, #8]
   d49bc:	4620      	mov	r0, r4
   d49be:	f7ff fe4b 	bl	d4658 <_ZN15Adafruit_LIS3DH7spixferEh>
   d49c2:	8923      	ldrh	r3, [r4, #8]
   d49c4:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d49c8:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   d49ca:	21ff      	movs	r1, #255	; 0xff
   d49cc:	4620      	mov	r0, r4
   d49ce:	f7ff fe43 	bl	d4658 <_ZN15Adafruit_LIS3DH7spixferEh>
   d49d2:	21ff      	movs	r1, #255	; 0xff
   d49d4:	8160      	strh	r0, [r4, #10]
   d49d6:	4620      	mov	r0, r4
   d49d8:	f7ff fe3e 	bl	d4658 <_ZN15Adafruit_LIS3DH7spixferEh>
   d49dc:	8963      	ldrh	r3, [r4, #10]
   d49de:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d49e2:	8160      	strh	r0, [r4, #10]

    digitalWrite(_cs, HIGH);
   d49e4:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d49e8:	2101      	movs	r1, #1
   d49ea:	b280      	uxth	r0, r0
   d49ec:	f001 fbb5 	bl	d615a <digitalWrite>
    if (_sck == -1)
    	endTransaction();

  }
  #endif
  uint8_t range = getRange();
   d49f0:	4620      	mov	r0, r4
   d49f2:	f7ff ff0e 	bl	d4812 <_ZN15Adafruit_LIS3DH8getRangeEv>
  uint16_t divider = 1;
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d49f6:	2803      	cmp	r0, #3
   d49f8:	d009      	beq.n	d4a0e <_ZN15Adafruit_LIS3DH4readEv+0x12a>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d49fa:	2802      	cmp	r0, #2
   d49fc:	d00a      	beq.n	d4a14 <_ZN15Adafruit_LIS3DH4readEv+0x130>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d49fe:	2801      	cmp	r0, #1
   d4a00:	d00b      	beq.n	d4a1a <_ZN15Adafruit_LIS3DH4readEv+0x136>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   d4a02:	2800      	cmp	r0, #0
   d4a04:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   d4a08:	bf18      	it	ne
   d4a0a:	2301      	movne	r3, #1
   d4a0c:	e007      	b.n	d4a1e <_ZN15Adafruit_LIS3DH4readEv+0x13a>

  }
  #endif
  uint8_t range = getRange();
  uint16_t divider = 1;
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d4a0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d4a12:	e004      	b.n	d4a1e <_ZN15Adafruit_LIS3DH4readEv+0x13a>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d4a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   d4a18:	e001      	b.n	d4a1e <_ZN15Adafruit_LIS3DH4readEv+0x13a>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d4a1a:	f641 73fe 	movw	r3, #8190	; 0x1ffe
  if (range == LIS3DH_RANGE_2_G) divider = 16380;

  x_g = (float)x / divider;
   d4a1e:	ee07 3a90 	vmov	s15, r3
   d4a22:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d4a26:	ee07 3a10 	vmov	s14, r3
   d4a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4a2e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d4a32:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
  if (range == LIS3DH_RANGE_2_G) divider = 16380;

  x_g = (float)x / divider;
   d4a36:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   d4a3a:	ee07 3a10 	vmov	s14, r3
   d4a3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
  if (range == LIS3DH_RANGE_2_G) divider = 16380;

  x_g = (float)x / divider;
   d4a42:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   d4a46:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   d4a4a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d4a4e:	ee07 3a10 	vmov	s14, r3
   d4a52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
  if (range == LIS3DH_RANGE_2_G) divider = 16380;

  x_g = (float)x / divider;
  y_g = (float)y / divider;
   d4a56:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   d4a5a:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d4a5e:	edc4 6a05 	vstr	s13, [r4, #20]
   d4a62:	bd10      	pop	{r4, pc}

000d4a64 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
/**************************************************************************/
/*!
    @brief  Gets the most recent sensor event
*/
/**************************************************************************/
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   d4a64:	b570      	push	{r4, r5, r6, lr}
   d4a66:	460c      	mov	r4, r1
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d4a68:	2624      	movs	r6, #36	; 0x24
/**************************************************************************/
/*!
    @brief  Gets the most recent sensor event
*/
/**************************************************************************/
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   d4a6a:	4605      	mov	r5, r0
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
   d4a6c:	4632      	mov	r2, r6
   d4a6e:	2100      	movs	r1, #0
   d4a70:	4620      	mov	r0, r4
   d4a72:	f001 ff1c 	bl	d68ae <memset>

  event->version   = sizeof(sensors_event_t);
   d4a76:	6026      	str	r6, [r4, #0]
  event->sensor_id = _sensorID;
   d4a78:	69ab      	ldr	r3, [r5, #24]
   d4a7a:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   d4a7c:	2301      	movs	r3, #1
   d4a7e:	60a3      	str	r3, [r4, #8]
  event->timestamp = 0;
   d4a80:	2300      	movs	r3, #0
   d4a82:	6123      	str	r3, [r4, #16]

  read();
   d4a84:	4628      	mov	r0, r5
   d4a86:	f7ff ff2d 	bl	d48e4 <_ZN15Adafruit_LIS3DH4readEv>

  event->acceleration.x = x_g;
   d4a8a:	68eb      	ldr	r3, [r5, #12]
   d4a8c:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   d4a8e:	692b      	ldr	r3, [r5, #16]
   d4a90:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   d4a92:	696b      	ldr	r3, [r5, #20]
   d4a94:	61e3      	str	r3, [r4, #28]
}
   d4a96:	bd70      	pop	{r4, r5, r6, pc}

000d4a98 <_GLOBAL__sub_I__ZN15Adafruit_LIS3DHC2Ev>:
   d4a98:	f000 b810 	b.w	d4abc <HAL_Pin_Map>

000d4a9c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4a9c:	b508      	push	{r3, lr}
   d4a9e:	4b02      	ldr	r3, [pc, #8]	; (d4aa8 <netdb_freeaddrinfo+0xc>)
   d4aa0:	681b      	ldr	r3, [r3, #0]
   d4aa2:	689b      	ldr	r3, [r3, #8]
   d4aa4:	9301      	str	r3, [sp, #4]
   d4aa6:	bd08      	pop	{r3, pc}
   d4aa8:	00030268 	.word	0x00030268

000d4aac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4aac:	b508      	push	{r3, lr}
   d4aae:	4b02      	ldr	r3, [pc, #8]	; (d4ab8 <netdb_getaddrinfo+0xc>)
   d4ab0:	681b      	ldr	r3, [r3, #0]
   d4ab2:	68db      	ldr	r3, [r3, #12]
   d4ab4:	9301      	str	r3, [sp, #4]
   d4ab6:	bd08      	pop	{r3, pc}
   d4ab8:	00030268 	.word	0x00030268

000d4abc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4abc:	b508      	push	{r3, lr}
   d4abe:	4b02      	ldr	r3, [pc, #8]	; (d4ac8 <HAL_Pin_Map+0xc>)
   d4ac0:	681b      	ldr	r3, [r3, #0]
   d4ac2:	681b      	ldr	r3, [r3, #0]
   d4ac4:	9301      	str	r3, [sp, #4]
   d4ac6:	bd08      	pop	{r3, pc}
   d4ac8:	0003022c 	.word	0x0003022c

000d4acc <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4acc:	b508      	push	{r3, lr}
   d4ace:	4b02      	ldr	r3, [pc, #8]	; (d4ad8 <HAL_Pin_Mode+0xc>)
   d4ad0:	681b      	ldr	r3, [r3, #0]
   d4ad2:	689b      	ldr	r3, [r3, #8]
   d4ad4:	9301      	str	r3, [sp, #4]
   d4ad6:	bd08      	pop	{r3, pc}
   d4ad8:	0003022c 	.word	0x0003022c

000d4adc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4adc:	b508      	push	{r3, lr}
   d4ade:	4b02      	ldr	r3, [pc, #8]	; (d4ae8 <HAL_Get_Pin_Mode+0xc>)
   d4ae0:	681b      	ldr	r3, [r3, #0]
   d4ae2:	68db      	ldr	r3, [r3, #12]
   d4ae4:	9301      	str	r3, [sp, #4]
   d4ae6:	bd08      	pop	{r3, pc}
   d4ae8:	0003022c 	.word	0x0003022c

000d4aec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4aec:	b508      	push	{r3, lr}
   d4aee:	4b02      	ldr	r3, [pc, #8]	; (d4af8 <HAL_GPIO_Write+0xc>)
   d4af0:	681b      	ldr	r3, [r3, #0]
   d4af2:	691b      	ldr	r3, [r3, #16]
   d4af4:	9301      	str	r3, [sp, #4]
   d4af6:	bd08      	pop	{r3, pc}
   d4af8:	0003022c 	.word	0x0003022c

000d4afc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4afc:	b508      	push	{r3, lr}
   d4afe:	4b02      	ldr	r3, [pc, #8]	; (d4b08 <HAL_GPIO_Read+0xc>)
   d4b00:	681b      	ldr	r3, [r3, #0]
   d4b02:	695b      	ldr	r3, [r3, #20]
   d4b04:	9301      	str	r3, [sp, #4]
   d4b06:	bd08      	pop	{r3, pc}
   d4b08:	0003022c 	.word	0x0003022c

000d4b0c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d4b0c:	b508      	push	{r3, lr}
   d4b0e:	4b02      	ldr	r3, [pc, #8]	; (d4b18 <HAL_SPI_Begin+0xc>)
   d4b10:	681b      	ldr	r3, [r3, #0]
   d4b12:	681b      	ldr	r3, [r3, #0]
   d4b14:	9301      	str	r3, [sp, #4]
   d4b16:	bd08      	pop	{r3, pc}
   d4b18:	00030230 	.word	0x00030230

000d4b1c <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
   d4b1c:	b508      	push	{r3, lr}
   d4b1e:	4b02      	ldr	r3, [pc, #8]	; (d4b28 <HAL_SPI_Set_Bit_Order+0xc>)
   d4b20:	681b      	ldr	r3, [r3, #0]
   d4b22:	689b      	ldr	r3, [r3, #8]
   d4b24:	9301      	str	r3, [sp, #4]
   d4b26:	bd08      	pop	{r3, pc}
   d4b28:	00030230 	.word	0x00030230

000d4b2c <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
   d4b2c:	b508      	push	{r3, lr}
   d4b2e:	4b02      	ldr	r3, [pc, #8]	; (d4b38 <HAL_SPI_Set_Data_Mode+0xc>)
   d4b30:	681b      	ldr	r3, [r3, #0]
   d4b32:	68db      	ldr	r3, [r3, #12]
   d4b34:	9301      	str	r3, [sp, #4]
   d4b36:	bd08      	pop	{r3, pc}
   d4b38:	00030230 	.word	0x00030230

000d4b3c <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
   d4b3c:	b508      	push	{r3, lr}
   d4b3e:	4b02      	ldr	r3, [pc, #8]	; (d4b48 <HAL_SPI_Set_Clock_Divider+0xc>)
   d4b40:	681b      	ldr	r3, [r3, #0]
   d4b42:	691b      	ldr	r3, [r3, #16]
   d4b44:	9301      	str	r3, [sp, #4]
   d4b46:	bd08      	pop	{r3, pc}
   d4b48:	00030230 	.word	0x00030230

000d4b4c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d4b4c:	b508      	push	{r3, lr}
   d4b4e:	4b02      	ldr	r3, [pc, #8]	; (d4b58 <HAL_SPI_Send_Receive_Data+0xc>)
   d4b50:	681b      	ldr	r3, [r3, #0]
   d4b52:	695b      	ldr	r3, [r3, #20]
   d4b54:	9301      	str	r3, [sp, #4]
   d4b56:	bd08      	pop	{r3, pc}
   d4b58:	00030230 	.word	0x00030230

000d4b5c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4b5c:	b508      	push	{r3, lr}
   d4b5e:	4b02      	ldr	r3, [pc, #8]	; (d4b68 <HAL_SPI_Init+0xc>)
   d4b60:	681b      	ldr	r3, [r3, #0]
   d4b62:	69db      	ldr	r3, [r3, #28]
   d4b64:	9301      	str	r3, [sp, #4]
   d4b66:	bd08      	pop	{r3, pc}
   d4b68:	00030230 	.word	0x00030230

000d4b6c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4b6c:	b508      	push	{r3, lr}
   d4b6e:	4b02      	ldr	r3, [pc, #8]	; (d4b78 <HAL_SPI_Is_Enabled+0xc>)
   d4b70:	681b      	ldr	r3, [r3, #0]
   d4b72:	6a1b      	ldr	r3, [r3, #32]
   d4b74:	9301      	str	r3, [sp, #4]
   d4b76:	bd08      	pop	{r3, pc}
   d4b78:	00030230 	.word	0x00030230

000d4b7c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d4b7c:	b508      	push	{r3, lr}
   d4b7e:	4b02      	ldr	r3, [pc, #8]	; (d4b88 <HAL_SPI_Info+0xc>)
   d4b80:	681b      	ldr	r3, [r3, #0]
   d4b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4b84:	9301      	str	r3, [sp, #4]
   d4b86:	bd08      	pop	{r3, pc}
   d4b88:	00030230 	.word	0x00030230

000d4b8c <HAL_SPI_Acquire>:
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d4b8c:	b508      	push	{r3, lr}
   d4b8e:	4b02      	ldr	r3, [pc, #8]	; (d4b98 <HAL_SPI_Acquire+0xc>)
   d4b90:	681b      	ldr	r3, [r3, #0]
   d4b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4b94:	9301      	str	r3, [sp, #4]
   d4b96:	bd08      	pop	{r3, pc}
   d4b98:	00030230 	.word	0x00030230

000d4b9c <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d4b9c:	b508      	push	{r3, lr}
   d4b9e:	4b02      	ldr	r3, [pc, #8]	; (d4ba8 <HAL_SPI_Release+0xc>)
   d4ba0:	681b      	ldr	r3, [r3, #0]
   d4ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4ba4:	9301      	str	r3, [sp, #4]
   d4ba6:	bd08      	pop	{r3, pc}
   d4ba8:	00030230 	.word	0x00030230

000d4bac <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4bac:	b508      	push	{r3, lr}
   d4bae:	4b02      	ldr	r3, [pc, #8]	; (d4bb8 <HAL_RNG_GetRandomNumber+0xc>)
   d4bb0:	681b      	ldr	r3, [r3, #0]
   d4bb2:	685b      	ldr	r3, [r3, #4]
   d4bb4:	9301      	str	r3, [sp, #4]
   d4bb6:	bd08      	pop	{r3, pc}
   d4bb8:	00030218 	.word	0x00030218

000d4bbc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4bbc:	b508      	push	{r3, lr}
   d4bbe:	4b02      	ldr	r3, [pc, #8]	; (d4bc8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4bc0:	681b      	ldr	r3, [r3, #0]
   d4bc2:	695b      	ldr	r3, [r3, #20]
   d4bc4:	9301      	str	r3, [sp, #4]
   d4bc6:	bd08      	pop	{r3, pc}
   d4bc8:	00030218 	.word	0x00030218

000d4bcc <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4bcc:	b508      	push	{r3, lr}
   d4bce:	4b02      	ldr	r3, [pc, #8]	; (d4bd8 <os_thread_is_current+0xc>)
   d4bd0:	681b      	ldr	r3, [r3, #0]
   d4bd2:	689b      	ldr	r3, [r3, #8]
   d4bd4:	9301      	str	r3, [sp, #4]
   d4bd6:	bd08      	pop	{r3, pc}
   d4bd8:	00030248 	.word	0x00030248

000d4bdc <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4bdc:	b508      	push	{r3, lr}
   d4bde:	4b02      	ldr	r3, [pc, #8]	; (d4be8 <os_thread_join+0xc>)
   d4be0:	681b      	ldr	r3, [r3, #0]
   d4be2:	691b      	ldr	r3, [r3, #16]
   d4be4:	9301      	str	r3, [sp, #4]
   d4be6:	bd08      	pop	{r3, pc}
   d4be8:	00030248 	.word	0x00030248

000d4bec <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4bec:	b508      	push	{r3, lr}
   d4bee:	4b02      	ldr	r3, [pc, #8]	; (d4bf8 <os_thread_cleanup+0xc>)
   d4bf0:	681b      	ldr	r3, [r3, #0]
   d4bf2:	695b      	ldr	r3, [r3, #20]
   d4bf4:	9301      	str	r3, [sp, #4]
   d4bf6:	bd08      	pop	{r3, pc}
   d4bf8:	00030248 	.word	0x00030248

000d4bfc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <os_mutex_recursive_create+0xc>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4c04:	9301      	str	r3, [sp, #4]
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	00030248 	.word	0x00030248

000d4c0c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <os_mutex_recursive_destroy+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	00030248 	.word	0x00030248

000d4c1c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <inet_inet_ntop+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	695b      	ldr	r3, [r3, #20]
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	00030264 	.word	0x00030264

000d4c2c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <HAL_USART_Init+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	681b      	ldr	r3, [r3, #0]
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	0003023c 	.word	0x0003023c

000d4c3c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <HAL_USART_Write_Data+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	68db      	ldr	r3, [r3, #12]
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	0003023c 	.word	0x0003023c

000d4c4c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <HAL_USART_Available_Data+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	691b      	ldr	r3, [r3, #16]
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	0003023c 	.word	0x0003023c

000d4c5c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <HAL_USART_Read_Data+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	695b      	ldr	r3, [r3, #20]
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	0003023c 	.word	0x0003023c

000d4c6c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <HAL_USART_Peek_Data+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	699b      	ldr	r3, [r3, #24]
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	0003023c 	.word	0x0003023c

000d4c7c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <HAL_USART_Flush_Data+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	69db      	ldr	r3, [r3, #28]
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	0003023c 	.word	0x0003023c

000d4c8c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <HAL_USART_Is_Enabled+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	6a1b      	ldr	r3, [r3, #32]
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	0003023c 	.word	0x0003023c

000d4c9c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <HAL_USART_Available_Data_For_Write+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	0003023c 	.word	0x0003023c

000d4cac <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <HAL_I2C_Begin+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	68db      	ldr	r3, [r3, #12]
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	00030228 	.word	0x00030228

000d4cbc <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b02      	ldr	r3, [pc, #8]	; (d4cc8 <HAL_I2C_Begin_Transmission+0xc>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	699b      	ldr	r3, [r3, #24]
   d4cc4:	9301      	str	r3, [sp, #4]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	00030228 	.word	0x00030228

000d4ccc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <HAL_I2C_End_Transmission+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	69db      	ldr	r3, [r3, #28]
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	00030228 	.word	0x00030228

000d4cdc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <HAL_I2C_Write_Data+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	6a1b      	ldr	r3, [r3, #32]
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	00030228 	.word	0x00030228

000d4cec <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <HAL_I2C_Available_Data+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	00030228 	.word	0x00030228

000d4cfc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <HAL_I2C_Read_Data+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	00030228 	.word	0x00030228

000d4d0c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <HAL_I2C_Peek_Data+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	00030228 	.word	0x00030228

000d4d1c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <HAL_I2C_Flush_Data+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	00030228 	.word	0x00030228

000d4d2c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <HAL_I2C_Is_Enabled+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	00030228 	.word	0x00030228

000d4d3c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <HAL_I2C_Init+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	00030228 	.word	0x00030228

000d4d4c <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <HAL_I2C_Request_Data_Ex+0xc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4d54:	9301      	str	r3, [sp, #4]
   d4d56:	bd08      	pop	{r3, pc}
   d4d58:	00030228 	.word	0x00030228

000d4d5c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4d5c:	b508      	push	{r3, lr}
   d4d5e:	4b02      	ldr	r3, [pc, #8]	; (d4d68 <HAL_USB_USART_Init+0xc>)
   d4d60:	681b      	ldr	r3, [r3, #0]
   d4d62:	681b      	ldr	r3, [r3, #0]
   d4d64:	9301      	str	r3, [sp, #4]
   d4d66:	bd08      	pop	{r3, pc}
   d4d68:	0003024c 	.word	0x0003024c

000d4d6c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4d6c:	b508      	push	{r3, lr}
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <HAL_USB_USART_Available_Data+0xc>)
   d4d70:	681b      	ldr	r3, [r3, #0]
   d4d72:	691b      	ldr	r3, [r3, #16]
   d4d74:	9301      	str	r3, [sp, #4]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	0003024c 	.word	0x0003024c

000d4d7c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4d80:	681b      	ldr	r3, [r3, #0]
   d4d82:	695b      	ldr	r3, [r3, #20]
   d4d84:	9301      	str	r3, [sp, #4]
   d4d86:	bd08      	pop	{r3, pc}
   d4d88:	0003024c 	.word	0x0003024c

000d4d8c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4d8c:	b508      	push	{r3, lr}
   d4d8e:	4b02      	ldr	r3, [pc, #8]	; (d4d98 <HAL_USB_USART_Receive_Data+0xc>)
   d4d90:	681b      	ldr	r3, [r3, #0]
   d4d92:	699b      	ldr	r3, [r3, #24]
   d4d94:	9301      	str	r3, [sp, #4]
   d4d96:	bd08      	pop	{r3, pc}
   d4d98:	0003024c 	.word	0x0003024c

000d4d9c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4d9c:	b508      	push	{r3, lr}
   d4d9e:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <HAL_USB_USART_Send_Data+0xc>)
   d4da0:	681b      	ldr	r3, [r3, #0]
   d4da2:	69db      	ldr	r3, [r3, #28]
   d4da4:	9301      	str	r3, [sp, #4]
   d4da6:	bd08      	pop	{r3, pc}
   d4da8:	0003024c 	.word	0x0003024c

000d4dac <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4dac:	b508      	push	{r3, lr}
   d4dae:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <HAL_USB_USART_Flush_Data+0xc>)
   d4db0:	681b      	ldr	r3, [r3, #0]
   d4db2:	6a1b      	ldr	r3, [r3, #32]
   d4db4:	9301      	str	r3, [sp, #4]
   d4db6:	bd08      	pop	{r3, pc}
   d4db8:	0003024c 	.word	0x0003024c

000d4dbc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4dbc:	b508      	push	{r3, lr}
   d4dbe:	4b02      	ldr	r3, [pc, #8]	; (d4dc8 <set_system_mode+0xc>)
   d4dc0:	681b      	ldr	r3, [r3, #0]
   d4dc2:	685b      	ldr	r3, [r3, #4]
   d4dc4:	9301      	str	r3, [sp, #4]
   d4dc6:	bd08      	pop	{r3, pc}
   d4dc8:	00030220 	.word	0x00030220

000d4dcc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4dcc:	b508      	push	{r3, lr}
   d4dce:	4b02      	ldr	r3, [pc, #8]	; (d4dd8 <system_delay_ms+0xc>)
   d4dd0:	681b      	ldr	r3, [r3, #0]
   d4dd2:	695b      	ldr	r3, [r3, #20]
   d4dd4:	9301      	str	r3, [sp, #4]
   d4dd6:	bd08      	pop	{r3, pc}
   d4dd8:	00030220 	.word	0x00030220

000d4ddc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4ddc:	b508      	push	{r3, lr}
   d4dde:	4b02      	ldr	r3, [pc, #8]	; (d4de8 <application_thread_current+0xc>)
   d4de0:	681b      	ldr	r3, [r3, #0]
   d4de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4de4:	9301      	str	r3, [sp, #4]
   d4de6:	bd08      	pop	{r3, pc}
   d4de8:	00030220 	.word	0x00030220

000d4dec <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4dec:	b508      	push	{r3, lr}
   d4dee:	4b02      	ldr	r3, [pc, #8]	; (d4df8 <application_thread_invoke+0xc>)
   d4df0:	681b      	ldr	r3, [r3, #0]
   d4df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4df4:	9301      	str	r3, [sp, #4]
   d4df6:	bd08      	pop	{r3, pc}
   d4df8:	00030220 	.word	0x00030220

000d4dfc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b03      	ldr	r3, [pc, #12]	; (d4e0c <system_ctrl_set_app_request_handler+0x10>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4e06:	9301      	str	r3, [sp, #4]
   d4e08:	bd08      	pop	{r3, pc}
   d4e0a:	0000      	.short	0x0000
   d4e0c:	00030220 	.word	0x00030220

000d4e10 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4e10:	b508      	push	{r3, lr}
   d4e12:	4b03      	ldr	r3, [pc, #12]	; (d4e20 <system_ctrl_set_result+0x10>)
   d4e14:	681b      	ldr	r3, [r3, #0]
   d4e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4e1a:	9301      	str	r3, [sp, #4]
   d4e1c:	bd08      	pop	{r3, pc}
   d4e1e:	0000      	.short	0x0000
   d4e20:	00030220 	.word	0x00030220

000d4e24 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <network_connect+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	685b      	ldr	r3, [r3, #4]
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	00030240 	.word	0x00030240

000d4e34 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <network_connecting+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	689b      	ldr	r3, [r3, #8]
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	00030240 	.word	0x00030240

000d4e44 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4e44:	b508      	push	{r3, lr}
   d4e46:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <network_disconnect+0xc>)
   d4e48:	681b      	ldr	r3, [r3, #0]
   d4e4a:	68db      	ldr	r3, [r3, #12]
   d4e4c:	9301      	str	r3, [sp, #4]
   d4e4e:	bd08      	pop	{r3, pc}
   d4e50:	00030240 	.word	0x00030240

000d4e54 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4e54:	b508      	push	{r3, lr}
   d4e56:	4b02      	ldr	r3, [pc, #8]	; (d4e60 <network_ready+0xc>)
   d4e58:	681b      	ldr	r3, [r3, #0]
   d4e5a:	691b      	ldr	r3, [r3, #16]
   d4e5c:	9301      	str	r3, [sp, #4]
   d4e5e:	bd08      	pop	{r3, pc}
   d4e60:	00030240 	.word	0x00030240

000d4e64 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4e64:	b508      	push	{r3, lr}
   d4e66:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <network_on+0xc>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	695b      	ldr	r3, [r3, #20]
   d4e6c:	9301      	str	r3, [sp, #4]
   d4e6e:	bd08      	pop	{r3, pc}
   d4e70:	00030240 	.word	0x00030240

000d4e74 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <network_off+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	699b      	ldr	r3, [r3, #24]
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	00030240 	.word	0x00030240

000d4e84 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <network_listen+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	69db      	ldr	r3, [r3, #28]
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	00030240 	.word	0x00030240

000d4e94 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <network_listening+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	6a1b      	ldr	r3, [r3, #32]
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	00030240 	.word	0x00030240

000d4ea4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <network_set_listen_timeout+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	00030240 	.word	0x00030240

000d4eb4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <network_get_listen_timeout+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	00030240 	.word	0x00030240

000d4ec4 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <spark_cloud_flag_connected+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	695b      	ldr	r3, [r3, #20]
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	00030244 	.word	0x00030244

000d4ed4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <spark_send_event+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	6a1b      	ldr	r3, [r3, #32]
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	00030244 	.word	0x00030244

000d4ee4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	00030244 	.word	0x00030244

000d4ef4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <malloc+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	681b      	ldr	r3, [r3, #0]
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	0003021c 	.word	0x0003021c

000d4f04 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <free+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	685b      	ldr	r3, [r3, #4]
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	0003021c 	.word	0x0003021c

000d4f14 <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <sprintf+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	68db      	ldr	r3, [r3, #12]
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	0003021c 	.word	0x0003021c

000d4f24 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <abort+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	0003021c 	.word	0x0003021c

000d4f34 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <_malloc_r+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	0003021c 	.word	0x0003021c

000d4f44 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4f44:	2200      	movs	r2, #0
   d4f46:	4611      	mov	r1, r2
   d4f48:	6840      	ldr	r0, [r0, #4]
   d4f4a:	f7ff bfa3 	b.w	d4e94 <network_listening>

000d4f4e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4f4e:	2200      	movs	r2, #0
   d4f50:	4611      	mov	r1, r2
   d4f52:	6840      	ldr	r0, [r0, #4]
   d4f54:	f7ff bfae 	b.w	d4eb4 <network_get_listen_timeout>

000d4f58 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4f58:	2200      	movs	r2, #0
   d4f5a:	6840      	ldr	r0, [r0, #4]
   d4f5c:	f7ff bfa2 	b.w	d4ea4 <network_set_listen_timeout>

000d4f60 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4f60:	2200      	movs	r2, #0
   d4f62:	f081 0101 	eor.w	r1, r1, #1
   d4f66:	6840      	ldr	r0, [r0, #4]
   d4f68:	f7ff bf8c 	b.w	d4e84 <network_listen>

000d4f6c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4f6c:	2300      	movs	r3, #0
   d4f6e:	461a      	mov	r2, r3
   d4f70:	4619      	mov	r1, r3
   d4f72:	6840      	ldr	r0, [r0, #4]
   d4f74:	f7ff bf7e 	b.w	d4e74 <network_off>

000d4f78 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4f78:	2300      	movs	r3, #0
   d4f7a:	461a      	mov	r2, r3
   d4f7c:	4619      	mov	r1, r3
   d4f7e:	6840      	ldr	r0, [r0, #4]
   d4f80:	f7ff bf70 	b.w	d4e64 <network_on>

000d4f84 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4f84:	2200      	movs	r2, #0
   d4f86:	4611      	mov	r1, r2
   d4f88:	6840      	ldr	r0, [r0, #4]
   d4f8a:	f7ff bf63 	b.w	d4e54 <network_ready>

000d4f8e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4f8e:	2200      	movs	r2, #0
   d4f90:	4611      	mov	r1, r2
   d4f92:	6840      	ldr	r0, [r0, #4]
   d4f94:	f7ff bf4e 	b.w	d4e34 <network_connecting>

000d4f98 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4f98:	2200      	movs	r2, #0
   d4f9a:	2102      	movs	r1, #2
   d4f9c:	6840      	ldr	r0, [r0, #4]
   d4f9e:	f7ff bf51 	b.w	d4e44 <network_disconnect>

000d4fa2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4fa2:	2300      	movs	r3, #0
   d4fa4:	461a      	mov	r2, r3
   d4fa6:	6840      	ldr	r0, [r0, #4]
   d4fa8:	f7ff bf3c 	b.w	d4e24 <network_connect>

000d4fac <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4fac:	4b02      	ldr	r3, [pc, #8]	; (d4fb8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4fae:	2203      	movs	r2, #3
   d4fb0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4fb2:	4a02      	ldr	r2, [pc, #8]	; (d4fbc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4fb4:	601a      	str	r2, [r3, #0]
   d4fb6:	4770      	bx	lr
   d4fb8:	2003e4dc 	.word	0x2003e4dc
   d4fbc:	000d6ab8 	.word	0x000d6ab8

000d4fc0 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d4fc0:	2100      	movs	r1, #0
   d4fc2:	f7ff bde3 	b.w	d4b8c <HAL_SPI_Acquire>

000d4fc6 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d4fc6:	2100      	movs	r1, #0
   d4fc8:	f7ff bde8 	b.w	d4b9c <HAL_SPI_Release>

000d4fcc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4fcc:	b510      	push	{r4, lr}
   d4fce:	4604      	mov	r4, r0
{
    _spi = spi;
   d4fd0:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d4fd2:	4608      	mov	r0, r1
   d4fd4:	f7ff fdc2 	bl	d4b5c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4fd8:	2300      	movs	r3, #0
   d4fda:	6063      	str	r3, [r4, #4]
}
   d4fdc:	4620      	mov	r0, r4
   d4fde:	bd10      	pop	{r4, pc}

000d4fe0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d4fe0:	b510      	push	{r4, lr}
   d4fe2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d4fe4:	7800      	ldrb	r0, [r0, #0]
   d4fe6:	f7ff ffeb 	bl	d4fc0 <_ZN8SPIClass4lockEv.isra.0>
   d4fea:	b948      	cbnz	r0, d5000 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d4fec:	7820      	ldrb	r0, [r4, #0]
   d4fee:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d4ff2:	f7ff fd8b 	bl	d4b0c <HAL_SPI_Begin>
        unlock();
   d4ff6:	7820      	ldrb	r0, [r4, #0]
    }
}
   d4ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d4ffc:	f7ff bfe3 	b.w	d4fc6 <_ZN8SPIClass6unlockEv.isra.1>
   d5000:	bd10      	pop	{r4, pc}

000d5002 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5002:	b538      	push	{r3, r4, r5, lr}
   d5004:	4604      	mov	r4, r0
    if (!lock())
   d5006:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5008:	460d      	mov	r5, r1
    if (!lock())
   d500a:	f7ff ffd9 	bl	d4fc0 <_ZN8SPIClass4lockEv.isra.0>
   d500e:	b940      	cbnz	r0, d5022 <_ZN8SPIClass11setBitOrderEh+0x20>
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
   d5010:	7820      	ldrb	r0, [r4, #0]
   d5012:	4629      	mov	r1, r5
   d5014:	f7ff fd82 	bl	d4b1c <HAL_SPI_Set_Bit_Order>
        unlock();
   d5018:	7820      	ldrb	r0, [r4, #0]
    }
}
   d501a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setBitOrder(uint8_t bitOrder)
{
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
        unlock();
   d501e:	f7ff bfd2 	b.w	d4fc6 <_ZN8SPIClass6unlockEv.isra.1>
   d5022:	bd38      	pop	{r3, r4, r5, pc}

000d5024 <_ZN8SPIClass11setDataModeEh>:
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d5024:	b538      	push	{r3, r4, r5, lr}
   d5026:	4604      	mov	r4, r0
    if (!lock())
   d5028:	7800      	ldrb	r0, [r0, #0]
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
   d502a:	460d      	mov	r5, r1
    if (!lock())
   d502c:	f7ff ffc8 	bl	d4fc0 <_ZN8SPIClass4lockEv.isra.0>
   d5030:	b940      	cbnz	r0, d5044 <_ZN8SPIClass11setDataModeEh+0x20>
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
   d5032:	7820      	ldrb	r0, [r4, #0]
   d5034:	4629      	mov	r1, r5
   d5036:	f7ff fd79 	bl	d4b2c <HAL_SPI_Set_Data_Mode>
        unlock();
   d503a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d503c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void SPIClass::setDataMode(uint8_t mode)
{
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
        unlock();
   d5040:	f7ff bfc1 	b.w	d4fc6 <_ZN8SPIClass6unlockEv.isra.1>
   d5044:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5048 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5048:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d504a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d504c:	6018      	str	r0, [r3, #0]
   d504e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5050:	6818      	ldr	r0, [r3, #0]
   d5052:	4288      	cmp	r0, r1
   d5054:	b2e5      	uxtb	r5, r4
   d5056:	d906      	bls.n	d5066 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5058:	3401      	adds	r4, #1
   d505a:	2c08      	cmp	r4, #8
   d505c:	d002      	beq.n	d5064 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d505e:	0840      	lsrs	r0, r0, #1
   d5060:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d5062:	e7f5      	b.n	d5050 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5064:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5068:	5d5b      	ldrb	r3, [r3, r5]
   d506a:	7013      	strb	r3, [r2, #0]
   d506c:	bd30      	pop	{r4, r5, pc}
   d506e:	bf00      	nop
   d5070:	000d6ae4 	.word	0x000d6ae4

000d5074 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5078:	b088      	sub	sp, #32
    unsigned clock = 0;
   d507a:	2300      	movs	r3, #0
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d507c:	4604      	mov	r4, r0
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d507e:	7800      	ldrb	r0, [r0, #0]
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
   d5080:	9302      	str	r3, [sp, #8]
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5082:	460e      	mov	r6, r1
   d5084:	4617      	mov	r7, r2
    unsigned clock = 0;

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5086:	f7ff ff9b 	bl	d4fc0 <_ZN8SPIClass4lockEv.isra.0>
   d508a:	4605      	mov	r5, r0
   d508c:	bb00      	cbnz	r0, d50d0 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d508e:	f894 8000 	ldrb.w	r8, [r4]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d5092:	4601      	mov	r1, r0
   d5094:	2214      	movs	r2, #20
   d5096:	a803      	add	r0, sp, #12
   d5098:	f001 fc09 	bl	d68ae <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d509c:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d509e:	462a      	mov	r2, r5
   d50a0:	a903      	add	r1, sp, #12
   d50a2:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d50a4:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
   d50a8:	f7ff fd68 	bl	d4b7c <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d50ac:	ab02      	add	r3, sp, #8
   d50ae:	f10d 0207 	add.w	r2, sp, #7
   d50b2:	fb07 f106 	mul.w	r1, r7, r6
   d50b6:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
   d50b8:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d50bc:	f7ff ffc4 	bl	d5048 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
   d50c0:	7820      	ldrb	r0, [r4, #0]
   d50c2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d50c6:	f7ff fd39 	bl	d4b3c <HAL_SPI_Set_Clock_Divider>
        unlock();
   d50ca:	7820      	ldrb	r0, [r4, #0]
   d50cc:	f7ff ff7b 	bl	d4fc6 <_ZN8SPIClass6unlockEv.isra.1>
    }

    return clock;
}
   d50d0:	9802      	ldr	r0, [sp, #8]
   d50d2:	b008      	add	sp, #32
   d50d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d50d8 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d50d8:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d50da:	7800      	ldrb	r0, [r0, #0]
   d50dc:	f7ff fd36 	bl	d4b4c <HAL_SPI_Send_Receive_Data>
}
   d50e0:	b2c0      	uxtb	r0, r0
   d50e2:	bd08      	pop	{r3, pc}

000d50e4 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d50e4:	7800      	ldrb	r0, [r0, #0]
   d50e6:	f7ff bd41 	b.w	d4b6c <HAL_SPI_Is_Enabled>

000d50ea <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d50ea:	b510      	push	{r4, lr}
   d50ec:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d50ee:	6800      	ldr	r0, [r0, #0]
   d50f0:	b118      	cbz	r0, d50fa <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d50f2:	f7ff ff07 	bl	d4f04 <free>
            wakeupSource_ = nullptr;
   d50f6:	2300      	movs	r3, #0
   d50f8:	6023      	str	r3, [r4, #0]
   d50fa:	bd10      	pop	{r4, pc}

000d50fc <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d50fc:	b510      	push	{r4, lr}
   d50fe:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d5100:	f7ff fff3 	bl	d50ea <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5104:	4620      	mov	r0, r4
   d5106:	bd10      	pop	{r4, pc}

000d5108 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5108:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d510a:	4c09      	ldr	r4, [pc, #36]	; (d5130 <_GLOBAL__sub_I_System+0x28>)
   d510c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d510e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5112:	6020      	str	r0, [r4, #0]
   d5114:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5116:	71a0      	strb	r0, [r4, #6]
   d5118:	8120      	strh	r0, [r4, #8]
   d511a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d511c:	f7ff fe4e 	bl	d4dbc <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5120:	4620      	mov	r0, r4
   d5122:	4a04      	ldr	r2, [pc, #16]	; (d5134 <_GLOBAL__sub_I_System+0x2c>)
   d5124:	4904      	ldr	r1, [pc, #16]	; (d5138 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d512a:	f001 b883 	b.w	d6234 <__aeabi_atexit>
   d512e:	bf00      	nop
   d5130:	2003e4e4 	.word	0x2003e4e4
   d5134:	2003b514 	.word	0x2003b514
   d5138:	000d50fd 	.word	0x000d50fd

000d513c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d513c:	b510      	push	{r4, lr}
   d513e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5140:	6800      	ldr	r0, [r0, #0]
   d5142:	b108      	cbz	r0, d5148 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5144:	f7ff fd62 	bl	d4c0c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5148:	4620      	mov	r0, r4
   d514a:	bd10      	pop	{r4, pc}

000d514c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d514c:	680b      	ldr	r3, [r1, #0]
   d514e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5150:	b113      	cbz	r3, d5158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5152:	685a      	ldr	r2, [r3, #4]
   d5154:	3201      	adds	r2, #1
   d5156:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5158:	4770      	bx	lr
	...

000d515c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d515c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d515e:	4c06      	ldr	r4, [pc, #24]	; (d5178 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5160:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5162:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5164:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5166:	f7ff fd49 	bl	d4bfc <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d516a:	4620      	mov	r0, r4
   d516c:	4a03      	ldr	r2, [pc, #12]	; (d517c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d516e:	4904      	ldr	r1, [pc, #16]	; (d5180 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5174:	f001 b85e 	b.w	d6234 <__aeabi_atexit>
   d5178:	2003e4f0 	.word	0x2003e4f0
   d517c:	2003b514 	.word	0x2003b514
   d5180:	000d513d 	.word	0x000d513d

000d5184 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5186:	4606      	mov	r6, r0
   d5188:	460d      	mov	r5, r1
   d518a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d518c:	2400      	movs	r4, #0
  while (size--) {
   d518e:	42bd      	cmp	r5, r7
   d5190:	d00c      	beq.n	d51ac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5192:	6833      	ldr	r3, [r6, #0]
   d5194:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5198:	689b      	ldr	r3, [r3, #8]
   d519a:	4630      	mov	r0, r6
   d519c:	4798      	blx	r3
     if (chunk>=0)
   d519e:	2800      	cmp	r0, #0
   d51a0:	db01      	blt.n	d51a6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d51a2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d51a4:	e7f3      	b.n	d518e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d51a6:	2c00      	cmp	r4, #0
   d51a8:	bf08      	it	eq
   d51aa:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d51ac:	4620      	mov	r0, r4
   d51ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d51b0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d51b0:	b570      	push	{r4, r5, r6, lr}
   d51b2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d51b4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d51b6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d51b8:	b149      	cbz	r1, d51ce <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d51ba:	f001 fbc4 	bl	d6946 <strlen>
   d51be:	682b      	ldr	r3, [r5, #0]
   d51c0:	4602      	mov	r2, r0
   d51c2:	4621      	mov	r1, r4
   d51c4:	4628      	mov	r0, r5
   d51c6:	68db      	ldr	r3, [r3, #12]
    }
   d51c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d51cc:	4718      	bx	r3
    }
   d51ce:	bd70      	pop	{r4, r5, r6, pc}

000d51d0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d51d0:	6803      	ldr	r3, [r0, #0]
   d51d2:	689b      	ldr	r3, [r3, #8]
   d51d4:	4718      	bx	r3

000d51d6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d51d6:	b530      	push	{r4, r5, lr}
   d51d8:	b08b      	sub	sp, #44	; 0x2c
   d51da:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d51dc:	2100      	movs	r1, #0
   d51de:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d51e2:	2a01      	cmp	r2, #1
   d51e4:	bf98      	it	ls
   d51e6:	220a      	movls	r2, #10
   d51e8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d51ec:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d51f0:	fb05 3312 	mls	r3, r5, r2, r3
   d51f4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d51f8:	2b09      	cmp	r3, #9
   d51fa:	bf94      	ite	ls
   d51fc:	3330      	addls	r3, #48	; 0x30
   d51fe:	3337      	addhi	r3, #55	; 0x37
   d5200:	b2db      	uxtb	r3, r3
   d5202:	4621      	mov	r1, r4
   d5204:	f804 3901 	strb.w	r3, [r4], #-1
   d5208:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d520a:	2d00      	cmp	r5, #0
   d520c:	d1ee      	bne.n	d51ec <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d520e:	f7ff ffcf 	bl	d51b0 <_ZN5Print5writeEPKc>
}
   d5212:	b00b      	add	sp, #44	; 0x2c
   d5214:	bd30      	pop	{r4, r5, pc}
	...

000d5218 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5218:	4b01      	ldr	r3, [pc, #4]	; (d5220 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d521a:	4a02      	ldr	r2, [pc, #8]	; (d5224 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d521c:	601a      	str	r2, [r3, #0]
   d521e:	4770      	bx	lr
   d5220:	2003e4f4 	.word	0x2003e4f4
   d5224:	000d6b5f 	.word	0x000d6b5f

000d5228 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5228:	4b02      	ldr	r3, [pc, #8]	; (d5234 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d522a:	681a      	ldr	r2, [r3, #0]
   d522c:	4b02      	ldr	r3, [pc, #8]	; (d5238 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d522e:	601a      	str	r2, [r3, #0]
   d5230:	4770      	bx	lr
   d5232:	bf00      	nop
   d5234:	2003b4ac 	.word	0x2003b4ac
   d5238:	2003e4f8 	.word	0x2003e4f8

000d523c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d523c:	2100      	movs	r1, #0
   d523e:	f7ff bdc5 	b.w	d4dcc <system_delay_ms>

000d5242 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5242:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5244:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5246:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d5248:	b113      	cbz	r3, d5250 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d524a:	2203      	movs	r2, #3
   d524c:	4601      	mov	r1, r0
   d524e:	4798      	blx	r3
    }
   d5250:	4620      	mov	r0, r4
   d5252:	bd10      	pop	{r4, pc}

000d5254 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5254:	b510      	push	{r4, lr}
   d5256:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5258:	f7ff fff3 	bl	d5242 <_ZNSt14_Function_baseD1Ev>
   d525c:	4620      	mov	r0, r4
   d525e:	bd10      	pop	{r4, pc}

000d5260 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d5260:	b513      	push	{r0, r1, r4, lr}
   d5262:	460b      	mov	r3, r1
   d5264:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5266:	c803      	ldmia	r0, {r0, r1}
   d5268:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d526c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5270:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5274:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5278:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d527c:	b002      	add	sp, #8
   d527e:	bd10      	pop	{r4, pc}

000d5280 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5280:	4803      	ldr	r0, [pc, #12]	; (d5290 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5282:	4a04      	ldr	r2, [pc, #16]	; (d5294 <_GLOBAL__sub_I_RGB+0x14>)
   d5284:	4904      	ldr	r1, [pc, #16]	; (d5298 <_GLOBAL__sub_I_RGB+0x18>)
   d5286:	2300      	movs	r3, #0
   d5288:	6083      	str	r3, [r0, #8]
   d528a:	f000 bfd3 	b.w	d6234 <__aeabi_atexit>
   d528e:	bf00      	nop
   d5290:	2003e4fc 	.word	0x2003e4fc
   d5294:	2003b514 	.word	0x2003b514
   d5298:	000d5255 	.word	0x000d5255

000d529c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d529c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d529e:	4b0c      	ldr	r3, [pc, #48]	; (d52d0 <serialEventRun+0x34>)
   d52a0:	b133      	cbz	r3, d52b0 <serialEventRun+0x14>
   d52a2:	f000 fc17 	bl	d5ad4 <_Z16_fetch_usbserialv>
   d52a6:	6803      	ldr	r3, [r0, #0]
   d52a8:	691b      	ldr	r3, [r3, #16]
   d52aa:	4798      	blx	r3
   d52ac:	2800      	cmp	r0, #0
   d52ae:	dc09      	bgt.n	d52c4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d52b0:	4b08      	ldr	r3, [pc, #32]	; (d52d4 <serialEventRun+0x38>)
   d52b2:	b163      	cbz	r3, d52ce <serialEventRun+0x32>
   d52b4:	f000 fc90 	bl	d5bd8 <_Z22__fetch_global_Serial1v>
   d52b8:	6803      	ldr	r3, [r0, #0]
   d52ba:	691b      	ldr	r3, [r3, #16]
   d52bc:	4798      	blx	r3
   d52be:	2800      	cmp	r0, #0
   d52c0:	dc03      	bgt.n	d52ca <serialEventRun+0x2e>
   d52c2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d52c4:	f3af 8000 	nop.w
   d52c8:	e7f2      	b.n	d52b0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d52ca:	f3af 8000 	nop.w
   d52ce:	bd08      	pop	{r3, pc}
	...

000d52d8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d52d8:	b508      	push	{r3, lr}
	serialEventRun();
   d52da:	f7ff ffdf 	bl	d529c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d52de:	f7ff fc6d 	bl	d4bbc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d52e2:	4b01      	ldr	r3, [pc, #4]	; (d52e8 <_post_loop+0x10>)
   d52e4:	6018      	str	r0, [r3, #0]
   d52e6:	bd08      	pop	{r3, pc}
   d52e8:	2003e730 	.word	0x2003e730

000d52ec <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d52ec:	4802      	ldr	r0, [pc, #8]	; (d52f8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d52ee:	4a03      	ldr	r2, [pc, #12]	; (d52fc <_Z33system_initialize_user_backup_ramv+0x10>)
   d52f0:	4903      	ldr	r1, [pc, #12]	; (d5300 <_Z33system_initialize_user_backup_ramv+0x14>)
   d52f2:	1a12      	subs	r2, r2, r0
   d52f4:	f001 bad0 	b.w	d6898 <memcpy>
   d52f8:	2003f400 	.word	0x2003f400
   d52fc:	2003f404 	.word	0x2003f404
   d5300:	000d6df0 	.word	0x000d6df0

000d5304 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5304:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5306:	2300      	movs	r3, #0
   d5308:	9300      	str	r3, [sp, #0]
   d530a:	461a      	mov	r2, r3
   d530c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5310:	f7ff fd7e 	bl	d4e10 <system_ctrl_set_result>
}
   d5314:	b003      	add	sp, #12
   d5316:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d531c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d531c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d531e:	8843      	ldrh	r3, [r0, #2]
   d5320:	2b0a      	cmp	r3, #10
   d5322:	d008      	beq.n	d5336 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5324:	2b50      	cmp	r3, #80	; 0x50
   d5326:	d109      	bne.n	d533c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5328:	4b09      	ldr	r3, [pc, #36]	; (d5350 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d532a:	681b      	ldr	r3, [r3, #0]
   d532c:	b13b      	cbz	r3, d533e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d532e:	b003      	add	sp, #12
   d5330:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5334:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5336:	f7ff ffe5 	bl	d5304 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d533a:	e006      	b.n	d534a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d533c:	2300      	movs	r3, #0
   d533e:	9300      	str	r3, [sp, #0]
   d5340:	461a      	mov	r2, r3
   d5342:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5346:	f7ff fd63 	bl	d4e10 <system_ctrl_set_result>
        break;
    }
}
   d534a:	b003      	add	sp, #12
   d534c:	f85d fb04 	ldr.w	pc, [sp], #4
   d5350:	2003e50c 	.word	0x2003e50c

000d5354 <module_user_init_hook>:

void module_user_init_hook()
{
   d5354:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5356:	4c10      	ldr	r4, [pc, #64]	; (d5398 <module_user_init_hook+0x44>)
   d5358:	4d10      	ldr	r5, [pc, #64]	; (d539c <module_user_init_hook+0x48>)
   d535a:	6823      	ldr	r3, [r4, #0]
   d535c:	42ab      	cmp	r3, r5
   d535e:	4b10      	ldr	r3, [pc, #64]	; (d53a0 <module_user_init_hook+0x4c>)
   d5360:	bf0c      	ite	eq
   d5362:	2201      	moveq	r2, #1
   d5364:	2200      	movne	r2, #0
   d5366:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5368:	d002      	beq.n	d5370 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d536a:	f7ff ffbf 	bl	d52ec <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d536e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5370:	f7ff fc1c 	bl	d4bac <HAL_RNG_GetRandomNumber>
   d5374:	4604      	mov	r4, r0
    srand(seed);
   d5376:	f001 faa3 	bl	d68c0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d537a:	4b0a      	ldr	r3, [pc, #40]	; (d53a4 <module_user_init_hook+0x50>)
   d537c:	b113      	cbz	r3, d5384 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d537e:	4620      	mov	r0, r4
   d5380:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5384:	2100      	movs	r1, #0
   d5386:	4807      	ldr	r0, [pc, #28]	; (d53a4 <module_user_init_hook+0x50>)
   d5388:	f7ff fdac 	bl	d4ee4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d538c:	2100      	movs	r1, #0
   d538e:	4806      	ldr	r0, [pc, #24]	; (d53a8 <module_user_init_hook+0x54>)
}
   d5390:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5394:	f7ff bd32 	b.w	d4dfc <system_ctrl_set_app_request_handler>
   d5398:	2003f400 	.word	0x2003f400
   d539c:	9a271c1e 	.word	0x9a271c1e
   d53a0:	2003e510 	.word	0x2003e510
   d53a4:	00000000 	.word	0x00000000
   d53a8:	000d531d 	.word	0x000d531d

000d53ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d53ac:	4770      	bx	lr

000d53ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d53ae:	2000      	movs	r0, #0
   d53b0:	4770      	bx	lr

000d53b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d53b2:	b510      	push	{r4, lr}
   d53b4:	2110      	movs	r1, #16
   d53b6:	4604      	mov	r4, r0
   d53b8:	f000 ff4a 	bl	d6250 <_ZdlPvj>
   d53bc:	4620      	mov	r0, r4
   d53be:	bd10      	pop	{r4, pc}

000d53c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d53c0:	b508      	push	{r3, lr}
      { delete this; }
   d53c2:	b108      	cbz	r0, d53c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d53c4:	f7ff fff5 	bl	d53b2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d53c8:	bd08      	pop	{r3, pc}

000d53ca <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d53ca:	2200      	movs	r2, #0
   d53cc:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d53ce:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d53d0:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d53d4:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d53d6:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d53da:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d53dc:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d53de:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d53e0:	680c      	ldr	r4, [r1, #0]
   d53e2:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d53e4:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d53e6:	bd10      	pop	{r4, pc}

000d53e8 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d53e8:	b510      	push	{r4, lr}
   d53ea:	4604      	mov	r4, r0
    free((void*)msg_);
   d53ec:	6800      	ldr	r0, [r0, #0]
   d53ee:	f7ff fd89 	bl	d4f04 <free>
}
   d53f2:	4620      	mov	r0, r4
   d53f4:	bd10      	pop	{r4, pc}

000d53f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d53f6:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d53f8:	68c4      	ldr	r4, [r0, #12]
   d53fa:	b1f4      	cbz	r4, d543a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d53fc:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d53fe:	2b02      	cmp	r3, #2
   d5400:	d103      	bne.n	d540a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5402:	f104 000c 	add.w	r0, r4, #12
   d5406:	f7ff ffef 	bl	d53e8 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d540a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d540c:	b135      	cbz	r5, d541c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d540e:	4628      	mov	r0, r5
   d5410:	f7ff ff17 	bl	d5242 <_ZNSt14_Function_baseD1Ev>
   d5414:	2110      	movs	r1, #16
   d5416:	4628      	mov	r0, r5
   d5418:	f000 ff1a 	bl	d6250 <_ZdlPvj>
   d541c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d541e:	b135      	cbz	r5, d542e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5420:	4628      	mov	r0, r5
   d5422:	f7ff ff0e 	bl	d5242 <_ZNSt14_Function_baseD1Ev>
   d5426:	2110      	movs	r1, #16
   d5428:	4628      	mov	r0, r5
   d542a:	f000 ff11 	bl	d6250 <_ZdlPvj>
   d542e:	4620      	mov	r0, r4
   d5430:	2114      	movs	r1, #20
   d5432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5436:	f000 bf0b 	b.w	d6250 <_ZdlPvj>
   d543a:	bd38      	pop	{r3, r4, r5, pc}

000d543c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d543c:	b513      	push	{r0, r1, r4, lr}
   d543e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5440:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5444:	2300      	movs	r3, #0
   d5446:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5448:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d544a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d544c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d544e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5450:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5452:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5454:	f7fe fe3e 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5458:	4620      	mov	r0, r4
   d545a:	b002      	add	sp, #8
   d545c:	bd10      	pop	{r4, pc}

000d545e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d545e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5460:	460c      	mov	r4, r1
   d5462:	ad02      	add	r5, sp, #8
   d5464:	f854 3b04 	ldr.w	r3, [r4], #4
   d5468:	f845 3d08 	str.w	r3, [r5, #-8]!
   d546c:	4606      	mov	r6, r0
   d546e:	460f      	mov	r7, r1
   d5470:	a801      	add	r0, sp, #4
   d5472:	4621      	mov	r1, r4
   d5474:	f7ff fe6a 	bl	d514c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5478:	4629      	mov	r1, r5
   d547a:	4630      	mov	r0, r6
   d547c:	f7ff ffde 	bl	d543c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5480:	a801      	add	r0, sp, #4
   d5482:	f7fe fe27 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5486:	4620      	mov	r0, r4
   d5488:	f7fe fe24 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d548c:	4638      	mov	r0, r7
   d548e:	2108      	movs	r1, #8
   d5490:	f000 fede 	bl	d6250 <_ZdlPvj>
        return p;
    }
   d5494:	4630      	mov	r0, r6
   d5496:	b003      	add	sp, #12
   d5498:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d549c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d549c:	b538      	push	{r3, r4, r5, lr}
   d549e:	2300      	movs	r3, #0
   d54a0:	4604      	mov	r4, r0
   d54a2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d54a4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d54a6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d54a8:	f7fe fdf5 	bl	d4096 <_Znwj>
   d54ac:	b128      	cbz	r0, d54ba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d54ae:	2301      	movs	r3, #1
   d54b0:	6043      	str	r3, [r0, #4]
   d54b2:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d54b4:	4b02      	ldr	r3, [pc, #8]	; (d54c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d54b6:	6003      	str	r3, [r0, #0]
   d54b8:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d54ba:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d54bc:	4620      	mov	r0, r4
   d54be:	bd38      	pop	{r3, r4, r5, pc}
   d54c0:	000d6bf4 	.word	0x000d6bf4

000d54c4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d54c4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d54c6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d54c8:	b90a      	cbnz	r2, d54ce <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d54ca:	f000 fed4 	bl	d6276 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d54ce:	68c3      	ldr	r3, [r0, #12]
    }
   d54d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d54d4:	4718      	bx	r3

000d54d6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d54d6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d54d8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d54da:	f100 0110 	add.w	r1, r0, #16
   d54de:	f7ff fff1 	bl	d54c4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d54e2:	bd08      	pop	{r3, pc}

000d54e4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d54e4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d54e6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d54e8:	b90a      	cbnz	r2, d54ee <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d54ea:	f000 fec4 	bl	d6276 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d54ee:	68c3      	ldr	r3, [r0, #12]
    }
   d54f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d54f4:	4718      	bx	r3

000d54f6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d54f6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d54f8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d54fa:	f100 0110 	add.w	r1, r0, #16
   d54fe:	f7ff fff1 	bl	d54e4 <_ZNKSt8functionIFvRKbEEclES1_>
   d5502:	bd08      	pop	{r3, pc}

000d5504 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5504:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5506:	2300      	movs	r3, #0
   d5508:	6083      	str	r3, [r0, #8]
   d550a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d550c:	4604      	mov	r4, r0
   d550e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5510:	b12b      	cbz	r3, d551e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5512:	2202      	movs	r2, #2
   d5514:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5516:	68eb      	ldr	r3, [r5, #12]
   d5518:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d551a:	68ab      	ldr	r3, [r5, #8]
   d551c:	60a3      	str	r3, [r4, #8]
	}
    }
   d551e:	4620      	mov	r0, r4
   d5520:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5524 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5524:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5526:	b089      	sub	sp, #36	; 0x24
   d5528:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d552a:	4668      	mov	r0, sp
   d552c:	f7ff ff4d 	bl	d53ca <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5530:	2300      	movs	r3, #0
   d5532:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5536:	f04f 0202 	mov.w	r2, #2
   d553a:	e8d4 3f4f 	ldrexb	r3, [r4]
   d553e:	2b00      	cmp	r3, #0
   d5540:	d103      	bne.n	d554a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d5542:	e8c4 2f41 	strexb	r1, r2, [r4]
   d5546:	2900      	cmp	r1, #0
   d5548:	d1f7      	bne.n	d553a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d554a:	d002      	beq.n	d5552 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d554c:	f88d 3008 	strb.w	r3, [sp, #8]
   d5550:	e063      	b.n	d561a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d5552:	f114 050c 	adds.w	r5, r4, #12
   d5556:	d003      	beq.n	d5560 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5558:	4669      	mov	r1, sp
   d555a:	4628      	mov	r0, r5
   d555c:	f7ff ff35 	bl	d53ca <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5560:	f3bf 8f5f 	dmb	sy
   d5564:	2301      	movs	r3, #1
   d5566:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5568:	2000      	movs	r0, #0
   d556a:	f104 0308 	add.w	r3, r4, #8
   d556e:	f3bf 8f5f 	dmb	sy
   d5572:	e853 6f00 	ldrex	r6, [r3]
   d5576:	e843 0200 	strex	r2, r0, [r3]
   d557a:	2a00      	cmp	r2, #0
   d557c:	d1f9      	bne.n	d5572 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d557e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5582:	2e00      	cmp	r6, #0
   d5584:	d049      	beq.n	d561a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5586:	f7ff fc29 	bl	d4ddc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d558a:	b120      	cbz	r0, d5596 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d558c:	4629      	mov	r1, r5
   d558e:	4630      	mov	r0, r6
   d5590:	f7ff ff98 	bl	d54c4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5594:	e03a      	b.n	d560c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5596:	4631      	mov	r1, r6
   d5598:	a802      	add	r0, sp, #8
   d559a:	f7ff ffb3 	bl	d5504 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d559e:	68e0      	ldr	r0, [r4, #12]
   d55a0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d55a4:	b108      	cbz	r0, d55aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d55a6:	f001 f9b3 	bl	d6910 <strdup>
   d55aa:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d55ac:	2010      	movs	r0, #16
   d55ae:	f8ad 501c 	strh.w	r5, [sp, #28]
   d55b2:	f7fe fd70 	bl	d4096 <_Znwj>
   d55b6:	4605      	mov	r5, r0
   d55b8:	b1e8      	cbz	r0, d55f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d55ba:	2700      	movs	r7, #0
   d55bc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d55be:	2018      	movs	r0, #24
   d55c0:	f7fe fd69 	bl	d4096 <_Znwj>
   d55c4:	4604      	mov	r4, r0
   d55c6:	b188      	cbz	r0, d55ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d55c8:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d55ca:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d55cc:	a802      	add	r0, sp, #8
   d55ce:	f7ff fe47 	bl	d5260 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55d2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d55d4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d55d6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55d8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d55da:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d55dc:	a906      	add	r1, sp, #24
   d55de:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d55e0:	60e3      	str	r3, [r4, #12]
   d55e2:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d55e6:	9205      	str	r2, [sp, #20]
   d55e8:	f7ff feef 	bl	d53ca <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d55ec:	4b0d      	ldr	r3, [pc, #52]	; (d5624 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d55ee:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d55f0:	4b0d      	ldr	r3, [pc, #52]	; (d5628 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d55f2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d55f4:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d55f6:	a806      	add	r0, sp, #24
   d55f8:	f7ff fef6 	bl	d53e8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d55fc:	a802      	add	r0, sp, #8
   d55fe:	f7ff fe20 	bl	d5242 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5602:	2200      	movs	r2, #0
   d5604:	4629      	mov	r1, r5
   d5606:	4809      	ldr	r0, [pc, #36]	; (d562c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5608:	f7ff fbf0 	bl	d4dec <application_thread_invoke>
   d560c:	4630      	mov	r0, r6
   d560e:	f7ff fe18 	bl	d5242 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5612:	2110      	movs	r1, #16
   d5614:	4630      	mov	r0, r6
   d5616:	f000 fe1b 	bl	d6250 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d561a:	4668      	mov	r0, sp
   d561c:	f7ff fee4 	bl	d53e8 <_ZN8particle5ErrorD1Ev>
    }
   d5620:	b009      	add	sp, #36	; 0x24
   d5622:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5624:	000d54d7 	.word	0x000d54d7
   d5628:	000d574d 	.word	0x000d574d
   d562c:	000d5c59 	.word	0x000d5c59

000d5630 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5634:	b08b      	sub	sp, #44	; 0x2c
   d5636:	4606      	mov	r6, r0
   d5638:	460f      	mov	r7, r1
   d563a:	4690      	mov	r8, r2
   d563c:	4699      	mov	r9, r3
   d563e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5642:	f7ff fc3f 	bl	d4ec4 <spark_cloud_flag_connected>
   d5646:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d5648:	4683      	mov	fp, r0
   d564a:	bb30      	cbnz	r0, d569a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d564c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5650:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5652:	a905      	add	r1, sp, #20
   d5654:	4628      	mov	r0, r5
   d5656:	f8ad 3018 	strh.w	r3, [sp, #24]
   d565a:	f7ff feb6 	bl	d53ca <_ZN8particle5ErrorC1EOS0_>
   d565e:	2014      	movs	r0, #20
   d5660:	f7fe fd19 	bl	d4096 <_Znwj>
   d5664:	4604      	mov	r4, r0
   d5666:	b158      	cbz	r0, d5680 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5668:	2302      	movs	r3, #2
   d566a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d566c:	2301      	movs	r3, #1
   d566e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5670:	f8c0 b004 	str.w	fp, [r0, #4]
   d5674:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5678:	4629      	mov	r1, r5
   d567a:	300c      	adds	r0, #12
   d567c:	f7ff fea5 	bl	d53ca <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d5680:	4630      	mov	r0, r6
   d5682:	4621      	mov	r1, r4
   d5684:	f840 4b04 	str.w	r4, [r0], #4
   d5688:	f7ff ff08 	bl	d549c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d568c:	4628      	mov	r0, r5
   d568e:	f7ff feab 	bl	d53e8 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5692:	a805      	add	r0, sp, #20
   d5694:	f7ff fea8 	bl	d53e8 <_ZN8particle5ErrorD1Ev>
   d5698:	e052      	b.n	d5740 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d569a:	2400      	movs	r4, #0
   d569c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d569e:	2014      	movs	r0, #20
   d56a0:	606c      	str	r4, [r5, #4]
   d56a2:	60ac      	str	r4, [r5, #8]
   d56a4:	9307      	str	r3, [sp, #28]
   d56a6:	f7fe fcf6 	bl	d4096 <_Znwj>
   d56aa:	4601      	mov	r1, r0
   d56ac:	b118      	cbz	r0, d56b6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d56ae:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d56b0:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d56b2:	6044      	str	r4, [r0, #4]
   d56b4:	6084      	str	r4, [r0, #8]
   d56b6:	a804      	add	r0, sp, #16
   d56b8:	9103      	str	r1, [sp, #12]
   d56ba:	f7ff feef 	bl	d549c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d56be:	4b22      	ldr	r3, [pc, #136]	; (d5748 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d56c0:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d56c2:	2008      	movs	r0, #8
   d56c4:	f7fe fce7 	bl	d4096 <_Znwj>
   d56c8:	4604      	mov	r4, r0
   d56ca:	b128      	cbz	r0, d56d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d56cc:	9b03      	ldr	r3, [sp, #12]
   d56ce:	f840 3b04 	str.w	r3, [r0], #4
   d56d2:	a904      	add	r1, sp, #16
   d56d4:	f7ff fd3a 	bl	d514c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d56d8:	9500      	str	r5, [sp, #0]
   d56da:	fa5f f38a 	uxtb.w	r3, sl
   d56de:	464a      	mov	r2, r9
   d56e0:	4641      	mov	r1, r8
   d56e2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d56e4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d56e6:	f7ff fbf5 	bl	d4ed4 <spark_send_event>
   d56ea:	b920      	cbnz	r0, d56f6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d56ec:	9b03      	ldr	r3, [sp, #12]
   d56ee:	785b      	ldrb	r3, [r3, #1]
   d56f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d56f4:	b183      	cbz	r3, d5718 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d56f6:	9b03      	ldr	r3, [sp, #12]
   d56f8:	9305      	str	r3, [sp, #20]
   d56fa:	a904      	add	r1, sp, #16
   d56fc:	a806      	add	r0, sp, #24
   d56fe:	f7ff fd25 	bl	d514c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5702:	a905      	add	r1, sp, #20
   d5704:	4630      	mov	r0, r6
   d5706:	f7ff fe99 	bl	d543c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d570a:	a806      	add	r0, sp, #24
   d570c:	f7fe fce2 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5710:	a804      	add	r0, sp, #16
   d5712:	f7fe fcdf 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5716:	e013      	b.n	d5740 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5718:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d571c:	a905      	add	r1, sp, #20
   d571e:	a803      	add	r0, sp, #12
   d5720:	9205      	str	r2, [sp, #20]
   d5722:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5726:	f7ff fefd 	bl	d5524 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d572a:	a805      	add	r0, sp, #20
   d572c:	f7ff fe5c 	bl	d53e8 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5730:	a805      	add	r0, sp, #20
   d5732:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5734:	f7ff fe93 	bl	d545e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5738:	a806      	add	r0, sp, #24
   d573a:	f7fe fccb 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d573e:	e7da      	b.n	d56f6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d5740:	4630      	mov	r0, r6
   d5742:	b00b      	add	sp, #44	; 0x2c
   d5744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5748:	000d58bd 	.word	0x000d58bd

000d574c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d574c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d574e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5750:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5752:	d006      	beq.n	d5762 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5754:	2a03      	cmp	r2, #3
   d5756:	d017      	beq.n	d5788 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5758:	2a01      	cmp	r2, #1
   d575a:	d122      	bne.n	d57a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d575c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d575e:	6003      	str	r3, [r0, #0]
	      break;
   d5760:	e01f      	b.n	d57a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5762:	2018      	movs	r0, #24
   d5764:	680e      	ldr	r6, [r1, #0]
   d5766:	f7fe fc96 	bl	d4096 <_Znwj>
   d576a:	4605      	mov	r5, r0
   d576c:	b150      	cbz	r0, d5784 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d576e:	4631      	mov	r1, r6
   d5770:	f7ff fec8 	bl	d5504 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5774:	6930      	ldr	r0, [r6, #16]
   d5776:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d577a:	b108      	cbz	r0, d5780 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d577c:	f001 f8c8 	bl	d6910 <strdup>
   d5780:	6128      	str	r0, [r5, #16]
   d5782:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5784:	6025      	str	r5, [r4, #0]
   d5786:	e00c      	b.n	d57a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5788:	6804      	ldr	r4, [r0, #0]
   d578a:	b154      	cbz	r4, d57a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d578c:	f104 0010 	add.w	r0, r4, #16
   d5790:	f7ff fe2a 	bl	d53e8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5794:	4620      	mov	r0, r4
   d5796:	f7ff fd54 	bl	d5242 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d579a:	2118      	movs	r1, #24
   d579c:	4620      	mov	r0, r4
   d579e:	f000 fd57 	bl	d6250 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d57a2:	2000      	movs	r0, #0
   d57a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d57a6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d57a6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d57a8:	2300      	movs	r3, #0
   d57aa:	6083      	str	r3, [r0, #8]
   d57ac:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d57ae:	4604      	mov	r4, r0
   d57b0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d57b2:	b12b      	cbz	r3, d57c0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d57b4:	2202      	movs	r2, #2
   d57b6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d57b8:	68eb      	ldr	r3, [r5, #12]
   d57ba:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d57bc:	68ab      	ldr	r3, [r5, #8]
   d57be:	60a3      	str	r3, [r4, #8]
	}
    }
   d57c0:	4620      	mov	r0, r4
   d57c2:	bd38      	pop	{r3, r4, r5, pc}

000d57c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d57c4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d57c6:	b570      	push	{r4, r5, r6, lr}
   d57c8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d57ca:	d006      	beq.n	d57da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d57cc:	2a03      	cmp	r2, #3
   d57ce:	d011      	beq.n	d57f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d57d0:	2a01      	cmp	r2, #1
   d57d2:	d118      	bne.n	d5806 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d57d4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d57d6:	6003      	str	r3, [r0, #0]
	      break;
   d57d8:	e015      	b.n	d5806 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d57da:	2014      	movs	r0, #20
   d57dc:	680e      	ldr	r6, [r1, #0]
   d57de:	f7fe fc5a 	bl	d4096 <_Znwj>
   d57e2:	4605      	mov	r5, r0
   d57e4:	b120      	cbz	r0, d57f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d57e6:	4631      	mov	r1, r6
   d57e8:	f7ff ffdd 	bl	d57a6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d57ec:	7c33      	ldrb	r3, [r6, #16]
   d57ee:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d57f0:	6025      	str	r5, [r4, #0]
   d57f2:	e008      	b.n	d5806 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d57f4:	6804      	ldr	r4, [r0, #0]
   d57f6:	b134      	cbz	r4, d5806 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d57f8:	4620      	mov	r0, r4
   d57fa:	f7ff fd22 	bl	d5242 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d57fe:	2114      	movs	r1, #20
   d5800:	4620      	mov	r0, r4
   d5802:	f000 fd25 	bl	d6250 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5806:	2000      	movs	r0, #0
   d5808:	bd70      	pop	{r4, r5, r6, pc}
	...

000d580c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d580c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d580e:	2300      	movs	r3, #0
   d5810:	b087      	sub	sp, #28
   d5812:	460c      	mov	r4, r1
   d5814:	f3bf 8f5f 	dmb	sy
   d5818:	e850 6f00 	ldrex	r6, [r0]
   d581c:	e840 3200 	strex	r2, r3, [r0]
   d5820:	2a00      	cmp	r2, #0
   d5822:	d1f9      	bne.n	d5818 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5824:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5828:	2e00      	cmp	r6, #0
   d582a:	d03f      	beq.n	d58ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d582c:	4618      	mov	r0, r3
   d582e:	f7ff fad5 	bl	d4ddc <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d5832:	4607      	mov	r7, r0
   d5834:	b120      	cbz	r0, d5840 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5836:	4621      	mov	r1, r4
   d5838:	4630      	mov	r0, r6
   d583a:	f7ff fe53 	bl	d54e4 <_ZNKSt8functionIFvRKbEEclES1_>
   d583e:	e02e      	b.n	d589e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5840:	4631      	mov	r1, r6
   d5842:	a801      	add	r0, sp, #4
   d5844:	f7ff ffaf 	bl	d57a6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5848:	7823      	ldrb	r3, [r4, #0]
   d584a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d584e:	2010      	movs	r0, #16
   d5850:	f7fe fc21 	bl	d4096 <_Znwj>
   d5854:	4605      	mov	r5, r0
   d5856:	b1d0      	cbz	r0, d588e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5858:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d585a:	2014      	movs	r0, #20
   d585c:	f7fe fc1b 	bl	d4096 <_Znwj>
   d5860:	4604      	mov	r4, r0
   d5862:	b178      	cbz	r0, d5884 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5864:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5866:	4601      	mov	r1, r0
   d5868:	a801      	add	r0, sp, #4
   d586a:	f7ff fcf9 	bl	d5260 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d586e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5870:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5872:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5874:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5876:	9203      	str	r2, [sp, #12]
   d5878:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d587a:	60e3      	str	r3, [r4, #12]
   d587c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5880:	9204      	str	r2, [sp, #16]
   d5882:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5884:	4b0a      	ldr	r3, [pc, #40]	; (d58b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d5886:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5888:	4b0a      	ldr	r3, [pc, #40]	; (d58b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d588a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d588c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d588e:	a801      	add	r0, sp, #4
   d5890:	f7ff fcd7 	bl	d5242 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5894:	2200      	movs	r2, #0
   d5896:	4629      	mov	r1, r5
   d5898:	4807      	ldr	r0, [pc, #28]	; (d58b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d589a:	f7ff faa7 	bl	d4dec <application_thread_invoke>
   d589e:	4630      	mov	r0, r6
   d58a0:	f7ff fccf 	bl	d5242 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d58a4:	2110      	movs	r1, #16
   d58a6:	4630      	mov	r0, r6
   d58a8:	f000 fcd2 	bl	d6250 <_ZdlPvj>
        }
    }
   d58ac:	b007      	add	sp, #28
   d58ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d58b0:	000d54f7 	.word	0x000d54f7
   d58b4:	000d57c5 	.word	0x000d57c5
   d58b8:	000d5c59 	.word	0x000d5c59

000d58bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d58bc:	b530      	push	{r4, r5, lr}
   d58be:	b085      	sub	sp, #20
   d58c0:	4604      	mov	r4, r0
   d58c2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d58c4:	4668      	mov	r0, sp
   d58c6:	4611      	mov	r1, r2
   d58c8:	f7ff fdc9 	bl	d545e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d58cc:	b17c      	cbz	r4, d58ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d58ce:	b224      	sxth	r4, r4
   d58d0:	4628      	mov	r0, r5
   d58d2:	b10d      	cbz	r5, d58d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d58d4:	f001 f81c 	bl	d6910 <strdup>
   d58d8:	9002      	str	r0, [sp, #8]
   d58da:	a902      	add	r1, sp, #8
   d58dc:	4668      	mov	r0, sp
   d58de:	f8ad 400c 	strh.w	r4, [sp, #12]
   d58e2:	f7ff fe1f 	bl	d5524 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d58e6:	a802      	add	r0, sp, #8
   d58e8:	f7ff fd7e 	bl	d53e8 <_ZN8particle5ErrorD1Ev>
   d58ec:	e01d      	b.n	d592a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d58ee:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d58f0:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d58f4:	f04f 0201 	mov.w	r2, #1
   d58f8:	e8d0 3f4f 	ldrexb	r3, [r0]
   d58fc:	42a3      	cmp	r3, r4
   d58fe:	d103      	bne.n	d5908 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5900:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5904:	2900      	cmp	r1, #0
   d5906:	d1f7      	bne.n	d58f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5908:	d002      	beq.n	d5910 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d590a:	f88d 3008 	strb.w	r3, [sp, #8]
   d590e:	e00c      	b.n	d592a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5910:	f110 010c 	adds.w	r1, r0, #12
   d5914:	f04f 0301 	mov.w	r3, #1
   d5918:	bf18      	it	ne
   d591a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d591c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5920:	3004      	adds	r0, #4
   d5922:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5926:	f7ff ff71 	bl	d580c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d592a:	a801      	add	r0, sp, #4
   d592c:	f7fe fbd2 	bl	d40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5930:	b005      	add	sp, #20
   d5932:	bd30      	pop	{r4, r5, pc}

000d5934 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5934:	4770      	bx	lr

000d5936 <_ZN9IPAddressD0Ev>:
   d5936:	b510      	push	{r4, lr}
   d5938:	2118      	movs	r1, #24
   d593a:	4604      	mov	r4, r0
   d593c:	f000 fc88 	bl	d6250 <_ZdlPvj>
   d5940:	4620      	mov	r0, r4
   d5942:	bd10      	pop	{r4, pc}

000d5944 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5944:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5946:	7d03      	ldrb	r3, [r0, #20]
   d5948:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d594a:	b08d      	sub	sp, #52	; 0x34
   d594c:	460e      	mov	r6, r1
   d594e:	f100 0704 	add.w	r7, r0, #4
   d5952:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5956:	d002      	beq.n	d595e <_ZNK9IPAddress7printToER5Print+0x1a>
   d5958:	f100 0508 	add.w	r5, r0, #8
   d595c:	e018      	b.n	d5990 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d595e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5960:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5962:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5966:	232f      	movs	r3, #47	; 0x2f
   d5968:	462a      	mov	r2, r5
   d596a:	200a      	movs	r0, #10
   d596c:	f7ff f956 	bl	d4c1c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5970:	4628      	mov	r0, r5
   d5972:	f000 ffe8 	bl	d6946 <strlen>
   d5976:	6833      	ldr	r3, [r6, #0]
   d5978:	4602      	mov	r2, r0
   d597a:	68db      	ldr	r3, [r3, #12]
   d597c:	4629      	mov	r1, r5
   d597e:	4630      	mov	r0, r6
   d5980:	4798      	blx	r3
   d5982:	e00f      	b.n	d59a4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5984:	b124      	cbz	r4, d5990 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5986:	212e      	movs	r1, #46	; 0x2e
   d5988:	4630      	mov	r0, r6
   d598a:	f7ff fc21 	bl	d51d0 <_ZN5Print5printEc>
   d598e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5990:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5994:	220a      	movs	r2, #10
   d5996:	4630      	mov	r0, r6
   d5998:	f7ff fc1d 	bl	d51d6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d599c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d599e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d59a0:	d1f0      	bne.n	d5984 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d59a2:	4620      	mov	r0, r4
    }
    return n;
}
   d59a4:	b00d      	add	sp, #52	; 0x34
   d59a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d59a8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d59a8:	b510      	push	{r4, lr}
   d59aa:	4b05      	ldr	r3, [pc, #20]	; (d59c0 <_ZN9IPAddressC1Ev+0x18>)
   d59ac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d59ae:	2211      	movs	r2, #17
   d59b0:	f840 3b04 	str.w	r3, [r0], #4
   d59b4:	2100      	movs	r1, #0
   d59b6:	f000 ff7a 	bl	d68ae <memset>
{
    clear();
}
   d59ba:	4620      	mov	r0, r4
   d59bc:	bd10      	pop	{r4, pc}
   d59be:	bf00      	nop
   d59c0:	000d6c10 	.word	0x000d6c10

000d59c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d59c4:	4603      	mov	r3, r0
   d59c6:	4a07      	ldr	r2, [pc, #28]	; (d59e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d59c8:	b510      	push	{r4, lr}
   d59ca:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d59ce:	f101 0210 	add.w	r2, r1, #16
   d59d2:	f851 4b04 	ldr.w	r4, [r1], #4
   d59d6:	f843 4b04 	str.w	r4, [r3], #4
   d59da:	4291      	cmp	r1, r2
   d59dc:	d1f9      	bne.n	d59d2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d59de:	780a      	ldrb	r2, [r1, #0]
   d59e0:	701a      	strb	r2, [r3, #0]
}
   d59e2:	bd10      	pop	{r4, pc}
   d59e4:	000d6c10 	.word	0x000d6c10

000d59e8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d59e8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d59ea:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d59ee:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d59f2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d59f6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d59fa:	2304      	movs	r3, #4
   d59fc:	6041      	str	r1, [r0, #4]
   d59fe:	7503      	strb	r3, [r0, #20]
   d5a00:	bd10      	pop	{r4, pc}

000d5a02 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5a02:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5a04:	780d      	ldrb	r5, [r1, #0]
   d5a06:	788b      	ldrb	r3, [r1, #2]
   d5a08:	784a      	ldrb	r2, [r1, #1]
   d5a0a:	78c9      	ldrb	r1, [r1, #3]
   d5a0c:	9100      	str	r1, [sp, #0]
   d5a0e:	4629      	mov	r1, r5
   d5a10:	f7ff ffea 	bl	d59e8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5a14:	b003      	add	sp, #12
   d5a16:	bd30      	pop	{r4, r5, pc}

000d5a18 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5a18:	7441      	strb	r1, [r0, #17]
   d5a1a:	4770      	bx	lr

000d5a1c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5a1c:	4770      	bx	lr

000d5a1e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5a1e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5a20:	2100      	movs	r1, #0
   d5a22:	7c00      	ldrb	r0, [r0, #16]
   d5a24:	f7ff f9b2 	bl	d4d8c <HAL_USB_USART_Receive_Data>
}
   d5a28:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5a2c:	bf28      	it	cs
   d5a2e:	f04f 30ff 	movcs.w	r0, #4294967295
   d5a32:	bd08      	pop	{r3, pc}

000d5a34 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5a34:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5a36:	2101      	movs	r1, #1
   d5a38:	7c00      	ldrb	r0, [r0, #16]
   d5a3a:	f7ff f9a7 	bl	d4d8c <HAL_USB_USART_Receive_Data>
}
   d5a3e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5a42:	bf28      	it	cs
   d5a44:	f04f 30ff 	movcs.w	r0, #4294967295
   d5a48:	bd08      	pop	{r3, pc}

000d5a4a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5a4a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5a4c:	7c00      	ldrb	r0, [r0, #16]
   d5a4e:	f7ff f995 	bl	d4d7c <HAL_USB_USART_Available_Data_For_Write>
}
   d5a52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a56:	bd08      	pop	{r3, pc}

000d5a58 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5a58:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5a5a:	7c00      	ldrb	r0, [r0, #16]
   d5a5c:	f7ff f986 	bl	d4d6c <HAL_USB_USART_Available_Data>
}
   d5a60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5a64:	bd08      	pop	{r3, pc}

000d5a66 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5a66:	7c00      	ldrb	r0, [r0, #16]
   d5a68:	f7ff b9a0 	b.w	d4dac <HAL_USB_USART_Flush_Data>

000d5a6c <_ZN9USBSerialD0Ev>:
   d5a6c:	b510      	push	{r4, lr}
   d5a6e:	2114      	movs	r1, #20
   d5a70:	4604      	mov	r4, r0
   d5a72:	f000 fbed 	bl	d6250 <_ZdlPvj>
   d5a76:	4620      	mov	r0, r4
   d5a78:	bd10      	pop	{r4, pc}

000d5a7a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5a7a:	b538      	push	{r3, r4, r5, lr}
   d5a7c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5a7e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5a80:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5a82:	f7ff f97b 	bl	d4d7c <HAL_USB_USART_Available_Data_For_Write>
   d5a86:	2800      	cmp	r0, #0
   d5a88:	dc01      	bgt.n	d5a8e <_ZN9USBSerial5writeEh+0x14>
   d5a8a:	7c60      	ldrb	r0, [r4, #17]
   d5a8c:	b128      	cbz	r0, d5a9a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5a8e:	4629      	mov	r1, r5
   d5a90:	7c20      	ldrb	r0, [r4, #16]
   d5a92:	f7ff f983 	bl	d4d9c <HAL_USB_USART_Send_Data>
   d5a96:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5a9a:	bd38      	pop	{r3, r4, r5, pc}

000d5a9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5a9c:	b510      	push	{r4, lr}
   d5a9e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5aa0:	2300      	movs	r3, #0
   d5aa2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5aa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5aa8:	60a3      	str	r3, [r4, #8]
   d5aaa:	4b05      	ldr	r3, [pc, #20]	; (d5ac0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5aac:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5aae:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5ab0:	4608      	mov	r0, r1
{
  _serial = serial;
   d5ab2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5ab4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5ab6:	4611      	mov	r1, r2
   d5ab8:	f7ff f950 	bl	d4d5c <HAL_USB_USART_Init>
}
   d5abc:	4620      	mov	r0, r4
   d5abe:	bd10      	pop	{r4, pc}
   d5ac0:	000d6c24 	.word	0x000d6c24

000d5ac4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5ac4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5ac6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5ac8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5aca:	2100      	movs	r1, #0
   d5acc:	f000 feef 	bl	d68ae <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5ad0:	4620      	mov	r0, r4
   d5ad2:	bd10      	pop	{r4, pc}

000d5ad4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5ad4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5ad6:	4d0e      	ldr	r5, [pc, #56]	; (d5b10 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5ad8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5ada:	a801      	add	r0, sp, #4
   d5adc:	f7ff fff2 	bl	d5ac4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5ae0:	6829      	ldr	r1, [r5, #0]
   d5ae2:	f011 0401 	ands.w	r4, r1, #1
   d5ae6:	d110      	bne.n	d5b0a <_Z16_fetch_usbserialv+0x36>
   d5ae8:	4628      	mov	r0, r5
   d5aea:	f7fe fada 	bl	d40a2 <__cxa_guard_acquire>
   d5aee:	b160      	cbz	r0, d5b0a <_Z16_fetch_usbserialv+0x36>
   d5af0:	aa01      	add	r2, sp, #4
   d5af2:	4621      	mov	r1, r4
   d5af4:	4807      	ldr	r0, [pc, #28]	; (d5b14 <_Z16_fetch_usbserialv+0x40>)
   d5af6:	f7ff ffd1 	bl	d5a9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5afa:	4628      	mov	r0, r5
   d5afc:	f7fe fad6 	bl	d40ac <__cxa_guard_release>
   d5b00:	4a05      	ldr	r2, [pc, #20]	; (d5b18 <_Z16_fetch_usbserialv+0x44>)
   d5b02:	4906      	ldr	r1, [pc, #24]	; (d5b1c <_Z16_fetch_usbserialv+0x48>)
   d5b04:	4803      	ldr	r0, [pc, #12]	; (d5b14 <_Z16_fetch_usbserialv+0x40>)
   d5b06:	f000 fb95 	bl	d6234 <__aeabi_atexit>
	return _usbserial;
}
   d5b0a:	4802      	ldr	r0, [pc, #8]	; (d5b14 <_Z16_fetch_usbserialv+0x40>)
   d5b0c:	b007      	add	sp, #28
   d5b0e:	bd30      	pop	{r4, r5, pc}
   d5b10:	2003e514 	.word	0x2003e514
   d5b14:	2003e518 	.word	0x2003e518
   d5b18:	2003b514 	.word	0x2003b514
   d5b1c:	000d5a1d 	.word	0x000d5a1d

000d5b20 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5b20:	4770      	bx	lr

000d5b22 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5b22:	7441      	strb	r1, [r0, #17]
   d5b24:	4770      	bx	lr

000d5b26 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5b26:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5b28:	7c00      	ldrb	r0, [r0, #16]
   d5b2a:	f7ff f8b7 	bl	d4c9c <HAL_USART_Available_Data_For_Write>
}
   d5b2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b32:	bd08      	pop	{r3, pc}

000d5b34 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5b34:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5b36:	7c00      	ldrb	r0, [r0, #16]
   d5b38:	f7ff f888 	bl	d4c4c <HAL_USART_Available_Data>
}
   d5b3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5b40:	bd08      	pop	{r3, pc}

000d5b42 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5b42:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5b44:	7c00      	ldrb	r0, [r0, #16]
   d5b46:	f7ff f891 	bl	d4c6c <HAL_USART_Peek_Data>
}
   d5b4a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5b4e:	bf28      	it	cs
   d5b50:	f04f 30ff 	movcs.w	r0, #4294967295
   d5b54:	bd08      	pop	{r3, pc}

000d5b56 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5b56:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5b58:	7c00      	ldrb	r0, [r0, #16]
   d5b5a:	f7ff f87f 	bl	d4c5c <HAL_USART_Read_Data>
}
   d5b5e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5b62:	bf28      	it	cs
   d5b64:	f04f 30ff 	movcs.w	r0, #4294967295
   d5b68:	bd08      	pop	{r3, pc}

000d5b6a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5b6a:	7c00      	ldrb	r0, [r0, #16]
   d5b6c:	f7ff b886 	b.w	d4c7c <HAL_USART_Flush_Data>

000d5b70 <_ZN11USARTSerialD0Ev>:
   d5b70:	b510      	push	{r4, lr}
   d5b72:	2114      	movs	r1, #20
   d5b74:	4604      	mov	r4, r0
   d5b76:	f000 fb6b 	bl	d6250 <_ZdlPvj>
   d5b7a:	4620      	mov	r0, r4
   d5b7c:	bd10      	pop	{r4, pc}

000d5b7e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5b7e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5b80:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5b82:	4604      	mov	r4, r0
   d5b84:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5b86:	b925      	cbnz	r5, d5b92 <_ZN11USARTSerial5writeEh+0x14>
   d5b88:	7c00      	ldrb	r0, [r0, #16]
   d5b8a:	f7ff f887 	bl	d4c9c <HAL_USART_Available_Data_For_Write>
   d5b8e:	2800      	cmp	r0, #0
   d5b90:	dd05      	ble.n	d5b9e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5b92:	4631      	mov	r1, r6
   d5b94:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5b96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5b9a:	f7ff b84f 	b.w	d4c3c <HAL_USART_Write_Data>
  }
  return 0;
}
   d5b9e:	4628      	mov	r0, r5
   d5ba0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5ba4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5ba4:	b510      	push	{r4, lr}
   d5ba6:	4604      	mov	r4, r0
   d5ba8:	4608      	mov	r0, r1
   d5baa:	4611      	mov	r1, r2
   d5bac:	2200      	movs	r2, #0
   d5bae:	6062      	str	r2, [r4, #4]
   d5bb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5bb4:	60a2      	str	r2, [r4, #8]
   d5bb6:	4a05      	ldr	r2, [pc, #20]	; (d5bcc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5bb8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5bba:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5bbc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5bbe:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5bc0:	461a      	mov	r2, r3
   d5bc2:	f7ff f833 	bl	d4c2c <HAL_USART_Init>
}
   d5bc6:	4620      	mov	r0, r4
   d5bc8:	bd10      	pop	{r4, pc}
   d5bca:	bf00      	nop
   d5bcc:	000d6c54 	.word	0x000d6c54

000d5bd0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5bd0:	7c00      	ldrb	r0, [r0, #16]
   d5bd2:	f7ff b85b 	b.w	d4c8c <HAL_USART_Is_Enabled>
	...

000d5bd8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d5bda:	4c19      	ldr	r4, [pc, #100]	; (d5c40 <_Z22__fetch_global_Serial1v+0x68>)
   d5bdc:	6825      	ldr	r5, [r4, #0]
   d5bde:	b94d      	cbnz	r5, d5bf4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d5be0:	2084      	movs	r0, #132	; 0x84
   d5be2:	f7fe fa58 	bl	d4096 <_Znwj>
   d5be6:	4606      	mov	r6, r0
   d5be8:	b118      	cbz	r0, d5bf2 <_Z22__fetch_global_Serial1v+0x1a>
   d5bea:	2284      	movs	r2, #132	; 0x84
   d5bec:	4629      	mov	r1, r5
   d5bee:	f000 fe5e 	bl	d68ae <memset>
   d5bf2:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d5bf4:	4d13      	ldr	r5, [pc, #76]	; (d5c44 <_Z22__fetch_global_Serial1v+0x6c>)
   d5bf6:	682e      	ldr	r6, [r5, #0]
   d5bf8:	b94e      	cbnz	r6, d5c0e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d5bfa:	2084      	movs	r0, #132	; 0x84
   d5bfc:	f7fe fa4b 	bl	d4096 <_Znwj>
   d5c00:	4607      	mov	r7, r0
   d5c02:	b118      	cbz	r0, d5c0c <_Z22__fetch_global_Serial1v+0x34>
   d5c04:	2284      	movs	r2, #132	; 0x84
   d5c06:	4631      	mov	r1, r6
   d5c08:	f000 fe51 	bl	d68ae <memset>
   d5c0c:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d5c0e:	4f0e      	ldr	r7, [pc, #56]	; (d5c48 <_Z22__fetch_global_Serial1v+0x70>)
   d5c10:	6839      	ldr	r1, [r7, #0]
   d5c12:	f011 0601 	ands.w	r6, r1, #1
   d5c16:	d111      	bne.n	d5c3c <_Z22__fetch_global_Serial1v+0x64>
   d5c18:	4638      	mov	r0, r7
   d5c1a:	f7fe fa42 	bl	d40a2 <__cxa_guard_acquire>
   d5c1e:	b168      	cbz	r0, d5c3c <_Z22__fetch_global_Serial1v+0x64>
   d5c20:	6822      	ldr	r2, [r4, #0]
   d5c22:	682b      	ldr	r3, [r5, #0]
   d5c24:	4809      	ldr	r0, [pc, #36]	; (d5c4c <_Z22__fetch_global_Serial1v+0x74>)
   d5c26:	4631      	mov	r1, r6
   d5c28:	f7ff ffbc 	bl	d5ba4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5c2c:	4638      	mov	r0, r7
   d5c2e:	f7fe fa3d 	bl	d40ac <__cxa_guard_release>
   d5c32:	4a07      	ldr	r2, [pc, #28]	; (d5c50 <_Z22__fetch_global_Serial1v+0x78>)
   d5c34:	4907      	ldr	r1, [pc, #28]	; (d5c54 <_Z22__fetch_global_Serial1v+0x7c>)
   d5c36:	4805      	ldr	r0, [pc, #20]	; (d5c4c <_Z22__fetch_global_Serial1v+0x74>)
   d5c38:	f000 fafc 	bl	d6234 <__aeabi_atexit>
#endif
	return serial1;
}
   d5c3c:	4803      	ldr	r0, [pc, #12]	; (d5c4c <_Z22__fetch_global_Serial1v+0x74>)
   d5c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5c40:	2003e548 	.word	0x2003e548
   d5c44:	2003e540 	.word	0x2003e540
   d5c48:	2003e544 	.word	0x2003e544
   d5c4c:	2003e52c 	.word	0x2003e52c
   d5c50:	2003b514 	.word	0x2003b514
   d5c54:	000d5b21 	.word	0x000d5b21

000d5c58 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5c58:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5c5a:	6883      	ldr	r3, [r0, #8]
   d5c5c:	4604      	mov	r4, r0
   d5c5e:	b90b      	cbnz	r3, d5c64 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5c60:	f000 fb09 	bl	d6276 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5c64:	68c3      	ldr	r3, [r0, #12]
   d5c66:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5c68:	68a3      	ldr	r3, [r4, #8]
   d5c6a:	b11b      	cbz	r3, d5c74 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5c6c:	2203      	movs	r2, #3
   d5c6e:	4621      	mov	r1, r4
   d5c70:	4620      	mov	r0, r4
   d5c72:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5c74:	4620      	mov	r0, r4
   d5c76:	2110      	movs	r1, #16
}
   d5c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5c7c:	f000 bae8 	b.w	d6250 <_ZdlPvj>

000d5c80 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5c80:	4770      	bx	lr

000d5c82 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c84:	4606      	mov	r6, r0
   d5c86:	4615      	mov	r5, r2
   d5c88:	460c      	mov	r4, r1
   d5c8a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5c8c:	42bc      	cmp	r4, r7
   d5c8e:	d006      	beq.n	d5c9e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5c90:	6833      	ldr	r3, [r6, #0]
   d5c92:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5c96:	689b      	ldr	r3, [r3, #8]
   d5c98:	4630      	mov	r0, r6
   d5c9a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5c9c:	e7f6      	b.n	d5c8c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5c9e:	4628      	mov	r0, r5
   d5ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ca2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5ca2:	2200      	movs	r2, #0
   d5ca4:	7c00      	ldrb	r0, [r0, #16]
   d5ca6:	f7ff b819 	b.w	d4cdc <HAL_I2C_Write_Data>

000d5caa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5caa:	2100      	movs	r1, #0
   d5cac:	7c00      	ldrb	r0, [r0, #16]
   d5cae:	f7ff b81d 	b.w	d4cec <HAL_I2C_Available_Data>

000d5cb2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5cb2:	2100      	movs	r1, #0
   d5cb4:	7c00      	ldrb	r0, [r0, #16]
   d5cb6:	f7ff b821 	b.w	d4cfc <HAL_I2C_Read_Data>

000d5cba <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5cba:	2100      	movs	r1, #0
   d5cbc:	7c00      	ldrb	r0, [r0, #16]
   d5cbe:	f7ff b825 	b.w	d4d0c <HAL_I2C_Peek_Data>

000d5cc2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5cc2:	2100      	movs	r1, #0
   d5cc4:	7c00      	ldrb	r0, [r0, #16]
   d5cc6:	f7ff b829 	b.w	d4d1c <HAL_I2C_Flush_Data>

000d5cca <_ZN7TwoWireD0Ev>:
   d5cca:	b510      	push	{r4, lr}
   d5ccc:	2114      	movs	r1, #20
   d5cce:	4604      	mov	r4, r0
   d5cd0:	f000 fabe 	bl	d6250 <_ZdlPvj>
   d5cd4:	4620      	mov	r0, r4
   d5cd6:	bd10      	pop	{r4, pc}

000d5cd8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5cd8:	b510      	push	{r4, lr}
   d5cda:	4604      	mov	r4, r0
   d5cdc:	2300      	movs	r3, #0
   d5cde:	6063      	str	r3, [r4, #4]
   d5ce0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5ce4:	60a3      	str	r3, [r4, #8]
   d5ce6:	4b04      	ldr	r3, [pc, #16]	; (d5cf8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5ce8:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5cea:	4608      	mov	r0, r1
   d5cec:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5cee:	4611      	mov	r1, r2
   d5cf0:	f7ff f824 	bl	d4d3c <HAL_I2C_Init>
}
   d5cf4:	4620      	mov	r0, r4
   d5cf6:	bd10      	pop	{r4, pc}
   d5cf8:	000d6c84 	.word	0x000d6c84

000d5cfc <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5cfc:	2300      	movs	r3, #0
   d5cfe:	461a      	mov	r2, r3
   d5d00:	4619      	mov	r1, r3
   d5d02:	7c00      	ldrb	r0, [r0, #16]
   d5d04:	f7fe bfd2 	b.w	d4cac <HAL_I2C_Begin>

000d5d08 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5d08:	b570      	push	{r4, r5, r6, lr}
   d5d0a:	460c      	mov	r4, r1
   d5d0c:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d5d0e:	2514      	movs	r5, #20
   d5d10:	4606      	mov	r6, r0
   d5d12:	462a      	mov	r2, r5
   d5d14:	2100      	movs	r1, #0
   d5d16:	a801      	add	r0, sp, #4
   d5d18:	f000 fdc9 	bl	d68ae <memset>
   d5d1c:	7823      	ldrb	r3, [r4, #0]
   d5d1e:	f88d 3008 	strb.w	r3, [sp, #8]
   d5d22:	6863      	ldr	r3, [r4, #4]
   d5d24:	9303      	str	r3, [sp, #12]
   d5d26:	68e3      	ldr	r3, [r4, #12]
   d5d28:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d5d2a:	2200      	movs	r2, #0
   d5d2c:	7a23      	ldrb	r3, [r4, #8]
   d5d2e:	7c30      	ldrb	r0, [r6, #16]
   d5d30:	f8ad 5004 	strh.w	r5, [sp, #4]
   d5d34:	a901      	add	r1, sp, #4
   d5d36:	9305      	str	r3, [sp, #20]
   d5d38:	f7ff f808 	bl	d4d4c <HAL_I2C_Request_Data_Ex>
}
   d5d3c:	b006      	add	sp, #24
   d5d3e:	bd70      	pop	{r4, r5, r6, pc}

000d5d40 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d5d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5d42:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5d44:	f88d 1000 	strb.w	r1, [sp]
   d5d48:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5d4c:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5d4e:	bf18      	it	ne
   d5d50:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5d52:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d5d54:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5d56:	f88d 3008 	strb.w	r3, [sp, #8]
   d5d5a:	f7ff ffd5 	bl	d5d08 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5d5e:	b005      	add	sp, #20
   d5d60:	f85d fb04 	ldr.w	pc, [sp], #4

000d5d64 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d5d64:	2301      	movs	r3, #1
   d5d66:	f7ff bfeb 	b.w	d5d40 <_ZN7TwoWire11requestFromEhjh>

000d5d6a <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d5d6a:	2200      	movs	r2, #0
   d5d6c:	7c00      	ldrb	r0, [r0, #16]
   d5d6e:	f7fe bfa5 	b.w	d4cbc <HAL_I2C_Begin_Transmission>

000d5d72 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5d72:	b2c9      	uxtb	r1, r1
   d5d74:	f7ff bff9 	b.w	d5d6a <_ZN7TwoWire17beginTransmissionEh>

000d5d78 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5d78:	2200      	movs	r2, #0
   d5d7a:	7c00      	ldrb	r0, [r0, #16]
   d5d7c:	f7fe bfa6 	b.w	d4ccc <HAL_I2C_End_Transmission>

000d5d80 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5d80:	2101      	movs	r1, #1
   d5d82:	f7ff bff9 	b.w	d5d78 <_ZN7TwoWire15endTransmissionEh>

000d5d86 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5d86:	2100      	movs	r1, #0
   d5d88:	7c00      	ldrb	r0, [r0, #16]
   d5d8a:	f7fe bfcf 	b.w	d4d2c <HAL_I2C_Is_Enabled>

000d5d8e <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5d8e:	2200      	movs	r2, #0
   d5d90:	4611      	mov	r1, r2
   d5d92:	6840      	ldr	r0, [r0, #4]
   d5d94:	f7ff b87e 	b.w	d4e94 <network_listening>

000d5d98 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5d98:	2200      	movs	r2, #0
   d5d9a:	4611      	mov	r1, r2
   d5d9c:	6840      	ldr	r0, [r0, #4]
   d5d9e:	f7ff b889 	b.w	d4eb4 <network_get_listen_timeout>

000d5da2 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5da2:	2200      	movs	r2, #0
   d5da4:	6840      	ldr	r0, [r0, #4]
   d5da6:	f7ff b87d 	b.w	d4ea4 <network_set_listen_timeout>

000d5daa <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5daa:	2200      	movs	r2, #0
   d5dac:	f081 0101 	eor.w	r1, r1, #1
   d5db0:	6840      	ldr	r0, [r0, #4]
   d5db2:	f7ff b867 	b.w	d4e84 <network_listen>

000d5db6 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5db6:	2300      	movs	r3, #0
   d5db8:	461a      	mov	r2, r3
   d5dba:	2101      	movs	r1, #1
   d5dbc:	6840      	ldr	r0, [r0, #4]
   d5dbe:	f7ff b859 	b.w	d4e74 <network_off>

000d5dc2 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5dc2:	2300      	movs	r3, #0
   d5dc4:	461a      	mov	r2, r3
   d5dc6:	4619      	mov	r1, r3
   d5dc8:	6840      	ldr	r0, [r0, #4]
   d5dca:	f7ff b84b 	b.w	d4e64 <network_on>

000d5dce <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5dce:	2200      	movs	r2, #0
   d5dd0:	4611      	mov	r1, r2
   d5dd2:	6840      	ldr	r0, [r0, #4]
   d5dd4:	f7ff b83e 	b.w	d4e54 <network_ready>

000d5dd8 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5dd8:	2200      	movs	r2, #0
   d5dda:	4611      	mov	r1, r2
   d5ddc:	6840      	ldr	r0, [r0, #4]
   d5dde:	f7ff b829 	b.w	d4e34 <network_connecting>

000d5de2 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5de2:	2200      	movs	r2, #0
   d5de4:	2102      	movs	r1, #2
   d5de6:	6840      	ldr	r0, [r0, #4]
   d5de8:	f7ff b82c 	b.w	d4e44 <network_disconnect>

000d5dec <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5dec:	2300      	movs	r3, #0
   d5dee:	461a      	mov	r2, r3
   d5df0:	6840      	ldr	r0, [r0, #4]
   d5df2:	f7ff b817 	b.w	d4e24 <network_connect>

000d5df6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5df6:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5df8:	4605      	mov	r5, r0
   d5dfa:	b188      	cbz	r0, d5e20 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5dfc:	6804      	ldr	r4, [r0, #0]
   d5dfe:	b14c      	cbz	r4, d5e14 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5e00:	68a3      	ldr	r3, [r4, #8]
   d5e02:	b11b      	cbz	r3, d5e0c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5e04:	2203      	movs	r2, #3
   d5e06:	4621      	mov	r1, r4
   d5e08:	4620      	mov	r0, r4
   d5e0a:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5e0c:	2110      	movs	r1, #16
   d5e0e:	4620      	mov	r0, r4
   d5e10:	f000 fa1e 	bl	d6250 <_ZdlPvj>
   d5e14:	4628      	mov	r0, r5
   d5e16:	2114      	movs	r1, #20
      }
   d5e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5e1c:	f000 ba18 	b.w	d6250 <_ZdlPvj>
   d5e20:	bd38      	pop	{r3, r4, r5, pc}

000d5e22 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5e22:	b110      	cbz	r0, d5e2a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5e24:	6803      	ldr	r3, [r0, #0]
   d5e26:	685b      	ldr	r3, [r3, #4]
   d5e28:	4718      	bx	r3
   d5e2a:	4770      	bx	lr

000d5e2c <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5e2c:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5e2e:	6803      	ldr	r3, [r0, #0]
   d5e30:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5e32:	b1bb      	cbz	r3, d5e64 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5e34:	6858      	ldr	r0, [r3, #4]
   d5e36:	f7fe fec9 	bl	d4bcc <os_thread_is_current>
   d5e3a:	b978      	cbnz	r0, d5e5c <_ZN6ThreadD1Ev+0x30>
   d5e3c:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5e3e:	7c5a      	ldrb	r2, [r3, #17]
   d5e40:	b912      	cbnz	r2, d5e48 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5e42:	6858      	ldr	r0, [r3, #4]
   d5e44:	f7fe feca 	bl	d4bdc <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5e48:	6823      	ldr	r3, [r4, #0]
   d5e4a:	6858      	ldr	r0, [r3, #4]
   d5e4c:	f7fe fece 	bl	d4bec <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5e50:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5e52:	2300      	movs	r3, #0
   d5e54:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5e56:	b128      	cbz	r0, d5e64 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5e58:	f7ff ffcd 	bl	d5df6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e5c:	6820      	ldr	r0, [r4, #0]
   d5e5e:	b108      	cbz	r0, d5e64 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5e60:	f7ff ffc9 	bl	d5df6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5e64:	4620      	mov	r0, r4
   d5e66:	bd10      	pop	{r4, pc}

000d5e68 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5e68:	b538      	push	{r3, r4, r5, lr}
   d5e6a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e6c:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5e70:	b108      	cbz	r0, d5e76 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5e72:	f7fe f914 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5e76:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5e7a:	b108      	cbz	r0, d5e80 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5e7c:	f7fe fec6 	bl	d4c0c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e80:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5e84:	b135      	cbz	r5, d5e94 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5e86:	4628      	mov	r0, r5
   d5e88:	f7ff ffd0 	bl	d5e2c <_ZN6ThreadD1Ev>
   d5e8c:	2104      	movs	r1, #4
   d5e8e:	4628      	mov	r0, r5
   d5e90:	f000 f9de 	bl	d6250 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5e94:	6820      	ldr	r0, [r4, #0]
   d5e96:	b108      	cbz	r0, d5e9c <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5e98:	f7ff ffc3 	bl	d5e22 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5e9c:	4620      	mov	r0, r4
   d5e9e:	bd38      	pop	{r3, r4, r5, pc}

000d5ea0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5ea0:	b510      	push	{r4, lr}
   d5ea2:	4b04      	ldr	r3, [pc, #16]	; (d5eb4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5ea4:	4604      	mov	r4, r0
   d5ea6:	f840 3b08 	str.w	r3, [r0], #8
   d5eaa:	f7ff ffdd 	bl	d5e68 <_ZN5spark11MeshPublishD1Ev>
   d5eae:	4620      	mov	r0, r4
   d5eb0:	bd10      	pop	{r4, pc}
   d5eb2:	bf00      	nop
   d5eb4:	000d6cac 	.word	0x000d6cac

000d5eb8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5eb8:	b538      	push	{r3, r4, r5, lr}
   d5eba:	4c0e      	ldr	r4, [pc, #56]	; (d5ef4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5ebc:	4b0e      	ldr	r3, [pc, #56]	; (d5ef8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5ebe:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5ec0:	2500      	movs	r5, #0
   d5ec2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5ec4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5ec8:	6063      	str	r3, [r4, #4]
   d5eca:	60a5      	str	r5, [r4, #8]
   d5ecc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5ed0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5ed4:	f7fe fe92 	bl	d4bfc <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5ed8:	4b08      	ldr	r3, [pc, #32]	; (d5efc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5eda:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5ede:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5ee2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5ee4:	4620      	mov	r0, r4
   d5ee6:	4a06      	ldr	r2, [pc, #24]	; (d5f00 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5ee8:	4906      	ldr	r1, [pc, #24]	; (d5f04 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5eee:	f000 b9a1 	b.w	d6234 <__aeabi_atexit>
   d5ef2:	bf00      	nop
   d5ef4:	2003e54c 	.word	0x2003e54c
   d5ef8:	000d6d14 	.word	0x000d6d14
   d5efc:	000d6cac 	.word	0x000d6cac
   d5f00:	2003b514 	.word	0x2003b514
   d5f04:	000d5ea1 	.word	0x000d5ea1

000d5f08 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5f08:	2200      	movs	r2, #0
   d5f0a:	4611      	mov	r1, r2
   d5f0c:	6840      	ldr	r0, [r0, #4]
   d5f0e:	f7fe bfa1 	b.w	d4e54 <network_ready>

000d5f12 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5f12:	2200      	movs	r2, #0
   d5f14:	4611      	mov	r1, r2
   d5f16:	6840      	ldr	r0, [r0, #4]
   d5f18:	f7fe bfbc 	b.w	d4e94 <network_listening>

000d5f1c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5f1c:	2200      	movs	r2, #0
   d5f1e:	4611      	mov	r1, r2
   d5f20:	6840      	ldr	r0, [r0, #4]
   d5f22:	f7fe bfc7 	b.w	d4eb4 <network_get_listen_timeout>

000d5f26 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5f26:	2200      	movs	r2, #0
   d5f28:	6840      	ldr	r0, [r0, #4]
   d5f2a:	f7fe bfbb 	b.w	d4ea4 <network_set_listen_timeout>

000d5f2e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5f2e:	2200      	movs	r2, #0
   d5f30:	f081 0101 	eor.w	r1, r1, #1
   d5f34:	6840      	ldr	r0, [r0, #4]
   d5f36:	f7fe bfa5 	b.w	d4e84 <network_listen>

000d5f3a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d5f3a:	2300      	movs	r3, #0
   d5f3c:	461a      	mov	r2, r3
   d5f3e:	4619      	mov	r1, r3
   d5f40:	6840      	ldr	r0, [r0, #4]
   d5f42:	f7fe bf97 	b.w	d4e74 <network_off>

000d5f46 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d5f46:	2300      	movs	r3, #0
   d5f48:	461a      	mov	r2, r3
   d5f4a:	4619      	mov	r1, r3
   d5f4c:	6840      	ldr	r0, [r0, #4]
   d5f4e:	f7fe bf89 	b.w	d4e64 <network_on>

000d5f52 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5f52:	2200      	movs	r2, #0
   d5f54:	4611      	mov	r1, r2
   d5f56:	6840      	ldr	r0, [r0, #4]
   d5f58:	f7fe bf6c 	b.w	d4e34 <network_connecting>

000d5f5c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5f5c:	2200      	movs	r2, #0
   d5f5e:	2102      	movs	r1, #2
   d5f60:	6840      	ldr	r0, [r0, #4]
   d5f62:	f7fe bf6f 	b.w	d4e44 <network_disconnect>

000d5f66 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5f66:	2300      	movs	r3, #0
   d5f68:	461a      	mov	r2, r3
   d5f6a:	6840      	ldr	r0, [r0, #4]
   d5f6c:	f7fe bf5a 	b.w	d4e24 <network_connect>

000d5f70 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5f70:	4b02      	ldr	r3, [pc, #8]	; (d5f7c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5f72:	2204      	movs	r2, #4
   d5f74:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5f76:	4a02      	ldr	r2, [pc, #8]	; (d5f80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5f78:	601a      	str	r2, [r3, #0]
   d5f7a:	4770      	bx	lr
   d5f7c:	2003e720 	.word	0x2003e720
   d5f80:	000d6ce0 	.word	0x000d6ce0

000d5f84 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5f84:	2300      	movs	r3, #0
   d5f86:	461a      	mov	r2, r3
   d5f88:	6840      	ldr	r0, [r0, #4]
   d5f8a:	f7fe bf4b 	b.w	d4e24 <network_connect>

000d5f8e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5f8e:	2200      	movs	r2, #0
   d5f90:	2102      	movs	r1, #2
   d5f92:	6840      	ldr	r0, [r0, #4]
   d5f94:	f7fe bf56 	b.w	d4e44 <network_disconnect>

000d5f98 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5f98:	2200      	movs	r2, #0
   d5f9a:	4611      	mov	r1, r2
   d5f9c:	6840      	ldr	r0, [r0, #4]
   d5f9e:	f7fe bf49 	b.w	d4e34 <network_connecting>

000d5fa2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5fa2:	2200      	movs	r2, #0
   d5fa4:	4611      	mov	r1, r2
   d5fa6:	6840      	ldr	r0, [r0, #4]
   d5fa8:	f7fe bf54 	b.w	d4e54 <network_ready>

000d5fac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5fac:	2300      	movs	r3, #0
   d5fae:	461a      	mov	r2, r3
   d5fb0:	4619      	mov	r1, r3
   d5fb2:	6840      	ldr	r0, [r0, #4]
   d5fb4:	f7fe bf56 	b.w	d4e64 <network_on>

000d5fb8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5fb8:	2300      	movs	r3, #0
   d5fba:	461a      	mov	r2, r3
   d5fbc:	4619      	mov	r1, r3
   d5fbe:	6840      	ldr	r0, [r0, #4]
   d5fc0:	f7fe bf58 	b.w	d4e74 <network_off>

000d5fc4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5fc4:	2200      	movs	r2, #0
   d5fc6:	f081 0101 	eor.w	r1, r1, #1
   d5fca:	6840      	ldr	r0, [r0, #4]
   d5fcc:	f7fe bf5a 	b.w	d4e84 <network_listen>

000d5fd0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5fd0:	2200      	movs	r2, #0
   d5fd2:	6840      	ldr	r0, [r0, #4]
   d5fd4:	f7fe bf66 	b.w	d4ea4 <network_set_listen_timeout>

000d5fd8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5fd8:	2200      	movs	r2, #0
   d5fda:	4611      	mov	r1, r2
   d5fdc:	6840      	ldr	r0, [r0, #4]
   d5fde:	f7fe bf69 	b.w	d4eb4 <network_get_listen_timeout>

000d5fe2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5fe2:	2200      	movs	r2, #0
   d5fe4:	4611      	mov	r1, r2
   d5fe6:	6840      	ldr	r0, [r0, #4]
   d5fe8:	f7fe bf54 	b.w	d4e94 <network_listening>

000d5fec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5ff0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5ff2:	b095      	sub	sp, #84	; 0x54
   d5ff4:	4616      	mov	r6, r2
   d5ff6:	460d      	mov	r5, r1
   d5ff8:	4607      	mov	r7, r0
    IPAddress addr;
   d5ffa:	f7ff fcd5 	bl	d59a8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5ffe:	4621      	mov	r1, r4
   d6000:	2220      	movs	r2, #32
   d6002:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6004:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6006:	f000 fc52 	bl	d68ae <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d600a:	2340      	movs	r3, #64	; 0x40
   d600c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d600e:	4621      	mov	r1, r4
   d6010:	466b      	mov	r3, sp
   d6012:	aa0c      	add	r2, sp, #48	; 0x30
   d6014:	4630      	mov	r0, r6
   d6016:	f7fe fd49 	bl	d4aac <netdb_getaddrinfo>
    if (!r) {
   d601a:	4604      	mov	r4, r0
   d601c:	2800      	cmp	r0, #0
   d601e:	d144      	bne.n	d60aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6020:	4602      	mov	r2, r0
   d6022:	2101      	movs	r1, #1
   d6024:	6868      	ldr	r0, [r5, #4]
   d6026:	f7fe ff15 	bl	d4e54 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d602a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d602c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d602e:	4622      	mov	r2, r4
   d6030:	6868      	ldr	r0, [r5, #4]
   d6032:	f7fe ff0f 	bl	d4e54 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6036:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6038:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d603a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d603c:	2e00      	cmp	r6, #0
   d603e:	d034      	beq.n	d60aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6040:	2900      	cmp	r1, #0
   d6042:	d132      	bne.n	d60aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6044:	6873      	ldr	r3, [r6, #4]
   d6046:	2b02      	cmp	r3, #2
   d6048:	d002      	beq.n	d6050 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d604a:	2b0a      	cmp	r3, #10
   d604c:	d009      	beq.n	d6062 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d604e:	e02a      	b.n	d60a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6050:	f1b8 0f00 	cmp.w	r8, #0
   d6054:	d027      	beq.n	d60a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6056:	6971      	ldr	r1, [r6, #20]
   d6058:	4638      	mov	r0, r7
   d605a:	3104      	adds	r1, #4
   d605c:	f7ff fcd1 	bl	d5a02 <_ZN9IPAddressaSEPKh>
   d6060:	e020      	b.n	d60a4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6062:	f1b9 0f00 	cmp.w	r9, #0
   d6066:	d01e      	beq.n	d60a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6068:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d606a:	2211      	movs	r2, #17
   d606c:	a801      	add	r0, sp, #4
   d606e:	f000 fc1e 	bl	d68ae <memset>
                    a.v = 6;
   d6072:	2306      	movs	r3, #6
   d6074:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6078:	ad01      	add	r5, sp, #4
   d607a:	f104 0308 	add.w	r3, r4, #8
   d607e:	3418      	adds	r4, #24
   d6080:	6818      	ldr	r0, [r3, #0]
   d6082:	6859      	ldr	r1, [r3, #4]
   d6084:	462a      	mov	r2, r5
   d6086:	c203      	stmia	r2!, {r0, r1}
   d6088:	3308      	adds	r3, #8
   d608a:	42a3      	cmp	r3, r4
   d608c:	4615      	mov	r5, r2
   d608e:	d1f7      	bne.n	d6080 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6090:	a901      	add	r1, sp, #4
   d6092:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6094:	ad07      	add	r5, sp, #28
   d6096:	f7ff fc95 	bl	d59c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d609a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d609c:	1d3c      	adds	r4, r7, #4
   d609e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d60a0:	682b      	ldr	r3, [r5, #0]
   d60a2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d60a4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d60a6:	69f6      	ldr	r6, [r6, #28]
   d60a8:	e7c8      	b.n	d603c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d60aa:	9800      	ldr	r0, [sp, #0]
   d60ac:	f7fe fcf6 	bl	d4a9c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d60b0:	4638      	mov	r0, r7
   d60b2:	b015      	add	sp, #84	; 0x54
   d60b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d60b8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d60b8:	4b02      	ldr	r3, [pc, #8]	; (d60c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d60ba:	4a03      	ldr	r2, [pc, #12]	; (d60c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d60bc:	601a      	str	r2, [r3, #0]
   d60be:	2200      	movs	r2, #0
   d60c0:	605a      	str	r2, [r3, #4]
   d60c2:	4770      	bx	lr
   d60c4:	2003e728 	.word	0x2003e728
   d60c8:	000d6d14 	.word	0x000d6d14

000d60cc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d60cc:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d60ce:	4e18      	ldr	r6, [pc, #96]	; (d6130 <pinAvailable+0x64>)
   d60d0:	6831      	ldr	r1, [r6, #0]
   d60d2:	f011 0501 	ands.w	r5, r1, #1
   d60d6:	4604      	mov	r4, r0
   d60d8:	d10a      	bne.n	d60f0 <pinAvailable+0x24>
   d60da:	4630      	mov	r0, r6
   d60dc:	f7fd ffe1 	bl	d40a2 <__cxa_guard_acquire>
   d60e0:	b130      	cbz	r0, d60f0 <pinAvailable+0x24>
   d60e2:	4629      	mov	r1, r5
   d60e4:	4813      	ldr	r0, [pc, #76]	; (d6134 <pinAvailable+0x68>)
   d60e6:	f7fe ff71 	bl	d4fcc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d60ea:	4630      	mov	r0, r6
   d60ec:	f7fd ffde 	bl	d40ac <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d60f0:	4810      	ldr	r0, [pc, #64]	; (d6134 <pinAvailable+0x68>)
   d60f2:	f7fe fff7 	bl	d50e4 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d60f6:	b128      	cbz	r0, d6104 <pinAvailable+0x38>
   d60f8:	f1a4 030b 	sub.w	r3, r4, #11
   d60fc:	2b02      	cmp	r3, #2
   d60fe:	d801      	bhi.n	d6104 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d6100:	2000      	movs	r0, #0
   d6102:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6104:	f000 f870 	bl	d61e8 <_Z19__fetch_global_Wirev>
   d6108:	f7ff fe3d 	bl	d5d86 <_ZN7TwoWire9isEnabledEv>
   d610c:	b108      	cbz	r0, d6112 <pinAvailable+0x46>
   d610e:	2c01      	cmp	r4, #1
   d6110:	d9f6      	bls.n	d6100 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6112:	f7ff fd61 	bl	d5bd8 <_Z22__fetch_global_Serial1v>
   d6116:	f7ff fd5b 	bl	d5bd0 <_ZN11USARTSerial9isEnabledEv>
   d611a:	b118      	cbz	r0, d6124 <pinAvailable+0x58>
   d611c:	f1a4 0309 	sub.w	r3, r4, #9
   d6120:	2b01      	cmp	r3, #1
   d6122:	d9ed      	bls.n	d6100 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6124:	2c23      	cmp	r4, #35	; 0x23
   d6126:	bf8c      	ite	hi
   d6128:	2000      	movhi	r0, #0
   d612a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d612c:	bd70      	pop	{r4, r5, r6, pc}
   d612e:	bf00      	nop
   d6130:	2003e4d0 	.word	0x2003e4d0
   d6134:	2003e4d4 	.word	0x2003e4d4

000d6138 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6138:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d613a:	b538      	push	{r3, r4, r5, lr}
   d613c:	4604      	mov	r4, r0
   d613e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6140:	d80a      	bhi.n	d6158 <pinMode+0x20>
   d6142:	29ff      	cmp	r1, #255	; 0xff
   d6144:	d008      	beq.n	d6158 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6146:	f7ff ffc1 	bl	d60cc <pinAvailable>
   d614a:	b128      	cbz	r0, d6158 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d614c:	4629      	mov	r1, r5
   d614e:	4620      	mov	r0, r4
}
   d6150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6154:	f7fe bcba 	b.w	d4acc <HAL_Pin_Mode>
   d6158:	bd38      	pop	{r3, r4, r5, pc}

000d615a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d615a:	b538      	push	{r3, r4, r5, lr}
   d615c:	4604      	mov	r4, r0
   d615e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6160:	f7fe fcbc 	bl	d4adc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6164:	28ff      	cmp	r0, #255	; 0xff
   d6166:	d010      	beq.n	d618a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6168:	2806      	cmp	r0, #6
   d616a:	d804      	bhi.n	d6176 <digitalWrite+0x1c>
   d616c:	234d      	movs	r3, #77	; 0x4d
   d616e:	fa23 f000 	lsr.w	r0, r3, r0
   d6172:	07c3      	lsls	r3, r0, #31
   d6174:	d409      	bmi.n	d618a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6176:	4620      	mov	r0, r4
   d6178:	f7ff ffa8 	bl	d60cc <pinAvailable>
   d617c:	b128      	cbz	r0, d618a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d617e:	4629      	mov	r1, r5
   d6180:	4620      	mov	r0, r4
}
   d6182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6186:	f7fe bcb1 	b.w	d4aec <HAL_GPIO_Write>
   d618a:	bd38      	pop	{r3, r4, r5, pc}

000d618c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d618c:	b510      	push	{r4, lr}
   d618e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6190:	f7fe fca4 	bl	d4adc <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6194:	3804      	subs	r0, #4
   d6196:	b2c0      	uxtb	r0, r0
   d6198:	2801      	cmp	r0, #1
   d619a:	d908      	bls.n	d61ae <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d619c:	4620      	mov	r0, r4
   d619e:	f7ff ff95 	bl	d60cc <pinAvailable>
   d61a2:	b120      	cbz	r0, d61ae <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d61a4:	4620      	mov	r0, r4
}
   d61a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d61aa:	f7fe bca7 	b.w	d4afc <HAL_GPIO_Read>
}
   d61ae:	2000      	movs	r0, #0
   d61b0:	bd10      	pop	{r4, pc}
	...

000d61b4 <_Z17acquireWireBufferv>:
   d61b4:	b570      	push	{r4, r5, r6, lr}
   d61b6:	4604      	mov	r4, r0
   d61b8:	2514      	movs	r5, #20
   d61ba:	462a      	mov	r2, r5
   d61bc:	4e09      	ldr	r6, [pc, #36]	; (d61e4 <_Z17acquireWireBufferv+0x30>)
   d61be:	2100      	movs	r1, #0
   d61c0:	f000 fb75 	bl	d68ae <memset>
   d61c4:	8025      	strh	r5, [r4, #0]
   d61c6:	2520      	movs	r5, #32
   d61c8:	4631      	mov	r1, r6
   d61ca:	60a5      	str	r5, [r4, #8]
   d61cc:	6125      	str	r5, [r4, #16]
   d61ce:	4628      	mov	r0, r5
   d61d0:	f000 f840 	bl	d6254 <_ZnajRKSt9nothrow_t>
   d61d4:	4631      	mov	r1, r6
   d61d6:	6060      	str	r0, [r4, #4]
   d61d8:	4628      	mov	r0, r5
   d61da:	f000 f83b 	bl	d6254 <_ZnajRKSt9nothrow_t>
   d61de:	60e0      	str	r0, [r4, #12]
   d61e0:	4620      	mov	r0, r4
   d61e2:	bd70      	pop	{r4, r5, r6, pc}
   d61e4:	000d6d40 	.word	0x000d6d40

000d61e8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d61e8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d61ea:	4d0e      	ldr	r5, [pc, #56]	; (d6224 <_Z19__fetch_global_Wirev+0x3c>)
   d61ec:	6829      	ldr	r1, [r5, #0]
   d61ee:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d61f2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d61f4:	d113      	bne.n	d621e <_Z19__fetch_global_Wirev+0x36>
   d61f6:	4628      	mov	r0, r5
   d61f8:	f7fd ff53 	bl	d40a2 <__cxa_guard_acquire>
   d61fc:	b178      	cbz	r0, d621e <_Z19__fetch_global_Wirev+0x36>
   d61fe:	a801      	add	r0, sp, #4
   d6200:	f7ff ffd8 	bl	d61b4 <_Z17acquireWireBufferv>
   d6204:	aa01      	add	r2, sp, #4
   d6206:	4621      	mov	r1, r4
   d6208:	4807      	ldr	r0, [pc, #28]	; (d6228 <_Z19__fetch_global_Wirev+0x40>)
   d620a:	f7ff fd65 	bl	d5cd8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d620e:	4628      	mov	r0, r5
   d6210:	f7fd ff4c 	bl	d40ac <__cxa_guard_release>
   d6214:	4a05      	ldr	r2, [pc, #20]	; (d622c <_Z19__fetch_global_Wirev+0x44>)
   d6216:	4906      	ldr	r1, [pc, #24]	; (d6230 <_Z19__fetch_global_Wirev+0x48>)
   d6218:	4803      	ldr	r0, [pc, #12]	; (d6228 <_Z19__fetch_global_Wirev+0x40>)
   d621a:	f000 f80b 	bl	d6234 <__aeabi_atexit>
	return wire;
}
   d621e:	4802      	ldr	r0, [pc, #8]	; (d6228 <_Z19__fetch_global_Wirev+0x40>)
   d6220:	b007      	add	sp, #28
   d6222:	bd30      	pop	{r4, r5, pc}
   d6224:	2003e734 	.word	0x2003e734
   d6228:	2003e738 	.word	0x2003e738
   d622c:	2003b514 	.word	0x2003b514
   d6230:	000d5c81 	.word	0x000d5c81

000d6234 <__aeabi_atexit>:
   d6234:	460b      	mov	r3, r1
   d6236:	4601      	mov	r1, r0
   d6238:	4618      	mov	r0, r3
   d623a:	f000 bb1f 	b.w	d687c <__cxa_atexit>
	...

000d6240 <_ZSt15get_new_handlerv>:
   d6240:	4b02      	ldr	r3, [pc, #8]	; (d624c <_ZSt15get_new_handlerv+0xc>)
   d6242:	6818      	ldr	r0, [r3, #0]
   d6244:	f3bf 8f5f 	dmb	sy
   d6248:	4770      	bx	lr
   d624a:	bf00      	nop
   d624c:	2003e74c 	.word	0x2003e74c

000d6250 <_ZdlPvj>:
   d6250:	f7fd bf23 	b.w	d409a <_ZdlPv>

000d6254 <_ZnajRKSt9nothrow_t>:
   d6254:	f000 b800 	b.w	d6258 <_ZnwjRKSt9nothrow_t>

000d6258 <_ZnwjRKSt9nothrow_t>:
   d6258:	b510      	push	{r4, lr}
   d625a:	2800      	cmp	r0, #0
   d625c:	bf14      	ite	ne
   d625e:	4604      	movne	r4, r0
   d6260:	2401      	moveq	r4, #1
   d6262:	4620      	mov	r0, r4
   d6264:	f7fe fe46 	bl	d4ef4 <malloc>
   d6268:	b920      	cbnz	r0, d6274 <_ZnwjRKSt9nothrow_t+0x1c>
   d626a:	f7ff ffe9 	bl	d6240 <_ZSt15get_new_handlerv>
   d626e:	b108      	cbz	r0, d6274 <_ZnwjRKSt9nothrow_t+0x1c>
   d6270:	4780      	blx	r0
   d6272:	e7f6      	b.n	d6262 <_ZnwjRKSt9nothrow_t+0xa>
   d6274:	bd10      	pop	{r4, pc}

000d6276 <_ZSt25__throw_bad_function_callv>:
   d6276:	b508      	push	{r3, lr}
   d6278:	f7fe fe54 	bl	d4f24 <abort>

000d627c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d627c:	4b18      	ldr	r3, [pc, #96]	; (d62e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d627e:	681a      	ldr	r2, [r3, #0]
   d6280:	07d1      	lsls	r1, r2, #31
   d6282:	bf5c      	itt	pl
   d6284:	2201      	movpl	r2, #1
   d6286:	601a      	strpl	r2, [r3, #0]
   d6288:	4b16      	ldr	r3, [pc, #88]	; (d62e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d628a:	681a      	ldr	r2, [r3, #0]
   d628c:	07d2      	lsls	r2, r2, #31
   d628e:	bf5c      	itt	pl
   d6290:	2201      	movpl	r2, #1
   d6292:	601a      	strpl	r2, [r3, #0]
   d6294:	4b14      	ldr	r3, [pc, #80]	; (d62e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6296:	681a      	ldr	r2, [r3, #0]
   d6298:	07d0      	lsls	r0, r2, #31
   d629a:	bf5c      	itt	pl
   d629c:	2201      	movpl	r2, #1
   d629e:	601a      	strpl	r2, [r3, #0]
   d62a0:	4b12      	ldr	r3, [pc, #72]	; (d62ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d62a2:	681a      	ldr	r2, [r3, #0]
   d62a4:	07d1      	lsls	r1, r2, #31
   d62a6:	bf5c      	itt	pl
   d62a8:	2201      	movpl	r2, #1
   d62aa:	601a      	strpl	r2, [r3, #0]
   d62ac:	4b10      	ldr	r3, [pc, #64]	; (d62f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d62ae:	681a      	ldr	r2, [r3, #0]
   d62b0:	07d2      	lsls	r2, r2, #31
   d62b2:	bf5c      	itt	pl
   d62b4:	2201      	movpl	r2, #1
   d62b6:	601a      	strpl	r2, [r3, #0]
   d62b8:	4b0e      	ldr	r3, [pc, #56]	; (d62f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d62ba:	681a      	ldr	r2, [r3, #0]
   d62bc:	07d0      	lsls	r0, r2, #31
   d62be:	bf5c      	itt	pl
   d62c0:	2201      	movpl	r2, #1
   d62c2:	601a      	strpl	r2, [r3, #0]
   d62c4:	4b0c      	ldr	r3, [pc, #48]	; (d62f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d62c6:	681a      	ldr	r2, [r3, #0]
   d62c8:	07d1      	lsls	r1, r2, #31
   d62ca:	bf5c      	itt	pl
   d62cc:	2201      	movpl	r2, #1
   d62ce:	601a      	strpl	r2, [r3, #0]
   d62d0:	4b0a      	ldr	r3, [pc, #40]	; (d62fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d62d2:	681a      	ldr	r2, [r3, #0]
   d62d4:	07d2      	lsls	r2, r2, #31
   d62d6:	bf5c      	itt	pl
   d62d8:	2201      	movpl	r2, #1
   d62da:	601a      	strpl	r2, [r3, #0]
   d62dc:	4770      	bx	lr
   d62de:	bf00      	nop
   d62e0:	2003e76c 	.word	0x2003e76c
   d62e4:	2003e768 	.word	0x2003e768
   d62e8:	2003e764 	.word	0x2003e764
   d62ec:	2003e760 	.word	0x2003e760
   d62f0:	2003e75c 	.word	0x2003e75c
   d62f4:	2003e758 	.word	0x2003e758
   d62f8:	2003e754 	.word	0x2003e754
   d62fc:	2003e750 	.word	0x2003e750

000d6300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6300:	4b24      	ldr	r3, [pc, #144]	; (d6394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6302:	681a      	ldr	r2, [r3, #0]
   d6304:	07d0      	lsls	r0, r2, #31
   d6306:	bf5c      	itt	pl
   d6308:	2201      	movpl	r2, #1
   d630a:	601a      	strpl	r2, [r3, #0]
   d630c:	4b22      	ldr	r3, [pc, #136]	; (d6398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d630e:	681a      	ldr	r2, [r3, #0]
   d6310:	07d1      	lsls	r1, r2, #31
   d6312:	bf5c      	itt	pl
   d6314:	2201      	movpl	r2, #1
   d6316:	601a      	strpl	r2, [r3, #0]
   d6318:	4b20      	ldr	r3, [pc, #128]	; (d639c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d631a:	681a      	ldr	r2, [r3, #0]
   d631c:	07d2      	lsls	r2, r2, #31
   d631e:	bf5c      	itt	pl
   d6320:	2201      	movpl	r2, #1
   d6322:	601a      	strpl	r2, [r3, #0]
   d6324:	4b1e      	ldr	r3, [pc, #120]	; (d63a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6326:	681a      	ldr	r2, [r3, #0]
   d6328:	07d0      	lsls	r0, r2, #31
   d632a:	bf5c      	itt	pl
   d632c:	2201      	movpl	r2, #1
   d632e:	601a      	strpl	r2, [r3, #0]
   d6330:	4b1c      	ldr	r3, [pc, #112]	; (d63a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6332:	681a      	ldr	r2, [r3, #0]
   d6334:	07d1      	lsls	r1, r2, #31
   d6336:	bf5c      	itt	pl
   d6338:	2201      	movpl	r2, #1
   d633a:	601a      	strpl	r2, [r3, #0]
   d633c:	4b1a      	ldr	r3, [pc, #104]	; (d63a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d633e:	681a      	ldr	r2, [r3, #0]
   d6340:	07d2      	lsls	r2, r2, #31
   d6342:	bf5c      	itt	pl
   d6344:	2201      	movpl	r2, #1
   d6346:	601a      	strpl	r2, [r3, #0]
   d6348:	4b18      	ldr	r3, [pc, #96]	; (d63ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d634a:	681a      	ldr	r2, [r3, #0]
   d634c:	07d0      	lsls	r0, r2, #31
   d634e:	bf5c      	itt	pl
   d6350:	2201      	movpl	r2, #1
   d6352:	601a      	strpl	r2, [r3, #0]
   d6354:	4b16      	ldr	r3, [pc, #88]	; (d63b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6356:	681a      	ldr	r2, [r3, #0]
   d6358:	07d1      	lsls	r1, r2, #31
   d635a:	bf5c      	itt	pl
   d635c:	2201      	movpl	r2, #1
   d635e:	601a      	strpl	r2, [r3, #0]
   d6360:	4b14      	ldr	r3, [pc, #80]	; (d63b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6362:	681a      	ldr	r2, [r3, #0]
   d6364:	07d2      	lsls	r2, r2, #31
   d6366:	bf5c      	itt	pl
   d6368:	2201      	movpl	r2, #1
   d636a:	601a      	strpl	r2, [r3, #0]
   d636c:	4b12      	ldr	r3, [pc, #72]	; (d63b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d636e:	681a      	ldr	r2, [r3, #0]
   d6370:	07d0      	lsls	r0, r2, #31
   d6372:	bf5c      	itt	pl
   d6374:	2201      	movpl	r2, #1
   d6376:	601a      	strpl	r2, [r3, #0]
   d6378:	4b10      	ldr	r3, [pc, #64]	; (d63bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d637a:	681a      	ldr	r2, [r3, #0]
   d637c:	07d1      	lsls	r1, r2, #31
   d637e:	bf5c      	itt	pl
   d6380:	2201      	movpl	r2, #1
   d6382:	601a      	strpl	r2, [r3, #0]
   d6384:	4b0e      	ldr	r3, [pc, #56]	; (d63c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6386:	681a      	ldr	r2, [r3, #0]
   d6388:	07d2      	lsls	r2, r2, #31
   d638a:	bf5c      	itt	pl
   d638c:	2201      	movpl	r2, #1
   d638e:	601a      	strpl	r2, [r3, #0]
   d6390:	4770      	bx	lr
   d6392:	bf00      	nop
   d6394:	2003e79c 	.word	0x2003e79c
   d6398:	2003e798 	.word	0x2003e798
   d639c:	2003e794 	.word	0x2003e794
   d63a0:	2003e790 	.word	0x2003e790
   d63a4:	2003e78c 	.word	0x2003e78c
   d63a8:	2003e788 	.word	0x2003e788
   d63ac:	2003e784 	.word	0x2003e784
   d63b0:	2003e780 	.word	0x2003e780
   d63b4:	2003e77c 	.word	0x2003e77c
   d63b8:	2003e778 	.word	0x2003e778
   d63bc:	2003e774 	.word	0x2003e774
   d63c0:	2003e770 	.word	0x2003e770

000d63c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d63c4:	4b24      	ldr	r3, [pc, #144]	; (d6458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d63c6:	681a      	ldr	r2, [r3, #0]
   d63c8:	07d0      	lsls	r0, r2, #31
   d63ca:	bf5c      	itt	pl
   d63cc:	2201      	movpl	r2, #1
   d63ce:	601a      	strpl	r2, [r3, #0]
   d63d0:	4b22      	ldr	r3, [pc, #136]	; (d645c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d63d2:	681a      	ldr	r2, [r3, #0]
   d63d4:	07d1      	lsls	r1, r2, #31
   d63d6:	bf5c      	itt	pl
   d63d8:	2201      	movpl	r2, #1
   d63da:	601a      	strpl	r2, [r3, #0]
   d63dc:	4b20      	ldr	r3, [pc, #128]	; (d6460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d63de:	681a      	ldr	r2, [r3, #0]
   d63e0:	07d2      	lsls	r2, r2, #31
   d63e2:	bf5c      	itt	pl
   d63e4:	2201      	movpl	r2, #1
   d63e6:	601a      	strpl	r2, [r3, #0]
   d63e8:	4b1e      	ldr	r3, [pc, #120]	; (d6464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d63ea:	681a      	ldr	r2, [r3, #0]
   d63ec:	07d0      	lsls	r0, r2, #31
   d63ee:	bf5c      	itt	pl
   d63f0:	2201      	movpl	r2, #1
   d63f2:	601a      	strpl	r2, [r3, #0]
   d63f4:	4b1c      	ldr	r3, [pc, #112]	; (d6468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d63f6:	681a      	ldr	r2, [r3, #0]
   d63f8:	07d1      	lsls	r1, r2, #31
   d63fa:	bf5c      	itt	pl
   d63fc:	2201      	movpl	r2, #1
   d63fe:	601a      	strpl	r2, [r3, #0]
   d6400:	4b1a      	ldr	r3, [pc, #104]	; (d646c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6402:	681a      	ldr	r2, [r3, #0]
   d6404:	07d2      	lsls	r2, r2, #31
   d6406:	bf5c      	itt	pl
   d6408:	2201      	movpl	r2, #1
   d640a:	601a      	strpl	r2, [r3, #0]
   d640c:	4b18      	ldr	r3, [pc, #96]	; (d6470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d640e:	681a      	ldr	r2, [r3, #0]
   d6410:	07d0      	lsls	r0, r2, #31
   d6412:	bf5c      	itt	pl
   d6414:	2201      	movpl	r2, #1
   d6416:	601a      	strpl	r2, [r3, #0]
   d6418:	4b16      	ldr	r3, [pc, #88]	; (d6474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d641a:	681a      	ldr	r2, [r3, #0]
   d641c:	07d1      	lsls	r1, r2, #31
   d641e:	bf5c      	itt	pl
   d6420:	2201      	movpl	r2, #1
   d6422:	601a      	strpl	r2, [r3, #0]
   d6424:	4b14      	ldr	r3, [pc, #80]	; (d6478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6426:	681a      	ldr	r2, [r3, #0]
   d6428:	07d2      	lsls	r2, r2, #31
   d642a:	bf5c      	itt	pl
   d642c:	2201      	movpl	r2, #1
   d642e:	601a      	strpl	r2, [r3, #0]
   d6430:	4b12      	ldr	r3, [pc, #72]	; (d647c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6432:	681a      	ldr	r2, [r3, #0]
   d6434:	07d0      	lsls	r0, r2, #31
   d6436:	bf5c      	itt	pl
   d6438:	2201      	movpl	r2, #1
   d643a:	601a      	strpl	r2, [r3, #0]
   d643c:	4b10      	ldr	r3, [pc, #64]	; (d6480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d643e:	681a      	ldr	r2, [r3, #0]
   d6440:	07d1      	lsls	r1, r2, #31
   d6442:	bf5c      	itt	pl
   d6444:	2201      	movpl	r2, #1
   d6446:	601a      	strpl	r2, [r3, #0]
   d6448:	4b0e      	ldr	r3, [pc, #56]	; (d6484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d644a:	681a      	ldr	r2, [r3, #0]
   d644c:	07d2      	lsls	r2, r2, #31
   d644e:	bf5c      	itt	pl
   d6450:	2201      	movpl	r2, #1
   d6452:	601a      	strpl	r2, [r3, #0]
   d6454:	4770      	bx	lr
   d6456:	bf00      	nop
   d6458:	2003e7cc 	.word	0x2003e7cc
   d645c:	2003e7c8 	.word	0x2003e7c8
   d6460:	2003e7c4 	.word	0x2003e7c4
   d6464:	2003e7c0 	.word	0x2003e7c0
   d6468:	2003e7bc 	.word	0x2003e7bc
   d646c:	2003e7b8 	.word	0x2003e7b8
   d6470:	2003e7b4 	.word	0x2003e7b4
   d6474:	2003e7b0 	.word	0x2003e7b0
   d6478:	2003e7ac 	.word	0x2003e7ac
   d647c:	2003e7a8 	.word	0x2003e7a8
   d6480:	2003e7a4 	.word	0x2003e7a4
   d6484:	2003e7a0 	.word	0x2003e7a0

000d6488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6488:	4b18      	ldr	r3, [pc, #96]	; (d64ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d648a:	681a      	ldr	r2, [r3, #0]
   d648c:	07d1      	lsls	r1, r2, #31
   d648e:	bf5c      	itt	pl
   d6490:	2201      	movpl	r2, #1
   d6492:	601a      	strpl	r2, [r3, #0]
   d6494:	4b16      	ldr	r3, [pc, #88]	; (d64f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6496:	681a      	ldr	r2, [r3, #0]
   d6498:	07d2      	lsls	r2, r2, #31
   d649a:	bf5c      	itt	pl
   d649c:	2201      	movpl	r2, #1
   d649e:	601a      	strpl	r2, [r3, #0]
   d64a0:	4b14      	ldr	r3, [pc, #80]	; (d64f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d64a2:	681a      	ldr	r2, [r3, #0]
   d64a4:	07d0      	lsls	r0, r2, #31
   d64a6:	bf5c      	itt	pl
   d64a8:	2201      	movpl	r2, #1
   d64aa:	601a      	strpl	r2, [r3, #0]
   d64ac:	4b12      	ldr	r3, [pc, #72]	; (d64f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d64ae:	681a      	ldr	r2, [r3, #0]
   d64b0:	07d1      	lsls	r1, r2, #31
   d64b2:	bf5c      	itt	pl
   d64b4:	2201      	movpl	r2, #1
   d64b6:	601a      	strpl	r2, [r3, #0]
   d64b8:	4b10      	ldr	r3, [pc, #64]	; (d64fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d64ba:	681a      	ldr	r2, [r3, #0]
   d64bc:	07d2      	lsls	r2, r2, #31
   d64be:	bf5c      	itt	pl
   d64c0:	2201      	movpl	r2, #1
   d64c2:	601a      	strpl	r2, [r3, #0]
   d64c4:	4b0e      	ldr	r3, [pc, #56]	; (d6500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d64c6:	681a      	ldr	r2, [r3, #0]
   d64c8:	07d0      	lsls	r0, r2, #31
   d64ca:	bf5c      	itt	pl
   d64cc:	2201      	movpl	r2, #1
   d64ce:	601a      	strpl	r2, [r3, #0]
   d64d0:	4b0c      	ldr	r3, [pc, #48]	; (d6504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d64d2:	681a      	ldr	r2, [r3, #0]
   d64d4:	07d1      	lsls	r1, r2, #31
   d64d6:	bf5c      	itt	pl
   d64d8:	2201      	movpl	r2, #1
   d64da:	601a      	strpl	r2, [r3, #0]
   d64dc:	4b0a      	ldr	r3, [pc, #40]	; (d6508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d64de:	681a      	ldr	r2, [r3, #0]
   d64e0:	07d2      	lsls	r2, r2, #31
   d64e2:	bf5c      	itt	pl
   d64e4:	2201      	movpl	r2, #1
   d64e6:	601a      	strpl	r2, [r3, #0]
   d64e8:	4770      	bx	lr
   d64ea:	bf00      	nop
   d64ec:	2003e7ec 	.word	0x2003e7ec
   d64f0:	2003e7e8 	.word	0x2003e7e8
   d64f4:	2003e7e4 	.word	0x2003e7e4
   d64f8:	2003e7e0 	.word	0x2003e7e0
   d64fc:	2003e7dc 	.word	0x2003e7dc
   d6500:	2003e7d8 	.word	0x2003e7d8
   d6504:	2003e7d4 	.word	0x2003e7d4
   d6508:	2003e7d0 	.word	0x2003e7d0

000d650c <__aeabi_drsub>:
   d650c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6510:	e002      	b.n	d6518 <__adddf3>
   d6512:	bf00      	nop

000d6514 <__aeabi_dsub>:
   d6514:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6518 <__adddf3>:
   d6518:	b530      	push	{r4, r5, lr}
   d651a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d651e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6522:	ea94 0f05 	teq	r4, r5
   d6526:	bf08      	it	eq
   d6528:	ea90 0f02 	teqeq	r0, r2
   d652c:	bf1f      	itttt	ne
   d652e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6532:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6536:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d653a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d653e:	f000 80e2 	beq.w	d6706 <__adddf3+0x1ee>
   d6542:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6546:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d654a:	bfb8      	it	lt
   d654c:	426d      	neglt	r5, r5
   d654e:	dd0c      	ble.n	d656a <__adddf3+0x52>
   d6550:	442c      	add	r4, r5
   d6552:	ea80 0202 	eor.w	r2, r0, r2
   d6556:	ea81 0303 	eor.w	r3, r1, r3
   d655a:	ea82 0000 	eor.w	r0, r2, r0
   d655e:	ea83 0101 	eor.w	r1, r3, r1
   d6562:	ea80 0202 	eor.w	r2, r0, r2
   d6566:	ea81 0303 	eor.w	r3, r1, r3
   d656a:	2d36      	cmp	r5, #54	; 0x36
   d656c:	bf88      	it	hi
   d656e:	bd30      	pophi	{r4, r5, pc}
   d6570:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6574:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6578:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d657c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6580:	d002      	beq.n	d6588 <__adddf3+0x70>
   d6582:	4240      	negs	r0, r0
   d6584:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6588:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d658c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6590:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6594:	d002      	beq.n	d659c <__adddf3+0x84>
   d6596:	4252      	negs	r2, r2
   d6598:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d659c:	ea94 0f05 	teq	r4, r5
   d65a0:	f000 80a7 	beq.w	d66f2 <__adddf3+0x1da>
   d65a4:	f1a4 0401 	sub.w	r4, r4, #1
   d65a8:	f1d5 0e20 	rsbs	lr, r5, #32
   d65ac:	db0d      	blt.n	d65ca <__adddf3+0xb2>
   d65ae:	fa02 fc0e 	lsl.w	ip, r2, lr
   d65b2:	fa22 f205 	lsr.w	r2, r2, r5
   d65b6:	1880      	adds	r0, r0, r2
   d65b8:	f141 0100 	adc.w	r1, r1, #0
   d65bc:	fa03 f20e 	lsl.w	r2, r3, lr
   d65c0:	1880      	adds	r0, r0, r2
   d65c2:	fa43 f305 	asr.w	r3, r3, r5
   d65c6:	4159      	adcs	r1, r3
   d65c8:	e00e      	b.n	d65e8 <__adddf3+0xd0>
   d65ca:	f1a5 0520 	sub.w	r5, r5, #32
   d65ce:	f10e 0e20 	add.w	lr, lr, #32
   d65d2:	2a01      	cmp	r2, #1
   d65d4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d65d8:	bf28      	it	cs
   d65da:	f04c 0c02 	orrcs.w	ip, ip, #2
   d65de:	fa43 f305 	asr.w	r3, r3, r5
   d65e2:	18c0      	adds	r0, r0, r3
   d65e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d65e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d65ec:	d507      	bpl.n	d65fe <__adddf3+0xe6>
   d65ee:	f04f 0e00 	mov.w	lr, #0
   d65f2:	f1dc 0c00 	rsbs	ip, ip, #0
   d65f6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d65fa:	eb6e 0101 	sbc.w	r1, lr, r1
   d65fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6602:	d31b      	bcc.n	d663c <__adddf3+0x124>
   d6604:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6608:	d30c      	bcc.n	d6624 <__adddf3+0x10c>
   d660a:	0849      	lsrs	r1, r1, #1
   d660c:	ea5f 0030 	movs.w	r0, r0, rrx
   d6610:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6614:	f104 0401 	add.w	r4, r4, #1
   d6618:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d661c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6620:	f080 809a 	bcs.w	d6758 <__adddf3+0x240>
   d6624:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6628:	bf08      	it	eq
   d662a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d662e:	f150 0000 	adcs.w	r0, r0, #0
   d6632:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6636:	ea41 0105 	orr.w	r1, r1, r5
   d663a:	bd30      	pop	{r4, r5, pc}
   d663c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6640:	4140      	adcs	r0, r0
   d6642:	eb41 0101 	adc.w	r1, r1, r1
   d6646:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d664a:	f1a4 0401 	sub.w	r4, r4, #1
   d664e:	d1e9      	bne.n	d6624 <__adddf3+0x10c>
   d6650:	f091 0f00 	teq	r1, #0
   d6654:	bf04      	itt	eq
   d6656:	4601      	moveq	r1, r0
   d6658:	2000      	moveq	r0, #0
   d665a:	fab1 f381 	clz	r3, r1
   d665e:	bf08      	it	eq
   d6660:	3320      	addeq	r3, #32
   d6662:	f1a3 030b 	sub.w	r3, r3, #11
   d6666:	f1b3 0220 	subs.w	r2, r3, #32
   d666a:	da0c      	bge.n	d6686 <__adddf3+0x16e>
   d666c:	320c      	adds	r2, #12
   d666e:	dd08      	ble.n	d6682 <__adddf3+0x16a>
   d6670:	f102 0c14 	add.w	ip, r2, #20
   d6674:	f1c2 020c 	rsb	r2, r2, #12
   d6678:	fa01 f00c 	lsl.w	r0, r1, ip
   d667c:	fa21 f102 	lsr.w	r1, r1, r2
   d6680:	e00c      	b.n	d669c <__adddf3+0x184>
   d6682:	f102 0214 	add.w	r2, r2, #20
   d6686:	bfd8      	it	le
   d6688:	f1c2 0c20 	rsble	ip, r2, #32
   d668c:	fa01 f102 	lsl.w	r1, r1, r2
   d6690:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6694:	bfdc      	itt	le
   d6696:	ea41 010c 	orrle.w	r1, r1, ip
   d669a:	4090      	lslle	r0, r2
   d669c:	1ae4      	subs	r4, r4, r3
   d669e:	bfa2      	ittt	ge
   d66a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d66a4:	4329      	orrge	r1, r5
   d66a6:	bd30      	popge	{r4, r5, pc}
   d66a8:	ea6f 0404 	mvn.w	r4, r4
   d66ac:	3c1f      	subs	r4, #31
   d66ae:	da1c      	bge.n	d66ea <__adddf3+0x1d2>
   d66b0:	340c      	adds	r4, #12
   d66b2:	dc0e      	bgt.n	d66d2 <__adddf3+0x1ba>
   d66b4:	f104 0414 	add.w	r4, r4, #20
   d66b8:	f1c4 0220 	rsb	r2, r4, #32
   d66bc:	fa20 f004 	lsr.w	r0, r0, r4
   d66c0:	fa01 f302 	lsl.w	r3, r1, r2
   d66c4:	ea40 0003 	orr.w	r0, r0, r3
   d66c8:	fa21 f304 	lsr.w	r3, r1, r4
   d66cc:	ea45 0103 	orr.w	r1, r5, r3
   d66d0:	bd30      	pop	{r4, r5, pc}
   d66d2:	f1c4 040c 	rsb	r4, r4, #12
   d66d6:	f1c4 0220 	rsb	r2, r4, #32
   d66da:	fa20 f002 	lsr.w	r0, r0, r2
   d66de:	fa01 f304 	lsl.w	r3, r1, r4
   d66e2:	ea40 0003 	orr.w	r0, r0, r3
   d66e6:	4629      	mov	r1, r5
   d66e8:	bd30      	pop	{r4, r5, pc}
   d66ea:	fa21 f004 	lsr.w	r0, r1, r4
   d66ee:	4629      	mov	r1, r5
   d66f0:	bd30      	pop	{r4, r5, pc}
   d66f2:	f094 0f00 	teq	r4, #0
   d66f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d66fa:	bf06      	itte	eq
   d66fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6700:	3401      	addeq	r4, #1
   d6702:	3d01      	subne	r5, #1
   d6704:	e74e      	b.n	d65a4 <__adddf3+0x8c>
   d6706:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d670a:	bf18      	it	ne
   d670c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6710:	d029      	beq.n	d6766 <__adddf3+0x24e>
   d6712:	ea94 0f05 	teq	r4, r5
   d6716:	bf08      	it	eq
   d6718:	ea90 0f02 	teqeq	r0, r2
   d671c:	d005      	beq.n	d672a <__adddf3+0x212>
   d671e:	ea54 0c00 	orrs.w	ip, r4, r0
   d6722:	bf04      	itt	eq
   d6724:	4619      	moveq	r1, r3
   d6726:	4610      	moveq	r0, r2
   d6728:	bd30      	pop	{r4, r5, pc}
   d672a:	ea91 0f03 	teq	r1, r3
   d672e:	bf1e      	ittt	ne
   d6730:	2100      	movne	r1, #0
   d6732:	2000      	movne	r0, #0
   d6734:	bd30      	popne	{r4, r5, pc}
   d6736:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d673a:	d105      	bne.n	d6748 <__adddf3+0x230>
   d673c:	0040      	lsls	r0, r0, #1
   d673e:	4149      	adcs	r1, r1
   d6740:	bf28      	it	cs
   d6742:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6746:	bd30      	pop	{r4, r5, pc}
   d6748:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d674c:	bf3c      	itt	cc
   d674e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6752:	bd30      	popcc	{r4, r5, pc}
   d6754:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6758:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d675c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6760:	f04f 0000 	mov.w	r0, #0
   d6764:	bd30      	pop	{r4, r5, pc}
   d6766:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d676a:	bf1a      	itte	ne
   d676c:	4619      	movne	r1, r3
   d676e:	4610      	movne	r0, r2
   d6770:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6774:	bf1c      	itt	ne
   d6776:	460b      	movne	r3, r1
   d6778:	4602      	movne	r2, r0
   d677a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d677e:	bf06      	itte	eq
   d6780:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6784:	ea91 0f03 	teqeq	r1, r3
   d6788:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d678c:	bd30      	pop	{r4, r5, pc}
   d678e:	bf00      	nop

000d6790 <__aeabi_ui2d>:
   d6790:	f090 0f00 	teq	r0, #0
   d6794:	bf04      	itt	eq
   d6796:	2100      	moveq	r1, #0
   d6798:	4770      	bxeq	lr
   d679a:	b530      	push	{r4, r5, lr}
   d679c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d67a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d67a4:	f04f 0500 	mov.w	r5, #0
   d67a8:	f04f 0100 	mov.w	r1, #0
   d67ac:	e750      	b.n	d6650 <__adddf3+0x138>
   d67ae:	bf00      	nop

000d67b0 <__aeabi_i2d>:
   d67b0:	f090 0f00 	teq	r0, #0
   d67b4:	bf04      	itt	eq
   d67b6:	2100      	moveq	r1, #0
   d67b8:	4770      	bxeq	lr
   d67ba:	b530      	push	{r4, r5, lr}
   d67bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d67c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d67c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d67c8:	bf48      	it	mi
   d67ca:	4240      	negmi	r0, r0
   d67cc:	f04f 0100 	mov.w	r1, #0
   d67d0:	e73e      	b.n	d6650 <__adddf3+0x138>
   d67d2:	bf00      	nop

000d67d4 <__aeabi_f2d>:
   d67d4:	0042      	lsls	r2, r0, #1
   d67d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d67da:	ea4f 0131 	mov.w	r1, r1, rrx
   d67de:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d67e2:	bf1f      	itttt	ne
   d67e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d67e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d67ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d67f0:	4770      	bxne	lr
   d67f2:	f092 0f00 	teq	r2, #0
   d67f6:	bf14      	ite	ne
   d67f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d67fc:	4770      	bxeq	lr
   d67fe:	b530      	push	{r4, r5, lr}
   d6800:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d680c:	e720      	b.n	d6650 <__adddf3+0x138>
   d680e:	bf00      	nop

000d6810 <__aeabi_ul2d>:
   d6810:	ea50 0201 	orrs.w	r2, r0, r1
   d6814:	bf08      	it	eq
   d6816:	4770      	bxeq	lr
   d6818:	b530      	push	{r4, r5, lr}
   d681a:	f04f 0500 	mov.w	r5, #0
   d681e:	e00a      	b.n	d6836 <__aeabi_l2d+0x16>

000d6820 <__aeabi_l2d>:
   d6820:	ea50 0201 	orrs.w	r2, r0, r1
   d6824:	bf08      	it	eq
   d6826:	4770      	bxeq	lr
   d6828:	b530      	push	{r4, r5, lr}
   d682a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d682e:	d502      	bpl.n	d6836 <__aeabi_l2d+0x16>
   d6830:	4240      	negs	r0, r0
   d6832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6836:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d683a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d683e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6842:	f43f aedc 	beq.w	d65fe <__adddf3+0xe6>
   d6846:	f04f 0203 	mov.w	r2, #3
   d684a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d684e:	bf18      	it	ne
   d6850:	3203      	addne	r2, #3
   d6852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6856:	bf18      	it	ne
   d6858:	3203      	addne	r2, #3
   d685a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d685e:	f1c2 0320 	rsb	r3, r2, #32
   d6862:	fa00 fc03 	lsl.w	ip, r0, r3
   d6866:	fa20 f002 	lsr.w	r0, r0, r2
   d686a:	fa01 fe03 	lsl.w	lr, r1, r3
   d686e:	ea40 000e 	orr.w	r0, r0, lr
   d6872:	fa21 f102 	lsr.w	r1, r1, r2
   d6876:	4414      	add	r4, r2
   d6878:	e6c1      	b.n	d65fe <__adddf3+0xe6>
   d687a:	bf00      	nop

000d687c <__cxa_atexit>:
   d687c:	b510      	push	{r4, lr}
   d687e:	4c05      	ldr	r4, [pc, #20]	; (d6894 <__cxa_atexit+0x18>)
   d6880:	4613      	mov	r3, r2
   d6882:	b12c      	cbz	r4, d6890 <__cxa_atexit+0x14>
   d6884:	460a      	mov	r2, r1
   d6886:	4601      	mov	r1, r0
   d6888:	2002      	movs	r0, #2
   d688a:	f3af 8000 	nop.w
   d688e:	bd10      	pop	{r4, pc}
   d6890:	4620      	mov	r0, r4
   d6892:	bd10      	pop	{r4, pc}
   d6894:	00000000 	.word	0x00000000

000d6898 <memcpy>:
   d6898:	b510      	push	{r4, lr}
   d689a:	1e43      	subs	r3, r0, #1
   d689c:	440a      	add	r2, r1
   d689e:	4291      	cmp	r1, r2
   d68a0:	d004      	beq.n	d68ac <memcpy+0x14>
   d68a2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d68a6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d68aa:	e7f8      	b.n	d689e <memcpy+0x6>
   d68ac:	bd10      	pop	{r4, pc}

000d68ae <memset>:
   d68ae:	4402      	add	r2, r0
   d68b0:	4603      	mov	r3, r0
   d68b2:	4293      	cmp	r3, r2
   d68b4:	d002      	beq.n	d68bc <memset+0xe>
   d68b6:	f803 1b01 	strb.w	r1, [r3], #1
   d68ba:	e7fa      	b.n	d68b2 <memset+0x4>
   d68bc:	4770      	bx	lr
	...

000d68c0 <srand>:
   d68c0:	b538      	push	{r3, r4, r5, lr}
   d68c2:	4b12      	ldr	r3, [pc, #72]	; (d690c <srand+0x4c>)
   d68c4:	681c      	ldr	r4, [r3, #0]
   d68c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d68c8:	4605      	mov	r5, r0
   d68ca:	b9d3      	cbnz	r3, d6902 <srand+0x42>
   d68cc:	2018      	movs	r0, #24
   d68ce:	f7fe fb11 	bl	d4ef4 <malloc>
   d68d2:	f243 330e 	movw	r3, #13070	; 0x330e
   d68d6:	63a0      	str	r0, [r4, #56]	; 0x38
   d68d8:	8003      	strh	r3, [r0, #0]
   d68da:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d68de:	8043      	strh	r3, [r0, #2]
   d68e0:	f241 2334 	movw	r3, #4660	; 0x1234
   d68e4:	8083      	strh	r3, [r0, #4]
   d68e6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d68ea:	80c3      	strh	r3, [r0, #6]
   d68ec:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d68f0:	8103      	strh	r3, [r0, #8]
   d68f2:	2305      	movs	r3, #5
   d68f4:	8143      	strh	r3, [r0, #10]
   d68f6:	230b      	movs	r3, #11
   d68f8:	8183      	strh	r3, [r0, #12]
   d68fa:	2201      	movs	r2, #1
   d68fc:	2300      	movs	r3, #0
   d68fe:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6902:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6904:	2200      	movs	r2, #0
   d6906:	611d      	str	r5, [r3, #16]
   d6908:	615a      	str	r2, [r3, #20]
   d690a:	bd38      	pop	{r3, r4, r5, pc}
   d690c:	2003b510 	.word	0x2003b510

000d6910 <strdup>:
   d6910:	4b02      	ldr	r3, [pc, #8]	; (d691c <strdup+0xc>)
   d6912:	4601      	mov	r1, r0
   d6914:	6818      	ldr	r0, [r3, #0]
   d6916:	f000 b803 	b.w	d6920 <_strdup_r>
   d691a:	bf00      	nop
   d691c:	2003b510 	.word	0x2003b510

000d6920 <_strdup_r>:
   d6920:	b570      	push	{r4, r5, r6, lr}
   d6922:	4606      	mov	r6, r0
   d6924:	4608      	mov	r0, r1
   d6926:	460c      	mov	r4, r1
   d6928:	f000 f80d 	bl	d6946 <strlen>
   d692c:	1c45      	adds	r5, r0, #1
   d692e:	4629      	mov	r1, r5
   d6930:	4630      	mov	r0, r6
   d6932:	f7fe faff 	bl	d4f34 <_malloc_r>
   d6936:	4606      	mov	r6, r0
   d6938:	b118      	cbz	r0, d6942 <_strdup_r+0x22>
   d693a:	462a      	mov	r2, r5
   d693c:	4621      	mov	r1, r4
   d693e:	f7ff ffab 	bl	d6898 <memcpy>
   d6942:	4630      	mov	r0, r6
   d6944:	bd70      	pop	{r4, r5, r6, pc}

000d6946 <strlen>:
   d6946:	4603      	mov	r3, r0
   d6948:	f813 2b01 	ldrb.w	r2, [r3], #1
   d694c:	2a00      	cmp	r2, #0
   d694e:	d1fb      	bne.n	d6948 <strlen+0x2>
   d6950:	1a18      	subs	r0, r3, r0
   d6952:	3801      	subs	r0, #1
   d6954:	4770      	bx	lr

000d6956 <strncpy>:
   d6956:	b510      	push	{r4, lr}
   d6958:	4603      	mov	r3, r0
   d695a:	b142      	cbz	r2, d696e <strncpy+0x18>
   d695c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6960:	f803 4b01 	strb.w	r4, [r3], #1
   d6964:	3a01      	subs	r2, #1
   d6966:	2c00      	cmp	r4, #0
   d6968:	d1f7      	bne.n	d695a <strncpy+0x4>
   d696a:	441a      	add	r2, r3
   d696c:	e000      	b.n	d6970 <strncpy+0x1a>
   d696e:	bd10      	pop	{r4, pc}
   d6970:	4293      	cmp	r3, r2
   d6972:	d002      	beq.n	d697a <strncpy+0x24>
   d6974:	f803 4b01 	strb.w	r4, [r3], #1
   d6978:	e7fa      	b.n	d6970 <strncpy+0x1a>
   d697a:	bd10      	pop	{r4, pc}

000d697c <dynalib_user>:
   d697c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d698c:	0000 0000 494c 3353 4844 6320 6e6f 6966     ....LIS3DH confi
   d699c:	7567 6172 6974 6e6f 6520 7272 726f 6500     guration error.e
   d69ac:	0076 494c 3353 4844 6320 6e6f 6966 7567     v.LIS3DH configu
   d69bc:	6572 2064 7573 6363 7365 6673 6c75 796c     red successfully
   d69cc:	2500 0064 6625 4400 6972 6576 6820 7361     .%d.%f.Drive has
   d69dc:	6520 646e 6465 002e 2058 7645 6e65 7374      ended..X Events
   d69ec:	003a 2059 7645 6e65 7374 003a 205a 7645     :.Y Events:.Z Ev
   d69fc:	6e65 7374 003a 7553 206d 666f 5820 003a     ents:.Sum of X:.
   d6a0c:	7553 206d 666f 5920 003a 7553 206d 666f     Sum of Y:.Sum of
   d6a1c:	5a20 003a 6f59 7275 5820 4120 6363 6c65      Z:.Your X Accel
   d6a2c:	7265 7461 6f69 206e 6353 726f 3a65 5900     eration Score:.Y
   d6a3c:	756f 2072 2059 6341 6563 656c 6172 6974     our Y Accelerati
   d6a4c:	6e6f 5320 6f63 6572 203a 5900 756f 2072     on Score: .Your 
   d6a5c:	205a 6341 6563 656c 6172 6974 6e6f 5320     Z Acceleration S
   d6a6c:	6f63 6572 203a 5900 756f 2072 6f54 6174     core: .Your Tota
   d6a7c:	206c 6353 726f 3a65 5800 5900 5a00 4c00     l Score:.X.Y.Z.L
   d6a8c:	5349 4433 0048 0000                         IS3DH...

000d6a94 <_ZTV15Adafruit_LIS3DH>:
	...
   d6a9c:	40b5 000d 4581 000d 40b3 000d 4a65 000d     .@...E...@..eJ..
   d6aac:	45c9 000d                                   .E..

000d6ab0 <_ZTVN5spark13EthernetClassE>:
	...
   d6ab8:	4fa3 000d 4f99 000d 4f8f 000d 4f85 000d     .O...O...O...O..
   d6ac8:	4f79 000d 4f6d 000d 4f61 000d 4f59 000d     yO..mO..aO..YO..
   d6ad8:	4f4f 000d 4f45 000d 5fed 000d               OO..EO..._..

000d6ae4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d6ae4:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d6af4:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d6b04:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d6b14:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d6b24:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d6b34:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d6b44:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d6b54:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d6b64:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   d6b74:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   d6b84:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
   d6b94:	6e66 6300 646f 0065 6564 6174 6c69 6e00     fn.code.detail.n
   d6ba4:	6e6f 0065 7274 6361 0065 6e69 6f66 7700     one.trace.info.w
   d6bb4:	7261 006e 6170 696e 0063 6c61 006c 2b25     arn.panic.all.%+
   d6bc4:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   d6bd4:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   d6be4:	6974 656d 0000 0000                         time....

000d6bec <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6bf4:	53ad 000d 53b3 000d 53f7 000d 53c1 000d     .S...S...S...S..
   d6c04:	53af 000d                                   .S..

000d6c08 <_ZTV9IPAddress>:
	...
   d6c10:	5945 000d 5935 000d 5937 000d               EY..5Y..7Y..

000d6c1c <_ZTV9USBSerial>:
	...
   d6c24:	5a1d 000d 5a6d 000d 5a7b 000d 5185 000d     .Z..mZ..{Z...Q..
   d6c34:	5a59 000d 5a1f 000d 5a35 000d 5a67 000d     YZ...Z..5Z..gZ..
   d6c44:	5a4b 000d 5a19 000d                         KZ...Z..

000d6c4c <_ZTV11USARTSerial>:
	...
   d6c54:	5b21 000d 5b71 000d 5b7f 000d 5185 000d     ![..q[...[...Q..
   d6c64:	5b35 000d 5b57 000d 5b43 000d 5b6b 000d     5[..W[..C[..k[..
   d6c74:	5b23 000d 5b27 000d                         #[..'[..

000d6c7c <_ZTV7TwoWire>:
	...
   d6c84:	5c81 000d 5ccb 000d 5ca3 000d 5c83 000d     .\...\...\...\..
   d6c94:	5cab 000d 5cb3 000d 5cbb 000d 5cc3 000d     .\...\...\...\..

000d6ca4 <_ZTVN5spark9MeshClassE>:
	...
   d6cac:	5ded 000d 5de3 000d 5dd9 000d 5dcf 000d     .]...]...]...]..
   d6cbc:	5dc3 000d 5db7 000d 5dab 000d 5da3 000d     .]...]...]...]..
   d6ccc:	5d99 000d 5d8f 000d 5fed 000d               .]...]..._..

000d6cd8 <_ZTVN5spark9WiFiClassE>:
	...
   d6ce0:	5f67 000d 5f5d 000d 5f53 000d 5f09 000d     g_..]_..S_..._..
   d6cf0:	5f47 000d 5f3b 000d 5f2f 000d 5f27 000d     G_..;_../_..'_..
   d6d00:	5f1d 000d 5f13 000d 5fed 000d               ._..._..._..

000d6d0c <_ZTVN5spark12NetworkClassE>:
	...
   d6d14:	5f85 000d 5f8f 000d 5f99 000d 5fa3 000d     ._..._..._..._..
   d6d24:	5fad 000d 5fb9 000d 5fc5 000d 5fd1 000d     ._..._..._..._..
   d6d34:	5fd9 000d 5fe3 000d 5fed 000d               ._..._..._..

000d6d40 <_ZSt7nothrow>:
   d6d40:	0000 0000                                   ....

000d6d44 <__sf_fake_stdin>:
	...

000d6d64 <__sf_fake_stdout>:
	...

000d6d84 <__sf_fake_stderr>:
	...
   d6da4:	0043                                        C.

000d6da6 <link_const_variable_data_end>:
	...

000d6da8 <link_constructors_location>:
   d6da8:	000d4591 	.word	0x000d4591
   d6dac:	000d45c5 	.word	0x000d45c5
   d6db0:	000d4a99 	.word	0x000d4a99
   d6db4:	000d4fad 	.word	0x000d4fad
   d6db8:	000d5109 	.word	0x000d5109
   d6dbc:	000d515d 	.word	0x000d515d
   d6dc0:	000d5219 	.word	0x000d5219
   d6dc4:	000d5229 	.word	0x000d5229
   d6dc8:	000d5281 	.word	0x000d5281
   d6dcc:	000d5eb9 	.word	0x000d5eb9
   d6dd0:	000d5f71 	.word	0x000d5f71
   d6dd4:	000d60b9 	.word	0x000d60b9
   d6dd8:	000d627d 	.word	0x000d627d
   d6ddc:	000d6301 	.word	0x000d6301
   d6de0:	000d63c5 	.word	0x000d63c5
   d6de4:	000d6489 	.word	0x000d6489

000d6de8 <link_constructors_end>:
	...
