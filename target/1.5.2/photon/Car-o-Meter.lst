
c:/Users/Chris/Desktop/Msc/IoT/Car-o-Meter/target/1.5.2/photon/Car-o-Meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002c84  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2ca0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a2ca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000210  20000068  20000068  00030068  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a2d0c  080a2d0c  00022d0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2d34  080a2d34  00022d34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c1d3e  00000000  00000000  00022d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010eba  00000000  00000000  000e4a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000129f0  00000000  00000000  000f5930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001e60  00000000  00000000  00108320  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003258  00000000  00000000  0010a180  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002718a  00000000  00000000  0010d3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00026594  00000000  00000000  00134562  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000aa9bf  00000000  00000000  0015aaf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b798  00000000  00000000  002054b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fc23 	bl	80a2878 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fc28 	bl	80a288e <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2ca4 	.word	0x080a2ca4
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	20000278 	.word	0x20000278
 80a0058:	20000278 	.word	0x20000278

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 ff81 	bl	80a0f64 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2c68 	.word	0x080a2c68
 80a0084:	080a2ca0 	.word	0x080a2ca0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b840 	b.w	80a010c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f871 	bl	80a0174 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bf27 	b.w	80a0ee8 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bd73 	b.w	80a0b84 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bd79 	b.w	80a0b94 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
 80a00b2:	4770      	bx	lr

080a00b4 <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_ZN10CloudClass7publishEPKcS1_i.isra.4.constprop.6>:

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data, int ttl) {
 80a00b8:	b513      	push	{r0, r1, r4, lr}
 80a00ba:	4604      	mov	r4, r0
 80a00bc:	4b05      	ldr	r3, [pc, #20]	; (80a00d4 <_ZN10CloudClass7publishEPKcS1_i.isra.4.constprop.6+0x1c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a00be:	4a06      	ldr	r2, [pc, #24]	; (80a00d8 <_ZN10CloudClass7publishEPKcS1_i.isra.4.constprop.6+0x20>)
 80a00c0:	781b      	ldrb	r3, [r3, #0]
 80a00c2:	f88d 3000 	strb.w	r3, [sp]
 80a00c6:	460b      	mov	r3, r1
 80a00c8:	4904      	ldr	r1, [pc, #16]	; (80a00dc <_ZN10CloudClass7publishEPKcS1_i.isra.4.constprop.6+0x24>)
 80a00ca:	f001 f8b9 	bl	80a1240 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data, int ttl) {
    return publish(name, data, ttl, PUBLIC);
}
 80a00ce:	4620      	mov	r0, r4
 80a00d0:	b002      	add	sp, #8
 80a00d2:	bd10      	pop	{r4, pc}
 80a00d4:	2000006c 	.word	0x2000006c
 80a00d8:	080a2970 	.word	0x080a2970
 80a00dc:	080a2973 	.word	0x080a2973

080a00e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a00e0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a00e2:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a00e4:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a00e6:	b17c      	cbz	r4, 80a0108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a00e8:	6863      	ldr	r3, [r4, #4]
 80a00ea:	3b01      	subs	r3, #1
 80a00ec:	6063      	str	r3, [r4, #4]
 80a00ee:	b95b      	cbnz	r3, 80a0108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a00f0:	6823      	ldr	r3, [r4, #0]
 80a00f2:	4620      	mov	r0, r4
 80a00f4:	689b      	ldr	r3, [r3, #8]
 80a00f6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a00f8:	68a3      	ldr	r3, [r4, #8]
 80a00fa:	3b01      	subs	r3, #1
 80a00fc:	60a3      	str	r3, [r4, #8]
 80a00fe:	b91b      	cbnz	r3, 80a0108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0100:	6823      	ldr	r3, [r4, #0]
 80a0102:	4620      	mov	r0, r4
 80a0104:	68db      	ldr	r3, [r3, #12]
 80a0106:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a0108:	4628      	mov	r0, r5
 80a010a:	bd38      	pop	{r3, r4, r5, pc}

080a010c <setup>:
 80a010c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a010e:	2118      	movs	r1, #24
 80a0110:	4813      	ldr	r0, [pc, #76]	; (80a0160 <setup+0x54>)
 80a0112:	f000 fa08 	bl	80a0526 <_ZN15Adafruit_LIS3DH5beginEh>
 80a0116:	4c13      	ldr	r4, [pc, #76]	; (80a0164 <setup+0x58>)
 80a0118:	b958      	cbnz	r0, 80a0132 <setup+0x26>
 80a011a:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a011c:	a802      	add	r0, sp, #8
 80a011e:	f88d 3000 	strb.w	r3, [sp]
 80a0122:	4a11      	ldr	r2, [pc, #68]	; (80a0168 <setup+0x5c>)
 80a0124:	233c      	movs	r3, #60	; 0x3c
 80a0126:	4911      	ldr	r1, [pc, #68]	; (80a016c <setup+0x60>)
 80a0128:	f001 f88a 	bl	80a1240 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a012c:	a803      	add	r0, sp, #12
 80a012e:	f7ff ffd7 	bl	80a00e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0132:	2101      	movs	r1, #1
 80a0134:	480a      	ldr	r0, [pc, #40]	; (80a0160 <setup+0x54>)
 80a0136:	f000 f9cd 	bl	80a04d4 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>
 80a013a:	7823      	ldrb	r3, [r4, #0]
 80a013c:	4a0c      	ldr	r2, [pc, #48]	; (80a0170 <setup+0x64>)
 80a013e:	490b      	ldr	r1, [pc, #44]	; (80a016c <setup+0x60>)
 80a0140:	f88d 3000 	strb.w	r3, [sp]
 80a0144:	a802      	add	r0, sp, #8
 80a0146:	233c      	movs	r3, #60	; 0x3c
 80a0148:	f001 f87a 	bl	80a1240 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a014c:	a803      	add	r0, sp, #12
 80a014e:	f7ff ffc7 	bl	80a00e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0152:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0156:	f000 fe65 	bl	80a0e24 <delay>
 80a015a:	b004      	add	sp, #16
 80a015c:	bd10      	pop	{r4, pc}
 80a015e:	bf00      	nop
 80a0160:	20000070 	.word	0x20000070
 80a0164:	2000006c 	.word	0x2000006c
 80a0168:	080a2976 	.word	0x080a2976
 80a016c:	080a2973 	.word	0x080a2973
 80a0170:	080a2991 	.word	0x080a2991

080a0174 <loop>:
 80a0174:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a0178:	4c29      	ldr	r4, [pc, #164]	; (80a0220 <loop+0xac>)
 80a017a:	482a      	ldr	r0, [pc, #168]	; (80a0224 <loop+0xb0>)
 80a017c:	4621      	mov	r1, r4
 80a017e:	f000 fadc 	bl	80a073a <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>
 80a0182:	6960      	ldr	r0, [r4, #20]
 80a0184:	f002 f890 	bl	80a22a8 <__aeabi_f2d>
 80a0188:	4680      	mov	r8, r0
 80a018a:	4689      	mov	r9, r1
 80a018c:	4f26      	ldr	r7, [pc, #152]	; (80a0228 <loop+0xb4>)
 80a018e:	69a0      	ldr	r0, [r4, #24]
 80a0190:	e9c7 8900 	strd	r8, r9, [r7]
 80a0194:	f002 f888 	bl	80a22a8 <__aeabi_f2d>
 80a0198:	4e24      	ldr	r6, [pc, #144]	; (80a022c <loop+0xb8>)
 80a019a:	4d25      	ldr	r5, [pc, #148]	; (80a0230 <loop+0xbc>)
 80a019c:	e9c6 0100 	strd	r0, r1, [r6]
 80a01a0:	69e0      	ldr	r0, [r4, #28]
 80a01a2:	f002 f881 	bl	80a22a8 <__aeabi_f2d>
 80a01a6:	4c23      	ldr	r4, [pc, #140]	; (80a0234 <loop+0xc0>)
 80a01a8:	e9c5 0100 	strd	r0, r1, [r5]
 80a01ac:	4642      	mov	r2, r8
 80a01ae:	464b      	mov	r3, r9
 80a01b0:	4621      	mov	r1, r4
 80a01b2:	4821      	ldr	r0, [pc, #132]	; (80a0238 <loop+0xc4>)
 80a01b4:	f000 fcf6 	bl	80a0ba4 <sprintf>
 80a01b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a01bc:	4621      	mov	r1, r4
 80a01be:	481f      	ldr	r0, [pc, #124]	; (80a023c <loop+0xc8>)
 80a01c0:	f000 fcf0 	bl	80a0ba4 <sprintf>
 80a01c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a01c8:	4621      	mov	r1, r4
 80a01ca:	481d      	ldr	r0, [pc, #116]	; (80a0240 <loop+0xcc>)
 80a01cc:	f000 fcea 	bl	80a0ba4 <sprintf>
 80a01d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80a01d4:	f002 f8bc 	bl	80a2350 <__aeabi_d2iz>
 80a01d8:	4601      	mov	r1, r0
 80a01da:	4668      	mov	r0, sp
 80a01dc:	f7ff ff6c 	bl	80a00b8 <_ZN10CloudClass7publishEPKcS1_i.isra.4.constprop.6>
 80a01e0:	a801      	add	r0, sp, #4
 80a01e2:	f7ff ff7d 	bl	80a00e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a01e6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80a01ea:	f002 f8b1 	bl	80a2350 <__aeabi_d2iz>
 80a01ee:	4601      	mov	r1, r0
 80a01f0:	4668      	mov	r0, sp
 80a01f2:	f7ff ff61 	bl	80a00b8 <_ZN10CloudClass7publishEPKcS1_i.isra.4.constprop.6>
 80a01f6:	a801      	add	r0, sp, #4
 80a01f8:	f7ff ff72 	bl	80a00e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a01fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80a0200:	f002 f8a6 	bl	80a2350 <__aeabi_d2iz>
 80a0204:	4601      	mov	r1, r0
 80a0206:	4668      	mov	r0, sp
 80a0208:	f7ff ff56 	bl	80a00b8 <_ZN10CloudClass7publishEPKcS1_i.isra.4.constprop.6>
 80a020c:	a801      	add	r0, sp, #4
 80a020e:	f7ff ff67 	bl	80a00e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0216:	f000 fe05 	bl	80a0e24 <delay>
 80a021a:	b003      	add	sp, #12
 80a021c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0220:	200000e0 	.word	0x200000e0
 80a0224:	20000070 	.word	0x20000070
 80a0228:	200000d8 	.word	0x200000d8
 80a022c:	200000c0 	.word	0x200000c0
 80a0230:	200000a0 	.word	0x200000a0
 80a0234:	080a2970 	.word	0x080a2970
 80a0238:	200000a8 	.word	0x200000a8
 80a023c:	200000b2 	.word	0x200000b2
 80a0240:	200000c8 	.word	0x200000c8

080a0244 <_ZN15Adafruit_LIS3DHD0Ev>:
 80a0244:	b510      	push	{r4, lr}
 80a0246:	4604      	mov	r4, r0
 80a0248:	212c      	movs	r1, #44	; 0x2c
 80a024a:	f001 fd6b 	bl	80a1d24 <_ZdlPvj>
 80a024e:	4620      	mov	r0, r4
 80a0250:	bd10      	pop	{r4, pc}
	...

080a0254 <_GLOBAL__sub_I_lis>:
 80a0254:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0256:	4b08      	ldr	r3, [pc, #32]	; (80a0278 <_GLOBAL__sub_I_lis+0x24>)
 80a0258:	4c08      	ldr	r4, [pc, #32]	; (80a027c <_GLOBAL__sub_I_lis+0x28>)
 80a025a:	2200      	movs	r2, #0
 80a025c:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a025e:	f000 fa89 	bl	80a0774 <HAL_Pin_Map>
 80a0262:	4620      	mov	r0, r4
 80a0264:	f000 f83a 	bl	80a02dc <_ZN15Adafruit_LIS3DHC1Ev>
 80a0268:	4620      	mov	r0, r4
 80a026a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a026e:	4a04      	ldr	r2, [pc, #16]	; (80a0280 <_GLOBAL__sub_I_lis+0x2c>)
 80a0270:	4904      	ldr	r1, [pc, #16]	; (80a0284 <_GLOBAL__sub_I_lis+0x30>)
 80a0272:	f001 bd49 	b.w	80a1d08 <__aeabi_atexit>
 80a0276:	bf00      	nop
 80a0278:	2000006c 	.word	0x2000006c
 80a027c:	20000070 	.word	0x20000070
 80a0280:	20000068 	.word	0x20000068
 80a0284:	080a00b5 	.word	0x080a00b5

080a0288 <_GLOBAL__sub_I__ZN12LIS3DHConfigC2Ev>:
 80a0288:	f000 ba74 	b.w	80a0774 <HAL_Pin_Map>

080a028c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a028c:	b510      	push	{r4, lr}
 80a028e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0290:	6880      	ldr	r0, [r0, #8]
 80a0292:	b108      	cbz	r0, 80a0298 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a0294:	f000 faee 	bl	80a0874 <os_mutex_recursive_destroy>
 80a0298:	4620      	mov	r0, r4
 80a029a:	bd10      	pop	{r4, pc}

080a029c <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
 80a029c:	b538      	push	{r3, r4, r5, lr}
 80a029e:	460c      	mov	r4, r1
 80a02a0:	4605      	mov	r5, r0
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
 80a02a2:	2228      	movs	r2, #40	; 0x28
 80a02a4:	2100      	movs	r1, #0
 80a02a6:	4620      	mov	r0, r4
 80a02a8:	f002 faf1 	bl	80a288e <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
 80a02ac:	220b      	movs	r2, #11
 80a02ae:	4908      	ldr	r1, [pc, #32]	; (80a02d0 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
 80a02b0:	4620      	mov	r0, r4
 80a02b2:	f002 fb40 	bl	80a2936 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
 80a02b6:	2300      	movs	r3, #0
  sensor->version     = 1;
 80a02b8:	2201      	movs	r2, #1
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
 80a02ba:	72e3      	strb	r3, [r4, #11]
  sensor->version     = 1;
 80a02bc:	60e2      	str	r2, [r4, #12]
  sensor->sensor_id   = _sensorID;
 80a02be:	69a9      	ldr	r1, [r5, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
 80a02c0:	6263      	str	r3, [r4, #36]	; 0x24
  sensor->max_value   = 0;
 80a02c2:	2300      	movs	r3, #0

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
  sensor->name[sizeof(sensor->name)- 1] = 0;
  sensor->version     = 1;
  sensor->sensor_id   = _sensorID;
 80a02c4:	6121      	str	r1, [r4, #16]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
 80a02c6:	6162      	str	r2, [r4, #20]
  sensor->min_delay   = 0;
  sensor->max_value   = 0;
 80a02c8:	61a3      	str	r3, [r4, #24]
  sensor->min_value   = 0;
 80a02ca:	61e3      	str	r3, [r4, #28]
  sensor->resolution  = 0;
 80a02cc:	6223      	str	r3, [r4, #32]
 80a02ce:	bd38      	pop	{r3, r4, r5, pc}
 80a02d0:	080a29b0 	.word	0x080a29b0

080a02d4 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a02d4:	6803      	ldr	r3, [r0, #0]
 80a02d6:	b2c9      	uxtb	r1, r1
 80a02d8:	689b      	ldr	r3, [r3, #8]
 80a02da:	4718      	bx	r3

080a02dc <_ZN15Adafruit_LIS3DHC1Ev>:
    @brief  Instantiates a new LIS3DH class in I2C or SPI mode
*/
/**************************************************************************/
// I2C
Adafruit_LIS3DH::Adafruit_LIS3DH()
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
 80a02dc:	4a06      	ldr	r2, [pc, #24]	; (80a02f8 <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
 80a02de:	21ff      	movs	r1, #255	; 0xff
 80a02e0:	6002      	str	r2, [r0, #0]
 80a02e2:	f04f 32ff 	mov.w	r2, #4294967295
 80a02e6:	6182      	str	r2, [r0, #24]
 80a02e8:	7742      	strb	r2, [r0, #29]
 80a02ea:	77c2      	strb	r2, [r0, #31]
 80a02ec:	f880 2020 	strb.w	r2, [r0, #32]
 80a02f0:	2211      	movs	r2, #17
 80a02f2:	7781      	strb	r1, [r0, #30]
 80a02f4:	6242      	str	r2, [r0, #36]	; 0x24
{
}
 80a02f6:	4770      	bx	lr
 80a02f8:	080a29c0 	.word	0x080a29c0

080a02fc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 80a02fc:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80a02fe:	4d0b      	ldr	r5, [pc, #44]	; (80a032c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x30>)
 80a0300:	6829      	ldr	r1, [r5, #0]
 80a0302:	f011 0401 	ands.w	r4, r1, #1
 80a0306:	d10f      	bne.n	80a0328 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>
 80a0308:	4628      	mov	r0, r5
 80a030a:	f7ff feca 	bl	80a00a2 <__cxa_guard_acquire>
 80a030e:	b158      	cbz	r0, 80a0328 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>
 80a0310:	4621      	mov	r1, r4
 80a0312:	4807      	ldr	r0, [pc, #28]	; (80a0330 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a0314:	f000 fc64 	bl	80a0be0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0318:	4628      	mov	r0, r5
 80a031a:	f7ff fec7 	bl	80a00ac <__cxa_guard_release>
 80a031e:	4a05      	ldr	r2, [pc, #20]	; (80a0334 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x38>)
 80a0320:	4905      	ldr	r1, [pc, #20]	; (80a0338 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x3c>)
 80a0322:	4803      	ldr	r0, [pc, #12]	; (80a0330 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a0324:	f001 fcf0 	bl	80a1d08 <__aeabi_atexit>
        return instance;
    }
 80a0328:	4801      	ldr	r0, [pc, #4]	; (80a0330 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a032a:	bd38      	pop	{r3, r4, r5, pc}
 80a032c:	20000104 	.word	0x20000104
 80a0330:	20000108 	.word	0x20000108
 80a0334:	20000068 	.word	0x20000068
 80a0338:	080a028d 	.word	0x080a028d

080a033c <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 80a033c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
 80a0340:	f990 3020 	ldrsb.w	r3, [r0, #32]
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 80a0344:	4605      	mov	r5, r0
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
 80a0346:	3301      	adds	r3, #1
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
 80a0348:	460f      	mov	r7, r1
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
 80a034a:	d106      	bne.n	80a035a <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 80a034c:	f7ff ffd6 	bl	80a02fc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a0350:	4639      	mov	r1, r7
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
 80a0352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a0356:	f000 bcca 	b.w	80a0cee <_ZN8SPIClass8transferEh>
 80a035a:	2607      	movs	r6, #7
 80a035c:	2400      	movs	r4, #0
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
 80a035e:	f04f 0801 	mov.w	r8, #1
  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_sck, LOW);
 80a0362:	f995 0020 	ldrsb.w	r0, [r5, #32]
 80a0366:	2100      	movs	r1, #0
 80a0368:	b280      	uxth	r0, r0
 80a036a:	f001 fc48 	bl	80a1bfe <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
 80a036e:	f995 001e 	ldrsb.w	r0, [r5, #30]
 80a0372:	fa08 f106 	lsl.w	r1, r8, r6
 80a0376:	4039      	ands	r1, r7
 80a0378:	b280      	uxth	r0, r0
 80a037a:	f001 fc40 	bl	80a1bfe <digitalWrite>
    digitalWrite(_sck, HIGH);
 80a037e:	f995 0020 	ldrsb.w	r0, [r5, #32]
 80a0382:	2101      	movs	r1, #1
 80a0384:	b280      	uxth	r0, r0
 80a0386:	f001 fc3a 	bl	80a1bfe <digitalWrite>
    if (digitalRead(_miso))
 80a038a:	f995 001f 	ldrsb.w	r0, [r5, #31]

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 80a038e:	0064      	lsls	r4, r4, #1
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
 80a0390:	b280      	uxth	r0, r0

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 80a0392:	b2e4      	uxtb	r4, r4
    digitalWrite(_sck, LOW);
    digitalWrite(_mosi, x & (1<<i));
    digitalWrite(_sck, HIGH);
    if (digitalRead(_miso))
 80a0394:	f001 fc4c 	bl	80a1c30 <digitalRead>
 80a0398:	b108      	cbz	r0, 80a039e <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
 80a039a:	f044 0401 	orr.w	r4, r4, #1
    return SPI.transfer(x);

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
 80a039e:	f116 36ff 	adds.w	r6, r6, #4294967295
 80a03a2:	d2de      	bcs.n	80a0362 <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
 80a03a4:	4620      	mov	r0, r4
 80a03a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a03ac <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
 80a03ac:	b508      	push	{r3, lr}
    }
    void end() {
        instance().end();
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
 80a03ae:	f7ff ffa5 	bl	80a02fc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a03b2:	2101      	movs	r1, #1
 80a03b4:	f000 fc33 	bl	80a0c1e <_ZN8SPIClass11setBitOrderEh>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
 80a03b8:	f7ff ffa0 	bl	80a02fc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a03bc:	4905      	ldr	r1, [pc, #20]	; (80a03d4 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
 80a03be:	2201      	movs	r2, #1
 80a03c0:	f000 fc64 	bl	80a0c8c <_ZN8SPIClass13setClockSpeedEjj>
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
 80a03c4:	f7ff ff9a 	bl	80a02fc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
 80a03c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a03cc:	2100      	movs	r1, #0
 80a03ce:	f000 bc36 	b.w	80a0c3e <_ZN8SPIClass11setDataModeEh>
 80a03d2:	bf00      	nop
 80a03d4:	0007a120 	.word	0x0007a120

080a03d8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 80a03d8:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
 80a03da:	f990 301d 	ldrsb.w	r3, [r0, #29]
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 80a03de:	4604      	mov	r4, r0
  if (_cs == -1) {
 80a03e0:	3301      	adds	r3, #1
/**************************************************************************/
/*!
    @brief  Writes 8-bits to the specified destination register
*/
/**************************************************************************/
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
 80a03e2:	460e      	mov	r6, r1
 80a03e4:	4615      	mov	r5, r2
  if (_cs == -1) {
 80a03e6:	d116      	bne.n	80a0416 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
 80a03e8:	f001 fc68 	bl	80a1cbc <_Z19__fetch_global_Wirev>
 80a03ec:	7f21      	ldrb	r1, [r4, #28]
 80a03ee:	f001 fae4 	bl	80a19ba <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
 80a03f2:	f001 fc63 	bl	80a1cbc <_Z19__fetch_global_Wirev>
 80a03f6:	6803      	ldr	r3, [r0, #0]
 80a03f8:	4631      	mov	r1, r6
 80a03fa:	689b      	ldr	r3, [r3, #8]
 80a03fc:	4798      	blx	r3
    Wire.write((uint8_t)value);
 80a03fe:	f001 fc5d 	bl	80a1cbc <_Z19__fetch_global_Wirev>
 80a0402:	6803      	ldr	r3, [r0, #0]
 80a0404:	4629      	mov	r1, r5
 80a0406:	689b      	ldr	r3, [r3, #8]
 80a0408:	4798      	blx	r3
    Wire.endTransmission();
 80a040a:	f001 fc57 	bl	80a1cbc <_Z19__fetch_global_Wirev>
    digitalWrite(_cs, HIGH);
    if (_sck == -1)
    	endTransaction();
  }
  #endif
}
 80a040e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
  if (_cs == -1) {
    Wire.beginTransmission((uint8_t)_i2caddr);
    Wire.write((uint8_t)reg);
    Wire.write((uint8_t)value);
    Wire.endTransmission();
 80a0412:	f001 badd 	b.w	80a19d0 <_ZN7TwoWire15endTransmissionEv>
  }
  #ifndef __AVR_ATtiny85__
  else {
	if (_sck == -1)
 80a0416:	f990 3020 	ldrsb.w	r3, [r0, #32]
 80a041a:	3301      	adds	r3, #1
 80a041c:	d101      	bne.n	80a0422 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
 80a041e:	f7ff ffc5 	bl	80a03ac <_ZN15Adafruit_LIS3DH16beginTransactionEv>

    digitalWrite(_cs, LOW);
 80a0422:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a0426:	2100      	movs	r1, #0
 80a0428:	b280      	uxth	r0, r0
 80a042a:	f001 fbe8 	bl	80a1bfe <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
 80a042e:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 80a0432:	4620      	mov	r0, r4
 80a0434:	f7ff ff82 	bl	80a033c <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
 80a0438:	4629      	mov	r1, r5
 80a043a:	4620      	mov	r0, r4
 80a043c:	f7ff ff7e 	bl	80a033c <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
 80a0440:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a0444:	2101      	movs	r1, #1
 80a0446:	b280      	uxth	r0, r0
    if (_sck == -1)
    	endTransaction();
  }
  #endif
}
 80a0448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  beginTransaction();

    digitalWrite(_cs, LOW);
    spixfer(reg & ~0x80); // write, bit 7 low
    spixfer(value);
    digitalWrite(_cs, HIGH);
 80a044c:	f001 bbd7 	b.w	80a1bfe <digitalWrite>

080a0450 <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 80a0450:	b538      	push	{r3, r4, r5, lr}
  uint8_t value;

  if (_cs == -1) {
 80a0452:	f990 301d 	ldrsb.w	r3, [r0, #29]
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 80a0456:	4604      	mov	r4, r0
  uint8_t value;

  if (_cs == -1) {
 80a0458:	3301      	adds	r3, #1
/**************************************************************************/
/*!
    @brief  Reads 8-bits from the specified register
*/
/**************************************************************************/
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
 80a045a:	460d      	mov	r5, r1
  uint8_t value;

  if (_cs == -1) {
 80a045c:	d11c      	bne.n	80a0498 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x48>
    Wire.beginTransmission(_i2caddr);
 80a045e:	f001 fc2d 	bl	80a1cbc <_Z19__fetch_global_Wirev>
 80a0462:	f994 101c 	ldrsb.w	r1, [r4, #28]
 80a0466:	f001 faac 	bl	80a19c2 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
 80a046a:	f001 fc27 	bl	80a1cbc <_Z19__fetch_global_Wirev>
 80a046e:	6803      	ldr	r3, [r0, #0]
 80a0470:	4629      	mov	r1, r5
 80a0472:	689b      	ldr	r3, [r3, #8]
 80a0474:	4798      	blx	r3
    Wire.endTransmission();
 80a0476:	f001 fc21 	bl	80a1cbc <_Z19__fetch_global_Wirev>
 80a047a:	f001 faa9 	bl	80a19d0 <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(_i2caddr, 1);
 80a047e:	f001 fc1d 	bl	80a1cbc <_Z19__fetch_global_Wirev>
 80a0482:	2201      	movs	r2, #1
 80a0484:	7f21      	ldrb	r1, [r4, #28]
 80a0486:	f001 fa95 	bl	80a19b4 <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
 80a048a:	f001 fc17 	bl	80a1cbc <_Z19__fetch_global_Wirev>
 80a048e:	6803      	ldr	r3, [r0, #0]
 80a0490:	695b      	ldr	r3, [r3, #20]
 80a0492:	4798      	blx	r3
 80a0494:	b2c5      	uxtb	r5, r0
 80a0496:	e01b      	b.n	80a04d0 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x80>
  }
  #ifndef __AVR_ATtiny85__
  else {
	if (_sck == -1)
 80a0498:	f990 3020 	ldrsb.w	r3, [r0, #32]
 80a049c:	3301      	adds	r3, #1
 80a049e:	d101      	bne.n	80a04a4 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x54>
	  beginTransaction();
 80a04a0:	f7ff ff84 	bl	80a03ac <_ZN15Adafruit_LIS3DH16beginTransactionEv>

	digitalWrite(_cs, LOW);
 80a04a4:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a04a8:	2100      	movs	r1, #0
 80a04aa:	b280      	uxth	r0, r0
 80a04ac:	f001 fba7 	bl	80a1bfe <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
 80a04b0:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a04b4:	4620      	mov	r0, r4
 80a04b6:	f7ff ff41 	bl	80a033c <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
 80a04ba:	2100      	movs	r1, #0
 80a04bc:	4620      	mov	r0, r4
 80a04be:	f7ff ff3d 	bl	80a033c <_ZN15Adafruit_LIS3DH7spixferEh>
 80a04c2:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
 80a04c4:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a04c8:	2101      	movs	r1, #1
 80a04ca:	b280      	uxth	r0, r0
 80a04cc:	f001 fb97 	bl	80a1bfe <digitalWrite>
    if (_sck == -1)
    	endTransaction();
  }
  #endif
  return value;
}
 80a04d0:	4628      	mov	r0, r5
 80a04d2:	bd38      	pop	{r3, r4, r5, pc}

080a04d4 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>:
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
void Adafruit_LIS3DH::setRange(lis3dh_range_t range)
{
 80a04d4:	b538      	push	{r3, r4, r5, lr}
 80a04d6:	460d      	mov	r5, r1
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
 80a04d8:	2123      	movs	r1, #35	; 0x23
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
void Adafruit_LIS3DH::setRange(lis3dh_range_t range)
{
 80a04da:	4604      	mov	r4, r0
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
 80a04dc:	f7ff ffb8 	bl	80a0450 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  r &= ~(0x30);
  r |= range << 4;
 80a04e0:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 80a04e4:	ea40 1205 	orr.w	r2, r0, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL4, r);
 80a04e8:	b2d2      	uxtb	r2, r2
 80a04ea:	4620      	mov	r0, r4
}
 80a04ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_LIS3DH::setRange(lis3dh_range_t range)
{
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
  r &= ~(0x30);
  r |= range << 4;
  writeRegister8(LIS3DH_REG_CTRL4, r);
 80a04f0:	2123      	movs	r1, #35	; 0x23
 80a04f2:	f7ff bf71 	b.w	80a03d8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

080a04f6 <_ZN15Adafruit_LIS3DH8getRangeEv>:
/*!
    @brief  Sets the g range for the accelerometer
*/
/**************************************************************************/
lis3dh_range_t Adafruit_LIS3DH::getRange(void)
{
 80a04f6:	b508      	push	{r3, lr}
  /* Read the data format register to preserve bits */
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
 80a04f8:	2123      	movs	r1, #35	; 0x23
 80a04fa:	f7ff ffa9 	bl	80a0450 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
 80a04fe:	f3c0 1001 	ubfx	r0, r0, #4, #2
 80a0502:	bd08      	pop	{r3, pc}

080a0504 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
/*!
    @brief  Sets the data rate for the LIS3DH (controls power consumption)
*/
/**************************************************************************/
void Adafruit_LIS3DH::setDataRate(lis3dh_dataRate_t dataRate)
{
 80a0504:	b538      	push	{r3, r4, r5, lr}
 80a0506:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
 80a0508:	2120      	movs	r1, #32
/*!
    @brief  Sets the data rate for the LIS3DH (controls power consumption)
*/
/**************************************************************************/
void Adafruit_LIS3DH::setDataRate(lis3dh_dataRate_t dataRate)
{
 80a050a:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
 80a050c:	f7ff ffa0 	bl	80a0450 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
  ctl1 |= (dataRate << 4);
 80a0510:	f000 000f 	and.w	r0, r0, #15
 80a0514:	ea40 1205 	orr.w	r2, r0, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
 80a0518:	b2d2      	uxtb	r2, r2
 80a051a:	4620      	mov	r0, r4
}
 80a051c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_LIS3DH::setDataRate(lis3dh_dataRate_t dataRate)
{
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
  ctl1 &= ~(0xF0); // mask off bits
  ctl1 |= (dataRate << 4);
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
 80a0520:	2120      	movs	r1, #32
 80a0522:	f7ff bf59 	b.w	80a03d8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

080a0526 <_ZN15Adafruit_LIS3DH5beginEh>:
/**************************************************************************/
/*!
    @brief  Setups the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
 80a0526:	b510      	push	{r4, lr}
 80a0528:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
 80a052a:	7701      	strb	r1, [r0, #28]


  if (_cs == -1) {
 80a052c:	f990 001d 	ldrsb.w	r0, [r0, #29]
 80a0530:	1c42      	adds	r2, r0, #1
 80a0532:	d104      	bne.n	80a053e <_ZN15Adafruit_LIS3DH5beginEh+0x18>
    // i2c
    Wire.begin();
 80a0534:	f001 fbc2 	bl	80a1cbc <_Z19__fetch_global_Wirev>
 80a0538:	f001 fa08 	bl	80a194c <_ZN7TwoWire5beginEv>
 80a053c:	e022      	b.n	80a0584 <_ZN15Adafruit_LIS3DH5beginEh+0x5e>
  } else {
    digitalWrite(_cs, HIGH);
 80a053e:	2101      	movs	r1, #1
 80a0540:	b280      	uxth	r0, r0
 80a0542:	f001 fb5c 	bl	80a1bfe <digitalWrite>
    pinMode(_cs, OUTPUT);
 80a0546:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a054a:	2101      	movs	r1, #1
 80a054c:	b280      	uxth	r0, r0
 80a054e:	f001 fb45 	bl	80a1bdc <pinMode>

#ifndef __AVR_ATtiny85__
    if (_sck == -1) {
 80a0552:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a0556:	1c43      	adds	r3, r0, #1
 80a0558:	d104      	bne.n	80a0564 <_ZN15Adafruit_LIS3DH5beginEh+0x3e>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
 80a055a:	f7ff fecf 	bl	80a02fc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a055e:	f000 fb4e 	bl	80a0bfe <_ZN8SPIClass5beginEv>
 80a0562:	e00f      	b.n	80a0584 <_ZN15Adafruit_LIS3DH5beginEh+0x5e>
      // hardware SPI
      SPI.begin();
    } else {
      // software SPI
      pinMode(_sck, OUTPUT);
 80a0564:	2101      	movs	r1, #1
 80a0566:	b280      	uxth	r0, r0
 80a0568:	f001 fb38 	bl	80a1bdc <pinMode>
      pinMode(_mosi, OUTPUT);
 80a056c:	f994 001e 	ldrsb.w	r0, [r4, #30]
 80a0570:	2101      	movs	r1, #1
 80a0572:	b280      	uxth	r0, r0
 80a0574:	f001 fb32 	bl	80a1bdc <pinMode>
      pinMode(_miso, INPUT);
 80a0578:	f994 001f 	ldrsb.w	r0, [r4, #31]
 80a057c:	2100      	movs	r1, #0
 80a057e:	b280      	uxth	r0, r0
 80a0580:	f001 fb2c 	bl	80a1bdc <pinMode>
    Serial.println(readRegister8(i), HEX);
  }
  */

  /* Check connection */
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
 80a0584:	210f      	movs	r1, #15
 80a0586:	4620      	mov	r0, r4
 80a0588:	f7ff ff62 	bl	80a0450 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
 80a058c:	2833      	cmp	r0, #51	; 0x33
 80a058e:	d119      	bne.n	80a05c4 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
    //Serial.println(deviceid, HEX);
    return false;
  }

  // enable all axes, normal mode
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
 80a0590:	2207      	movs	r2, #7
 80a0592:	4620      	mov	r0, r4
 80a0594:	2120      	movs	r1, #32
 80a0596:	f7ff ff1f 	bl	80a03d8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  // 400Hz rate
  setDataRate(LIS3DH_DATARATE_400_HZ);
 80a059a:	4620      	mov	r0, r4
 80a059c:	2107      	movs	r1, #7
 80a059e:	f7ff ffb1 	bl	80a0504 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>

  // High res & BDU enabled
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
 80a05a2:	4620      	mov	r0, r4
 80a05a4:	2288      	movs	r2, #136	; 0x88
 80a05a6:	2123      	movs	r1, #35	; 0x23
 80a05a8:	f7ff ff16 	bl	80a03d8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

  // DRDY on INT1
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
 80a05ac:	4620      	mov	r0, r4
 80a05ae:	2210      	movs	r2, #16
 80a05b0:	2122      	movs	r1, #34	; 0x22
 80a05b2:	f7ff ff11 	bl	80a03d8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

  // Turn on orientation config
  //writeRegister8(LIS3DH_REG_PL_CFG, 0x40);

  // enable adcs
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
 80a05b6:	4620      	mov	r0, r4
 80a05b8:	2280      	movs	r2, #128	; 0x80
 80a05ba:	211f      	movs	r1, #31
 80a05bc:	f7ff ff0c 	bl	80a03d8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
    Serial.print(i, HEX); Serial.print(" = 0x");
    Serial.println(readRegister8(i), HEX);
  }
  */

  return true;
 80a05c0:	2001      	movs	r0, #1
 80a05c2:	bd10      	pop	{r4, pc}
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
  if (deviceid != 0x33)
  {
    /* No LIS3DH detected ... return false */
    //Serial.println(deviceid, HEX);
    return false;
 80a05c4:	2000      	movs	r0, #0
    Serial.println(readRegister8(i), HEX);
  }
  */

  return true;
}
 80a05c6:	bd10      	pop	{r4, pc}

080a05c8 <_ZN15Adafruit_LIS3DH4readEv>:


void Adafruit_LIS3DH::read(void) {
 80a05c8:	b538      	push	{r3, r4, r5, lr}
  // read x y z at once

  if (_cs == -1) {
 80a05ca:	f990 301d 	ldrsb.w	r3, [r0, #29]

  return true;
}


void Adafruit_LIS3DH::read(void) {
 80a05ce:	4604      	mov	r4, r0
  // read x y z at once

  if (_cs == -1) {
 80a05d0:	3301      	adds	r3, #1
 80a05d2:	d142      	bne.n	80a065a <_ZN15Adafruit_LIS3DH4readEv+0x92>
    // i2c
    Wire.beginTransmission(_i2caddr);
 80a05d4:	f001 fb72 	bl	80a1cbc <_Z19__fetch_global_Wirev>
 80a05d8:	f994 101c 	ldrsb.w	r1, [r4, #28]
 80a05dc:	f001 f9f1 	bl	80a19c2 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
 80a05e0:	f001 fb6c 	bl	80a1cbc <_Z19__fetch_global_Wirev>
 80a05e4:	21a8      	movs	r1, #168	; 0xa8
 80a05e6:	f7ff fe75 	bl	80a02d4 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
 80a05ea:	f001 fb67 	bl	80a1cbc <_Z19__fetch_global_Wirev>
 80a05ee:	f001 f9ef 	bl	80a19d0 <_ZN7TwoWire15endTransmissionEv>

    Wire.requestFrom(_i2caddr, 6);
 80a05f2:	f001 fb63 	bl	80a1cbc <_Z19__fetch_global_Wirev>
 80a05f6:	2206      	movs	r2, #6
 80a05f8:	7f21      	ldrb	r1, [r4, #28]
 80a05fa:	f001 f9db 	bl	80a19b4 <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
 80a05fe:	f001 fb5d 	bl	80a1cbc <_Z19__fetch_global_Wirev>
 80a0602:	6803      	ldr	r3, [r0, #0]
 80a0604:	695b      	ldr	r3, [r3, #20]
 80a0606:	4798      	blx	r3
 80a0608:	80e0      	strh	r0, [r4, #6]
 80a060a:	f001 fb57 	bl	80a1cbc <_Z19__fetch_global_Wirev>
 80a060e:	6803      	ldr	r3, [r0, #0]
 80a0610:	695b      	ldr	r3, [r3, #20]
 80a0612:	4798      	blx	r3
 80a0614:	88e3      	ldrh	r3, [r4, #6]
 80a0616:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a061a:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
 80a061c:	f001 fb4e 	bl	80a1cbc <_Z19__fetch_global_Wirev>
 80a0620:	6803      	ldr	r3, [r0, #0]
 80a0622:	695b      	ldr	r3, [r3, #20]
 80a0624:	4798      	blx	r3
 80a0626:	8120      	strh	r0, [r4, #8]
 80a0628:	f001 fb48 	bl	80a1cbc <_Z19__fetch_global_Wirev>
 80a062c:	6803      	ldr	r3, [r0, #0]
 80a062e:	695b      	ldr	r3, [r3, #20]
 80a0630:	4798      	blx	r3
 80a0632:	8923      	ldrh	r3, [r4, #8]
 80a0634:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a0638:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
 80a063a:	f001 fb3f 	bl	80a1cbc <_Z19__fetch_global_Wirev>
 80a063e:	6803      	ldr	r3, [r0, #0]
 80a0640:	695b      	ldr	r3, [r3, #20]
 80a0642:	4798      	blx	r3
 80a0644:	8160      	strh	r0, [r4, #10]
 80a0646:	f001 fb39 	bl	80a1cbc <_Z19__fetch_global_Wirev>
 80a064a:	6803      	ldr	r3, [r0, #0]
 80a064c:	695b      	ldr	r3, [r3, #20]
 80a064e:	4798      	blx	r3
 80a0650:	8963      	ldrh	r3, [r4, #10]
 80a0652:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a0656:	8160      	strh	r0, [r4, #10]
 80a0658:	e03c      	b.n	80a06d4 <_ZN15Adafruit_LIS3DH4readEv+0x10c>
  }
  #ifndef __AVR_ATtiny85__
  else {
    if (_sck == -1)
 80a065a:	f990 3020 	ldrsb.w	r3, [r0, #32]
 80a065e:	3301      	adds	r3, #1
 80a0660:	d101      	bne.n	80a0666 <_ZN15Adafruit_LIS3DH4readEv+0x9e>
      beginTransaction();
 80a0662:	f7ff fea3 	bl	80a03ac <_ZN15Adafruit_LIS3DH16beginTransactionEv>

    digitalWrite(_cs, LOW);
 80a0666:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a066a:	2100      	movs	r1, #0
 80a066c:	b280      	uxth	r0, r0
 80a066e:	f001 fac6 	bl	80a1bfe <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
 80a0672:	21e8      	movs	r1, #232	; 0xe8
 80a0674:	4620      	mov	r0, r4
 80a0676:	f7ff fe61 	bl	80a033c <_ZN15Adafruit_LIS3DH7spixferEh>

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
 80a067a:	21ff      	movs	r1, #255	; 0xff
 80a067c:	4620      	mov	r0, r4
 80a067e:	f7ff fe5d 	bl	80a033c <_ZN15Adafruit_LIS3DH7spixferEh>
 80a0682:	21ff      	movs	r1, #255	; 0xff
 80a0684:	80e0      	strh	r0, [r4, #6]
 80a0686:	4620      	mov	r0, r4
 80a0688:	f7ff fe58 	bl	80a033c <_ZN15Adafruit_LIS3DH7spixferEh>
 80a068c:	88e3      	ldrh	r3, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 80a068e:	21ff      	movs	r1, #255	; 0xff
      beginTransaction();

    digitalWrite(_cs, LOW);
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
 80a0690:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a0694:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 80a0696:	4620      	mov	r0, r4
 80a0698:	f7ff fe50 	bl	80a033c <_ZN15Adafruit_LIS3DH7spixferEh>
 80a069c:	21ff      	movs	r1, #255	; 0xff
 80a069e:	8120      	strh	r0, [r4, #8]
 80a06a0:	4620      	mov	r0, r4
 80a06a2:	f7ff fe4b 	bl	80a033c <_ZN15Adafruit_LIS3DH7spixferEh>
 80a06a6:	8923      	ldrh	r3, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 80a06a8:	21ff      	movs	r1, #255	; 0xff

    digitalWrite(_cs, LOW);
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
 80a06aa:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a06ae:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 80a06b0:	4620      	mov	r0, r4
 80a06b2:	f7ff fe43 	bl	80a033c <_ZN15Adafruit_LIS3DH7spixferEh>
 80a06b6:	21ff      	movs	r1, #255	; 0xff
 80a06b8:	8160      	strh	r0, [r4, #10]
 80a06ba:	4620      	mov	r0, r4
 80a06bc:	f7ff fe3e 	bl	80a033c <_ZN15Adafruit_LIS3DH7spixferEh>
 80a06c0:	8963      	ldrh	r3, [r4, #10]

    digitalWrite(_cs, HIGH);
 80a06c2:	2101      	movs	r1, #1
    digitalWrite(_cs, LOW);
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high

    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
 80a06c4:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a06c8:	8160      	strh	r0, [r4, #10]

    digitalWrite(_cs, HIGH);
 80a06ca:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a06ce:	b280      	uxth	r0, r0
 80a06d0:	f001 fa95 	bl	80a1bfe <digitalWrite>
    if (_sck == -1)
    	endTransaction();

  }
  #endif
  uint8_t range = getRange();
 80a06d4:	4620      	mov	r0, r4
 80a06d6:	f7ff ff0e 	bl	80a04f6 <_ZN15Adafruit_LIS3DH8getRangeEv>
  uint16_t divider = 1;
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
 80a06da:	2803      	cmp	r0, #3
 80a06dc:	d009      	beq.n	80a06f2 <_ZN15Adafruit_LIS3DH4readEv+0x12a>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
 80a06de:	2802      	cmp	r0, #2
 80a06e0:	d00a      	beq.n	80a06f8 <_ZN15Adafruit_LIS3DH4readEv+0x130>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
 80a06e2:	2801      	cmp	r0, #1
 80a06e4:	d00b      	beq.n	80a06fe <_ZN15Adafruit_LIS3DH4readEv+0x136>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
 80a06e6:	2800      	cmp	r0, #0
 80a06e8:	f643 70fc 	movw	r0, #16380	; 0x3ffc
 80a06ec:	bf18      	it	ne
 80a06ee:	2001      	movne	r0, #1
 80a06f0:	e007      	b.n	80a0702 <_ZN15Adafruit_LIS3DH4readEv+0x13a>

  }
  #endif
  uint8_t range = getRange();
  uint16_t divider = 1;
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
 80a06f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80a06f6:	e004      	b.n	80a0702 <_ZN15Adafruit_LIS3DH4readEv+0x13a>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
 80a06f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80a06fc:	e001      	b.n	80a0702 <_ZN15Adafruit_LIS3DH4readEv+0x13a>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
 80a06fe:	f641 70fe 	movw	r0, #8190	; 0x1ffe
  if (range == LIS3DH_RANGE_2_G) divider = 16380;

  x_g = (float)x / divider;
 80a0702:	f001 ff07 	bl	80a2514 <__aeabi_i2f>
 80a0706:	4605      	mov	r5, r0
 80a0708:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80a070c:	f001 ff02 	bl	80a2514 <__aeabi_i2f>
 80a0710:	4629      	mov	r1, r5
 80a0712:	f002 f807 	bl	80a2724 <__aeabi_fdiv>
 80a0716:	60e0      	str	r0, [r4, #12]
  y_g = (float)y / divider;
 80a0718:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80a071c:	f001 fefa 	bl	80a2514 <__aeabi_i2f>
 80a0720:	4629      	mov	r1, r5
 80a0722:	f001 ffff 	bl	80a2724 <__aeabi_fdiv>
 80a0726:	6120      	str	r0, [r4, #16]
  z_g = (float)z / divider;
 80a0728:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
 80a072c:	f001 fef2 	bl	80a2514 <__aeabi_i2f>
 80a0730:	4629      	mov	r1, r5
 80a0732:	f001 fff7 	bl	80a2724 <__aeabi_fdiv>
 80a0736:	6160      	str	r0, [r4, #20]
 80a0738:	bd38      	pop	{r3, r4, r5, pc}

080a073a <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
/**************************************************************************/
/*!
    @brief  Gets the most recent sensor event
*/
/**************************************************************************/
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
 80a073a:	b570      	push	{r4, r5, r6, lr}
 80a073c:	460c      	mov	r4, r1
 80a073e:	4605      	mov	r5, r0
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));
 80a0740:	2624      	movs	r6, #36	; 0x24
 80a0742:	4632      	mov	r2, r6
 80a0744:	2100      	movs	r1, #0
 80a0746:	4620      	mov	r0, r4
 80a0748:	f002 f8a1 	bl	80a288e <memset>

  event->version   = sizeof(sensors_event_t);
 80a074c:	6026      	str	r6, [r4, #0]
  event->sensor_id = _sensorID;
 80a074e:	69ab      	ldr	r3, [r5, #24]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
  event->timestamp = 0;

  read();
 80a0750:	4628      	mov	r0, r5
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
  /* Clear the event */
  memset(event, 0, sizeof(sensors_event_t));

  event->version   = sizeof(sensors_event_t);
  event->sensor_id = _sensorID;
 80a0752:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
 80a0754:	2301      	movs	r3, #1
 80a0756:	60a3      	str	r3, [r4, #8]
  event->timestamp = 0;
 80a0758:	2300      	movs	r3, #0
 80a075a:	6123      	str	r3, [r4, #16]

  read();
 80a075c:	f7ff ff34 	bl	80a05c8 <_ZN15Adafruit_LIS3DH4readEv>

  event->acceleration.x = x_g;
 80a0760:	68eb      	ldr	r3, [r5, #12]
 80a0762:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
 80a0764:	692b      	ldr	r3, [r5, #16]
 80a0766:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
 80a0768:	696b      	ldr	r3, [r5, #20]
 80a076a:	61e3      	str	r3, [r4, #28]
}
 80a076c:	bd70      	pop	{r4, r5, r6, pc}

080a076e <_GLOBAL__sub_I__ZN15Adafruit_LIS3DHC2Ev>:
 80a076e:	f000 b801 	b.w	80a0774 <HAL_Pin_Map>
	...

080a0774 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0774:	b508      	push	{r3, lr}
 80a0776:	4b02      	ldr	r3, [pc, #8]	; (80a0780 <HAL_Pin_Map+0xc>)
 80a0778:	681b      	ldr	r3, [r3, #0]
 80a077a:	681b      	ldr	r3, [r3, #0]
 80a077c:	9301      	str	r3, [sp, #4]
 80a077e:	bd08      	pop	{r3, pc}
 80a0780:	080601b0 	.word	0x080601b0

080a0784 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0784:	b508      	push	{r3, lr}
 80a0786:	4b02      	ldr	r3, [pc, #8]	; (80a0790 <HAL_Pin_Mode+0xc>)
 80a0788:	681b      	ldr	r3, [r3, #0]
 80a078a:	689b      	ldr	r3, [r3, #8]
 80a078c:	9301      	str	r3, [sp, #4]
 80a078e:	bd08      	pop	{r3, pc}
 80a0790:	080601b0 	.word	0x080601b0

080a0794 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0794:	b508      	push	{r3, lr}
 80a0796:	4b02      	ldr	r3, [pc, #8]	; (80a07a0 <HAL_Get_Pin_Mode+0xc>)
 80a0798:	681b      	ldr	r3, [r3, #0]
 80a079a:	68db      	ldr	r3, [r3, #12]
 80a079c:	9301      	str	r3, [sp, #4]
 80a079e:	bd08      	pop	{r3, pc}
 80a07a0:	080601b0 	.word	0x080601b0

080a07a4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a07a4:	b508      	push	{r3, lr}
 80a07a6:	4b02      	ldr	r3, [pc, #8]	; (80a07b0 <HAL_GPIO_Write+0xc>)
 80a07a8:	681b      	ldr	r3, [r3, #0]
 80a07aa:	691b      	ldr	r3, [r3, #16]
 80a07ac:	9301      	str	r3, [sp, #4]
 80a07ae:	bd08      	pop	{r3, pc}
 80a07b0:	080601b0 	.word	0x080601b0

080a07b4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a07b4:	b508      	push	{r3, lr}
 80a07b6:	4b02      	ldr	r3, [pc, #8]	; (80a07c0 <HAL_GPIO_Read+0xc>)
 80a07b8:	681b      	ldr	r3, [r3, #0]
 80a07ba:	695b      	ldr	r3, [r3, #20]
 80a07bc:	9301      	str	r3, [sp, #4]
 80a07be:	bd08      	pop	{r3, pc}
 80a07c0:	080601b0 	.word	0x080601b0

080a07c4 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a07c4:	b508      	push	{r3, lr}
 80a07c6:	4b02      	ldr	r3, [pc, #8]	; (80a07d0 <HAL_SPI_Begin+0xc>)
 80a07c8:	681b      	ldr	r3, [r3, #0]
 80a07ca:	681b      	ldr	r3, [r3, #0]
 80a07cc:	9301      	str	r3, [sp, #4]
 80a07ce:	bd08      	pop	{r3, pc}
 80a07d0:	080601b4 	.word	0x080601b4

080a07d4 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a07d4:	b508      	push	{r3, lr}
 80a07d6:	4b02      	ldr	r3, [pc, #8]	; (80a07e0 <HAL_SPI_Set_Bit_Order+0xc>)
 80a07d8:	681b      	ldr	r3, [r3, #0]
 80a07da:	689b      	ldr	r3, [r3, #8]
 80a07dc:	9301      	str	r3, [sp, #4]
 80a07de:	bd08      	pop	{r3, pc}
 80a07e0:	080601b4 	.word	0x080601b4

080a07e4 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a07e4:	b508      	push	{r3, lr}
 80a07e6:	4b02      	ldr	r3, [pc, #8]	; (80a07f0 <HAL_SPI_Set_Data_Mode+0xc>)
 80a07e8:	681b      	ldr	r3, [r3, #0]
 80a07ea:	68db      	ldr	r3, [r3, #12]
 80a07ec:	9301      	str	r3, [sp, #4]
 80a07ee:	bd08      	pop	{r3, pc}
 80a07f0:	080601b4 	.word	0x080601b4

080a07f4 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a07f4:	b508      	push	{r3, lr}
 80a07f6:	4b02      	ldr	r3, [pc, #8]	; (80a0800 <HAL_SPI_Set_Clock_Divider+0xc>)
 80a07f8:	681b      	ldr	r3, [r3, #0]
 80a07fa:	691b      	ldr	r3, [r3, #16]
 80a07fc:	9301      	str	r3, [sp, #4]
 80a07fe:	bd08      	pop	{r3, pc}
 80a0800:	080601b4 	.word	0x080601b4

080a0804 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a0804:	b508      	push	{r3, lr}
 80a0806:	4b02      	ldr	r3, [pc, #8]	; (80a0810 <HAL_SPI_Send_Receive_Data+0xc>)
 80a0808:	681b      	ldr	r3, [r3, #0]
 80a080a:	695b      	ldr	r3, [r3, #20]
 80a080c:	9301      	str	r3, [sp, #4]
 80a080e:	bd08      	pop	{r3, pc}
 80a0810:	080601b4 	.word	0x080601b4

080a0814 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0814:	b508      	push	{r3, lr}
 80a0816:	4b02      	ldr	r3, [pc, #8]	; (80a0820 <HAL_SPI_Init+0xc>)
 80a0818:	681b      	ldr	r3, [r3, #0]
 80a081a:	69db      	ldr	r3, [r3, #28]
 80a081c:	9301      	str	r3, [sp, #4]
 80a081e:	bd08      	pop	{r3, pc}
 80a0820:	080601b4 	.word	0x080601b4

080a0824 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0824:	b508      	push	{r3, lr}
 80a0826:	4b02      	ldr	r3, [pc, #8]	; (80a0830 <HAL_SPI_Is_Enabled+0xc>)
 80a0828:	681b      	ldr	r3, [r3, #0]
 80a082a:	6a1b      	ldr	r3, [r3, #32]
 80a082c:	9301      	str	r3, [sp, #4]
 80a082e:	bd08      	pop	{r3, pc}
 80a0830:	080601b4 	.word	0x080601b4

080a0834 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a0834:	b508      	push	{r3, lr}
 80a0836:	4b02      	ldr	r3, [pc, #8]	; (80a0840 <HAL_SPI_Info+0xc>)
 80a0838:	681b      	ldr	r3, [r3, #0]
 80a083a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a083c:	9301      	str	r3, [sp, #4]
 80a083e:	bd08      	pop	{r3, pc}
 80a0840:	080601b4 	.word	0x080601b4

080a0844 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0844:	b508      	push	{r3, lr}
 80a0846:	4b02      	ldr	r3, [pc, #8]	; (80a0850 <HAL_RNG_GetRandomNumber+0xc>)
 80a0848:	681b      	ldr	r3, [r3, #0]
 80a084a:	685b      	ldr	r3, [r3, #4]
 80a084c:	9301      	str	r3, [sp, #4]
 80a084e:	bd08      	pop	{r3, pc}
 80a0850:	0806019c 	.word	0x0806019c

080a0854 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0854:	b508      	push	{r3, lr}
 80a0856:	4b02      	ldr	r3, [pc, #8]	; (80a0860 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0858:	681b      	ldr	r3, [r3, #0]
 80a085a:	695b      	ldr	r3, [r3, #20]
 80a085c:	9301      	str	r3, [sp, #4]
 80a085e:	bd08      	pop	{r3, pc}
 80a0860:	0806019c 	.word	0x0806019c

080a0864 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0864:	b508      	push	{r3, lr}
 80a0866:	4b02      	ldr	r3, [pc, #8]	; (80a0870 <os_mutex_recursive_create+0xc>)
 80a0868:	681b      	ldr	r3, [r3, #0]
 80a086a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a086c:	9301      	str	r3, [sp, #4]
 80a086e:	bd08      	pop	{r3, pc}
 80a0870:	080601d0 	.word	0x080601d0

080a0874 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0874:	b508      	push	{r3, lr}
 80a0876:	4b02      	ldr	r3, [pc, #8]	; (80a0880 <os_mutex_recursive_destroy+0xc>)
 80a0878:	681b      	ldr	r3, [r3, #0]
 80a087a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a087c:	9301      	str	r3, [sp, #4]
 80a087e:	bd08      	pop	{r3, pc}
 80a0880:	080601d0 	.word	0x080601d0

080a0884 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a0884:	b508      	push	{r3, lr}
 80a0886:	4b02      	ldr	r3, [pc, #8]	; (80a0890 <os_mutex_recursive_lock+0xc>)
 80a0888:	681b      	ldr	r3, [r3, #0]
 80a088a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a088c:	9301      	str	r3, [sp, #4]
 80a088e:	bd08      	pop	{r3, pc}
 80a0890:	080601d0 	.word	0x080601d0

080a0894 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a0894:	b508      	push	{r3, lr}
 80a0896:	4b02      	ldr	r3, [pc, #8]	; (80a08a0 <os_mutex_recursive_unlock+0xc>)
 80a0898:	681b      	ldr	r3, [r3, #0]
 80a089a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a089c:	9301      	str	r3, [sp, #4]
 80a089e:	bd08      	pop	{r3, pc}
 80a08a0:	080601d0 	.word	0x080601d0

080a08a4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a08a4:	b508      	push	{r3, lr}
 80a08a6:	4b02      	ldr	r3, [pc, #8]	; (80a08b0 <HAL_USART_Init+0xc>)
 80a08a8:	681b      	ldr	r3, [r3, #0]
 80a08aa:	699b      	ldr	r3, [r3, #24]
 80a08ac:	9301      	str	r3, [sp, #4]
 80a08ae:	bd08      	pop	{r3, pc}
 80a08b0:	080601c4 	.word	0x080601c4

080a08b4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a08b4:	b508      	push	{r3, lr}
 80a08b6:	4b02      	ldr	r3, [pc, #8]	; (80a08c0 <HAL_USART_Write_Data+0xc>)
 80a08b8:	681b      	ldr	r3, [r3, #0]
 80a08ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a08bc:	9301      	str	r3, [sp, #4]
 80a08be:	bd08      	pop	{r3, pc}
 80a08c0:	080601c4 	.word	0x080601c4

080a08c4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a08c4:	b508      	push	{r3, lr}
 80a08c6:	4b02      	ldr	r3, [pc, #8]	; (80a08d0 <HAL_USART_Available_Data+0xc>)
 80a08c8:	681b      	ldr	r3, [r3, #0]
 80a08ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a08cc:	9301      	str	r3, [sp, #4]
 80a08ce:	bd08      	pop	{r3, pc}
 80a08d0:	080601c4 	.word	0x080601c4

080a08d4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a08d4:	b508      	push	{r3, lr}
 80a08d6:	4b02      	ldr	r3, [pc, #8]	; (80a08e0 <HAL_USART_Read_Data+0xc>)
 80a08d8:	681b      	ldr	r3, [r3, #0]
 80a08da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a08dc:	9301      	str	r3, [sp, #4]
 80a08de:	bd08      	pop	{r3, pc}
 80a08e0:	080601c4 	.word	0x080601c4

080a08e4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a08e4:	b508      	push	{r3, lr}
 80a08e6:	4b02      	ldr	r3, [pc, #8]	; (80a08f0 <HAL_USART_Peek_Data+0xc>)
 80a08e8:	681b      	ldr	r3, [r3, #0]
 80a08ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a08ec:	9301      	str	r3, [sp, #4]
 80a08ee:	bd08      	pop	{r3, pc}
 80a08f0:	080601c4 	.word	0x080601c4

080a08f4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a08f4:	b508      	push	{r3, lr}
 80a08f6:	4b02      	ldr	r3, [pc, #8]	; (80a0900 <HAL_USART_Flush_Data+0xc>)
 80a08f8:	681b      	ldr	r3, [r3, #0]
 80a08fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a08fc:	9301      	str	r3, [sp, #4]
 80a08fe:	bd08      	pop	{r3, pc}
 80a0900:	080601c4 	.word	0x080601c4

080a0904 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0904:	b508      	push	{r3, lr}
 80a0906:	4b02      	ldr	r3, [pc, #8]	; (80a0910 <HAL_USART_Is_Enabled+0xc>)
 80a0908:	681b      	ldr	r3, [r3, #0]
 80a090a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a090c:	9301      	str	r3, [sp, #4]
 80a090e:	bd08      	pop	{r3, pc}
 80a0910:	080601c4 	.word	0x080601c4

080a0914 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0914:	b508      	push	{r3, lr}
 80a0916:	4b02      	ldr	r3, [pc, #8]	; (80a0920 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0918:	681b      	ldr	r3, [r3, #0]
 80a091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a091c:	9301      	str	r3, [sp, #4]
 80a091e:	bd08      	pop	{r3, pc}
 80a0920:	080601c4 	.word	0x080601c4

080a0924 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a0924:	b508      	push	{r3, lr}
 80a0926:	4b02      	ldr	r3, [pc, #8]	; (80a0930 <HAL_I2C_Begin+0xc>)
 80a0928:	681b      	ldr	r3, [r3, #0]
 80a092a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a092c:	9301      	str	r3, [sp, #4]
 80a092e:	bd08      	pop	{r3, pc}
 80a0930:	080601ac 	.word	0x080601ac

080a0934 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 80a0934:	b508      	push	{r3, lr}
 80a0936:	4b02      	ldr	r3, [pc, #8]	; (80a0940 <HAL_I2C_Begin_Transmission+0xc>)
 80a0938:	681b      	ldr	r3, [r3, #0]
 80a093a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a093c:	9301      	str	r3, [sp, #4]
 80a093e:	bd08      	pop	{r3, pc}
 80a0940:	080601ac 	.word	0x080601ac

080a0944 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a0944:	b508      	push	{r3, lr}
 80a0946:	4b02      	ldr	r3, [pc, #8]	; (80a0950 <HAL_I2C_End_Transmission+0xc>)
 80a0948:	681b      	ldr	r3, [r3, #0]
 80a094a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a094c:	9301      	str	r3, [sp, #4]
 80a094e:	bd08      	pop	{r3, pc}
 80a0950:	080601ac 	.word	0x080601ac

080a0954 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0954:	b508      	push	{r3, lr}
 80a0956:	4b02      	ldr	r3, [pc, #8]	; (80a0960 <HAL_I2C_Write_Data+0xc>)
 80a0958:	681b      	ldr	r3, [r3, #0]
 80a095a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a095c:	9301      	str	r3, [sp, #4]
 80a095e:	bd08      	pop	{r3, pc}
 80a0960:	080601ac 	.word	0x080601ac

080a0964 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0964:	b508      	push	{r3, lr}
 80a0966:	4b02      	ldr	r3, [pc, #8]	; (80a0970 <HAL_I2C_Available_Data+0xc>)
 80a0968:	681b      	ldr	r3, [r3, #0]
 80a096a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a096c:	9301      	str	r3, [sp, #4]
 80a096e:	bd08      	pop	{r3, pc}
 80a0970:	080601ac 	.word	0x080601ac

080a0974 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0974:	b508      	push	{r3, lr}
 80a0976:	4b02      	ldr	r3, [pc, #8]	; (80a0980 <HAL_I2C_Read_Data+0xc>)
 80a0978:	681b      	ldr	r3, [r3, #0]
 80a097a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a097c:	9301      	str	r3, [sp, #4]
 80a097e:	bd08      	pop	{r3, pc}
 80a0980:	080601ac 	.word	0x080601ac

080a0984 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0984:	b508      	push	{r3, lr}
 80a0986:	4b02      	ldr	r3, [pc, #8]	; (80a0990 <HAL_I2C_Peek_Data+0xc>)
 80a0988:	681b      	ldr	r3, [r3, #0]
 80a098a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a098c:	9301      	str	r3, [sp, #4]
 80a098e:	bd08      	pop	{r3, pc}
 80a0990:	080601ac 	.word	0x080601ac

080a0994 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0994:	b508      	push	{r3, lr}
 80a0996:	4b02      	ldr	r3, [pc, #8]	; (80a09a0 <HAL_I2C_Flush_Data+0xc>)
 80a0998:	681b      	ldr	r3, [r3, #0]
 80a099a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a099c:	9301      	str	r3, [sp, #4]
 80a099e:	bd08      	pop	{r3, pc}
 80a09a0:	080601ac 	.word	0x080601ac

080a09a4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a09a4:	b508      	push	{r3, lr}
 80a09a6:	4b02      	ldr	r3, [pc, #8]	; (80a09b0 <HAL_I2C_Is_Enabled+0xc>)
 80a09a8:	681b      	ldr	r3, [r3, #0]
 80a09aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a09ac:	9301      	str	r3, [sp, #4]
 80a09ae:	bd08      	pop	{r3, pc}
 80a09b0:	080601ac 	.word	0x080601ac

080a09b4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a09b4:	b508      	push	{r3, lr}
 80a09b6:	4b03      	ldr	r3, [pc, #12]	; (80a09c4 <HAL_I2C_Init+0x10>)
 80a09b8:	681b      	ldr	r3, [r3, #0]
 80a09ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a09be:	9301      	str	r3, [sp, #4]
 80a09c0:	bd08      	pop	{r3, pc}
 80a09c2:	0000      	.short	0x0000
 80a09c4:	080601ac 	.word	0x080601ac

080a09c8 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
 80a09c8:	b508      	push	{r3, lr}
 80a09ca:	4b03      	ldr	r3, [pc, #12]	; (80a09d8 <HAL_I2C_Request_Data_Ex+0x10>)
 80a09cc:	681b      	ldr	r3, [r3, #0]
 80a09ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a09d2:	9301      	str	r3, [sp, #4]
 80a09d4:	bd08      	pop	{r3, pc}
 80a09d6:	0000      	.short	0x0000
 80a09d8:	080601ac 	.word	0x080601ac

080a09dc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a09dc:	b508      	push	{r3, lr}
 80a09de:	4b02      	ldr	r3, [pc, #8]	; (80a09e8 <HAL_USB_USART_Init+0xc>)
 80a09e0:	681b      	ldr	r3, [r3, #0]
 80a09e2:	681b      	ldr	r3, [r3, #0]
 80a09e4:	9301      	str	r3, [sp, #4]
 80a09e6:	bd08      	pop	{r3, pc}
 80a09e8:	080601d8 	.word	0x080601d8

080a09ec <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a09ec:	b508      	push	{r3, lr}
 80a09ee:	4b02      	ldr	r3, [pc, #8]	; (80a09f8 <HAL_USB_USART_Available_Data+0xc>)
 80a09f0:	681b      	ldr	r3, [r3, #0]
 80a09f2:	691b      	ldr	r3, [r3, #16]
 80a09f4:	9301      	str	r3, [sp, #4]
 80a09f6:	bd08      	pop	{r3, pc}
 80a09f8:	080601d8 	.word	0x080601d8

080a09fc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a09fc:	b508      	push	{r3, lr}
 80a09fe:	4b02      	ldr	r3, [pc, #8]	; (80a0a08 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0a00:	681b      	ldr	r3, [r3, #0]
 80a0a02:	695b      	ldr	r3, [r3, #20]
 80a0a04:	9301      	str	r3, [sp, #4]
 80a0a06:	bd08      	pop	{r3, pc}
 80a0a08:	080601d8 	.word	0x080601d8

080a0a0c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0a0c:	b508      	push	{r3, lr}
 80a0a0e:	4b02      	ldr	r3, [pc, #8]	; (80a0a18 <HAL_USB_USART_Receive_Data+0xc>)
 80a0a10:	681b      	ldr	r3, [r3, #0]
 80a0a12:	699b      	ldr	r3, [r3, #24]
 80a0a14:	9301      	str	r3, [sp, #4]
 80a0a16:	bd08      	pop	{r3, pc}
 80a0a18:	080601d8 	.word	0x080601d8

080a0a1c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0a1c:	b508      	push	{r3, lr}
 80a0a1e:	4b02      	ldr	r3, [pc, #8]	; (80a0a28 <HAL_USB_USART_Send_Data+0xc>)
 80a0a20:	681b      	ldr	r3, [r3, #0]
 80a0a22:	69db      	ldr	r3, [r3, #28]
 80a0a24:	9301      	str	r3, [sp, #4]
 80a0a26:	bd08      	pop	{r3, pc}
 80a0a28:	080601d8 	.word	0x080601d8

080a0a2c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0a2c:	b508      	push	{r3, lr}
 80a0a2e:	4b02      	ldr	r3, [pc, #8]	; (80a0a38 <HAL_USB_USART_Flush_Data+0xc>)
 80a0a30:	681b      	ldr	r3, [r3, #0]
 80a0a32:	6a1b      	ldr	r3, [r3, #32]
 80a0a34:	9301      	str	r3, [sp, #4]
 80a0a36:	bd08      	pop	{r3, pc}
 80a0a38:	080601d8 	.word	0x080601d8

080a0a3c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0a3c:	b508      	push	{r3, lr}
 80a0a3e:	4b02      	ldr	r3, [pc, #8]	; (80a0a48 <inet_gethostbyname+0xc>)
 80a0a40:	681b      	ldr	r3, [r3, #0]
 80a0a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0a44:	9301      	str	r3, [sp, #4]
 80a0a46:	bd08      	pop	{r3, pc}
 80a0a48:	080601c0 	.word	0x080601c0

080a0a4c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0a4c:	b508      	push	{r3, lr}
 80a0a4e:	4b02      	ldr	r3, [pc, #8]	; (80a0a58 <set_system_mode+0xc>)
 80a0a50:	681b      	ldr	r3, [r3, #0]
 80a0a52:	685b      	ldr	r3, [r3, #4]
 80a0a54:	9301      	str	r3, [sp, #4]
 80a0a56:	bd08      	pop	{r3, pc}
 80a0a58:	080601a4 	.word	0x080601a4

080a0a5c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0a5c:	b508      	push	{r3, lr}
 80a0a5e:	4b02      	ldr	r3, [pc, #8]	; (80a0a68 <system_delay_ms+0xc>)
 80a0a60:	681b      	ldr	r3, [r3, #0]
 80a0a62:	695b      	ldr	r3, [r3, #20]
 80a0a64:	9301      	str	r3, [sp, #4]
 80a0a66:	bd08      	pop	{r3, pc}
 80a0a68:	080601a4 	.word	0x080601a4

080a0a6c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0a6c:	b508      	push	{r3, lr}
 80a0a6e:	4b02      	ldr	r3, [pc, #8]	; (80a0a78 <application_thread_current+0xc>)
 80a0a70:	681b      	ldr	r3, [r3, #0]
 80a0a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0a74:	9301      	str	r3, [sp, #4]
 80a0a76:	bd08      	pop	{r3, pc}
 80a0a78:	080601a4 	.word	0x080601a4

080a0a7c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0a7c:	b508      	push	{r3, lr}
 80a0a7e:	4b02      	ldr	r3, [pc, #8]	; (80a0a88 <application_thread_invoke+0xc>)
 80a0a80:	681b      	ldr	r3, [r3, #0]
 80a0a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0a84:	9301      	str	r3, [sp, #4]
 80a0a86:	bd08      	pop	{r3, pc}
 80a0a88:	080601a4 	.word	0x080601a4

080a0a8c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0a8c:	b508      	push	{r3, lr}
 80a0a8e:	4b03      	ldr	r3, [pc, #12]	; (80a0a9c <system_ctrl_set_app_request_handler+0x10>)
 80a0a90:	681b      	ldr	r3, [r3, #0]
 80a0a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0a96:	9301      	str	r3, [sp, #4]
 80a0a98:	bd08      	pop	{r3, pc}
 80a0a9a:	0000      	.short	0x0000
 80a0a9c:	080601a4 	.word	0x080601a4

080a0aa0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0aa0:	b508      	push	{r3, lr}
 80a0aa2:	4b03      	ldr	r3, [pc, #12]	; (80a0ab0 <system_ctrl_set_result+0x10>)
 80a0aa4:	681b      	ldr	r3, [r3, #0]
 80a0aa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0aaa:	9301      	str	r3, [sp, #4]
 80a0aac:	bd08      	pop	{r3, pc}
 80a0aae:	0000      	.short	0x0000
 80a0ab0:	080601a4 	.word	0x080601a4

080a0ab4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0ab4:	b508      	push	{r3, lr}
 80a0ab6:	4b02      	ldr	r3, [pc, #8]	; (80a0ac0 <network_connect+0xc>)
 80a0ab8:	681b      	ldr	r3, [r3, #0]
 80a0aba:	685b      	ldr	r3, [r3, #4]
 80a0abc:	9301      	str	r3, [sp, #4]
 80a0abe:	bd08      	pop	{r3, pc}
 80a0ac0:	080601c8 	.word	0x080601c8

080a0ac4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0ac4:	b508      	push	{r3, lr}
 80a0ac6:	4b02      	ldr	r3, [pc, #8]	; (80a0ad0 <network_connecting+0xc>)
 80a0ac8:	681b      	ldr	r3, [r3, #0]
 80a0aca:	689b      	ldr	r3, [r3, #8]
 80a0acc:	9301      	str	r3, [sp, #4]
 80a0ace:	bd08      	pop	{r3, pc}
 80a0ad0:	080601c8 	.word	0x080601c8

080a0ad4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0ad4:	b508      	push	{r3, lr}
 80a0ad6:	4b02      	ldr	r3, [pc, #8]	; (80a0ae0 <network_disconnect+0xc>)
 80a0ad8:	681b      	ldr	r3, [r3, #0]
 80a0ada:	68db      	ldr	r3, [r3, #12]
 80a0adc:	9301      	str	r3, [sp, #4]
 80a0ade:	bd08      	pop	{r3, pc}
 80a0ae0:	080601c8 	.word	0x080601c8

080a0ae4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0ae4:	b508      	push	{r3, lr}
 80a0ae6:	4b02      	ldr	r3, [pc, #8]	; (80a0af0 <network_ready+0xc>)
 80a0ae8:	681b      	ldr	r3, [r3, #0]
 80a0aea:	691b      	ldr	r3, [r3, #16]
 80a0aec:	9301      	str	r3, [sp, #4]
 80a0aee:	bd08      	pop	{r3, pc}
 80a0af0:	080601c8 	.word	0x080601c8

080a0af4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0af4:	b508      	push	{r3, lr}
 80a0af6:	4b02      	ldr	r3, [pc, #8]	; (80a0b00 <network_on+0xc>)
 80a0af8:	681b      	ldr	r3, [r3, #0]
 80a0afa:	695b      	ldr	r3, [r3, #20]
 80a0afc:	9301      	str	r3, [sp, #4]
 80a0afe:	bd08      	pop	{r3, pc}
 80a0b00:	080601c8 	.word	0x080601c8

080a0b04 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0b04:	b508      	push	{r3, lr}
 80a0b06:	4b02      	ldr	r3, [pc, #8]	; (80a0b10 <network_off+0xc>)
 80a0b08:	681b      	ldr	r3, [r3, #0]
 80a0b0a:	699b      	ldr	r3, [r3, #24]
 80a0b0c:	9301      	str	r3, [sp, #4]
 80a0b0e:	bd08      	pop	{r3, pc}
 80a0b10:	080601c8 	.word	0x080601c8

080a0b14 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0b14:	b508      	push	{r3, lr}
 80a0b16:	4b02      	ldr	r3, [pc, #8]	; (80a0b20 <network_listen+0xc>)
 80a0b18:	681b      	ldr	r3, [r3, #0]
 80a0b1a:	69db      	ldr	r3, [r3, #28]
 80a0b1c:	9301      	str	r3, [sp, #4]
 80a0b1e:	bd08      	pop	{r3, pc}
 80a0b20:	080601c8 	.word	0x080601c8

080a0b24 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0b24:	b508      	push	{r3, lr}
 80a0b26:	4b02      	ldr	r3, [pc, #8]	; (80a0b30 <network_listening+0xc>)
 80a0b28:	681b      	ldr	r3, [r3, #0]
 80a0b2a:	6a1b      	ldr	r3, [r3, #32]
 80a0b2c:	9301      	str	r3, [sp, #4]
 80a0b2e:	bd08      	pop	{r3, pc}
 80a0b30:	080601c8 	.word	0x080601c8

080a0b34 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0b34:	b508      	push	{r3, lr}
 80a0b36:	4b02      	ldr	r3, [pc, #8]	; (80a0b40 <network_set_listen_timeout+0xc>)
 80a0b38:	681b      	ldr	r3, [r3, #0]
 80a0b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0b3c:	9301      	str	r3, [sp, #4]
 80a0b3e:	bd08      	pop	{r3, pc}
 80a0b40:	080601c8 	.word	0x080601c8

080a0b44 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0b44:	b508      	push	{r3, lr}
 80a0b46:	4b02      	ldr	r3, [pc, #8]	; (80a0b50 <network_get_listen_timeout+0xc>)
 80a0b48:	681b      	ldr	r3, [r3, #0]
 80a0b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0b4c:	9301      	str	r3, [sp, #4]
 80a0b4e:	bd08      	pop	{r3, pc}
 80a0b50:	080601c8 	.word	0x080601c8

080a0b54 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0b54:	b508      	push	{r3, lr}
 80a0b56:	4b02      	ldr	r3, [pc, #8]	; (80a0b60 <spark_cloud_flag_connected+0xc>)
 80a0b58:	681b      	ldr	r3, [r3, #0]
 80a0b5a:	695b      	ldr	r3, [r3, #20]
 80a0b5c:	9301      	str	r3, [sp, #4]
 80a0b5e:	bd08      	pop	{r3, pc}
 80a0b60:	080601cc 	.word	0x080601cc

080a0b64 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0b64:	b508      	push	{r3, lr}
 80a0b66:	4b02      	ldr	r3, [pc, #8]	; (80a0b70 <spark_send_event+0xc>)
 80a0b68:	681b      	ldr	r3, [r3, #0]
 80a0b6a:	6a1b      	ldr	r3, [r3, #32]
 80a0b6c:	9301      	str	r3, [sp, #4]
 80a0b6e:	bd08      	pop	{r3, pc}
 80a0b70:	080601cc 	.word	0x080601cc

080a0b74 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0b74:	b508      	push	{r3, lr}
 80a0b76:	4b02      	ldr	r3, [pc, #8]	; (80a0b80 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0b78:	681b      	ldr	r3, [r3, #0]
 80a0b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0b7c:	9301      	str	r3, [sp, #4]
 80a0b7e:	bd08      	pop	{r3, pc}
 80a0b80:	080601cc 	.word	0x080601cc

080a0b84 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0b84:	b508      	push	{r3, lr}
 80a0b86:	4b02      	ldr	r3, [pc, #8]	; (80a0b90 <malloc+0xc>)
 80a0b88:	681b      	ldr	r3, [r3, #0]
 80a0b8a:	681b      	ldr	r3, [r3, #0]
 80a0b8c:	9301      	str	r3, [sp, #4]
 80a0b8e:	bd08      	pop	{r3, pc}
 80a0b90:	080601a0 	.word	0x080601a0

080a0b94 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0b94:	b508      	push	{r3, lr}
 80a0b96:	4b02      	ldr	r3, [pc, #8]	; (80a0ba0 <free+0xc>)
 80a0b98:	681b      	ldr	r3, [r3, #0]
 80a0b9a:	685b      	ldr	r3, [r3, #4]
 80a0b9c:	9301      	str	r3, [sp, #4]
 80a0b9e:	bd08      	pop	{r3, pc}
 80a0ba0:	080601a0 	.word	0x080601a0

080a0ba4 <sprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80a0ba4:	b508      	push	{r3, lr}
 80a0ba6:	4b02      	ldr	r3, [pc, #8]	; (80a0bb0 <sprintf+0xc>)
 80a0ba8:	681b      	ldr	r3, [r3, #0]
 80a0baa:	68db      	ldr	r3, [r3, #12]
 80a0bac:	9301      	str	r3, [sp, #4]
 80a0bae:	bd08      	pop	{r3, pc}
 80a0bb0:	080601a0 	.word	0x080601a0

080a0bb4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0bb4:	b508      	push	{r3, lr}
 80a0bb6:	4b02      	ldr	r3, [pc, #8]	; (80a0bc0 <abort+0xc>)
 80a0bb8:	681b      	ldr	r3, [r3, #0]
 80a0bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0bbc:	9301      	str	r3, [sp, #4]
 80a0bbe:	bd08      	pop	{r3, pc}
 80a0bc0:	080601a0 	.word	0x080601a0

080a0bc4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0bc4:	b508      	push	{r3, lr}
 80a0bc6:	4b02      	ldr	r3, [pc, #8]	; (80a0bd0 <_malloc_r+0xc>)
 80a0bc8:	681b      	ldr	r3, [r3, #0]
 80a0bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0bcc:	9301      	str	r3, [sp, #4]
 80a0bce:	bd08      	pop	{r3, pc}
 80a0bd0:	080601a0 	.word	0x080601a0

080a0bd4 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 80a0bd4:	6800      	ldr	r0, [r0, #0]
 80a0bd6:	f7ff be55 	b.w	80a0884 <os_mutex_recursive_lock>

080a0bda <_ZN14RecursiveMutex6unlockEv>:
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a0bda:	6800      	ldr	r0, [r0, #0]
 80a0bdc:	f7ff be5a 	b.w	80a0894 <os_mutex_recursive_unlock>

080a0be0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0be0:	b570      	push	{r4, r5, r6, lr}
 80a0be2:	4604      	mov	r4, r0
 80a0be4:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0be6:	2500      	movs	r5, #0
 80a0be8:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0bec:	f7ff fe3a 	bl	80a0864 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a0bf0:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a0bf2:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a0bf4:	f7ff fe0e 	bl	80a0814 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0bf8:	6065      	str	r5, [r4, #4]
}
 80a0bfa:	4620      	mov	r0, r4
 80a0bfc:	bd70      	pop	{r4, r5, r6, pc}

080a0bfe <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 80a0bfe:	b538      	push	{r3, r4, r5, lr}
 80a0c00:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a0c02:	f100 0408 	add.w	r4, r0, #8
 80a0c06:	4620      	mov	r0, r4
 80a0c08:	f7ff ffe4 	bl	80a0bd4 <_ZN14RecursiveMutex4lockEv>
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a0c0c:	7828      	ldrb	r0, [r5, #0]
 80a0c0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a0c12:	f7ff fdd7 	bl	80a07c4 <HAL_SPI_Begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a0c16:	4620      	mov	r0, r4
 80a0c18:	f7ff ffdf 	bl	80a0bda <_ZN14RecursiveMutex6unlockEv>
 80a0c1c:	bd38      	pop	{r3, r4, r5, pc}

080a0c1e <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
 80a0c1e:	b570      	push	{r4, r5, r6, lr}
 80a0c20:	4605      	mov	r5, r0
 80a0c22:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a0c24:	f100 0408 	add.w	r4, r0, #8
 80a0c28:	4620      	mov	r0, r4
 80a0c2a:	f7ff ffd3 	bl	80a0bd4 <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a0c2e:	7828      	ldrb	r0, [r5, #0]
 80a0c30:	4631      	mov	r1, r6
 80a0c32:	f7ff fdcf 	bl	80a07d4 <HAL_SPI_Set_Bit_Order>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a0c36:	4620      	mov	r0, r4
 80a0c38:	f7ff ffcf 	bl	80a0bda <_ZN14RecursiveMutex6unlockEv>
 80a0c3c:	bd70      	pop	{r4, r5, r6, pc}

080a0c3e <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
 80a0c3e:	b570      	push	{r4, r5, r6, lr}
 80a0c40:	4605      	mov	r5, r0
 80a0c42:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a0c44:	f100 0408 	add.w	r4, r0, #8
 80a0c48:	4620      	mov	r0, r4
 80a0c4a:	f7ff ffc3 	bl	80a0bd4 <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_Set_Data_Mode(_spi, mode);
 80a0c4e:	7828      	ldrb	r0, [r5, #0]
 80a0c50:	4631      	mov	r1, r6
 80a0c52:	f7ff fdc7 	bl	80a07e4 <HAL_SPI_Set_Data_Mode>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a0c56:	4620      	mov	r0, r4
 80a0c58:	f7ff ffbf 	bl	80a0bda <_ZN14RecursiveMutex6unlockEv>
 80a0c5c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0c60 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a0c60:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 80a0c62:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 80a0c64:	6018      	str	r0, [r3, #0]
 80a0c66:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
 80a0c68:	6818      	ldr	r0, [r3, #0]
 80a0c6a:	b2e5      	uxtb	r5, r4
 80a0c6c:	4288      	cmp	r0, r1
 80a0c6e:	d906      	bls.n	80a0c7e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a0c70:	3401      	adds	r4, #1
 80a0c72:	2c08      	cmp	r4, #8
 80a0c74:	d002      	beq.n	80a0c7c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 80a0c76:	0840      	lsrs	r0, r0, #1
 80a0c78:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
 80a0c7a:	e7f5      	b.n	80a0c68 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a0c7c:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a0c7e:	4b02      	ldr	r3, [pc, #8]	; (80a0c88 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a0c80:	5d5b      	ldrb	r3, [r3, r5]
 80a0c82:	7013      	strb	r3, [r2, #0]
 80a0c84:	bd30      	pop	{r4, r5, pc}
 80a0c86:	bf00      	nop
 80a0c88:	080a29d4 	.word	0x080a29d4

080a0c8c <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a0c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0c90:	4605      	mov	r5, r0
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a0c92:	f100 0608 	add.w	r6, r0, #8
 80a0c96:	b088      	sub	sp, #32
    unsigned clock = 0;
 80a0c98:	2400      	movs	r4, #0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;
 80a0c9a:	fb02 f701 	mul.w	r7, r2, r1
 80a0c9e:	4630      	mov	r0, r6
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
 80a0ca0:	9402      	str	r4, [sp, #8]
 80a0ca2:	f7ff ff97 	bl	80a0bd4 <_ZN14RecursiveMutex4lockEv>

    if (!lock())
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 80a0ca6:	f895 8000 	ldrb.w	r8, [r5]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
 80a0caa:	4621      	mov	r1, r4
 80a0cac:	2214      	movs	r2, #20
 80a0cae:	a803      	add	r0, sp, #12
 80a0cb0:	f001 fded 	bl	80a288e <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 80a0cb4:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
 80a0cb6:	4622      	mov	r2, r4
 80a0cb8:	a903      	add	r1, sp, #12
 80a0cba:	4640      	mov	r0, r8
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
 80a0cbc:	f8ad 300c 	strh.w	r3, [sp, #12]
    HAL_SPI_Info(spi, info, nullptr);
 80a0cc0:	f7ff fdb8 	bl	80a0834 <HAL_SPI_Info>
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 80a0cc4:	ab02      	add	r3, sp, #8
 80a0cc6:	f10d 0207 	add.w	r2, sp, #7
 80a0cca:	4639      	mov	r1, r7
 80a0ccc:	9804      	ldr	r0, [sp, #16]
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);

        // Calculate clock divider
        uint8_t divisor = 0;
 80a0cce:	f88d 4007 	strb.w	r4, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 80a0cd2:	f7ff ffc5 	bl	80a0c60 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        HAL_SPI_Set_Clock_Divider(_spi, divisor);
 80a0cd6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a0cda:	7828      	ldrb	r0, [r5, #0]
 80a0cdc:	f7ff fd8a 	bl	80a07f4 <HAL_SPI_Set_Clock_Divider>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a0ce0:	4630      	mov	r0, r6
 80a0ce2:	f7ff ff7a 	bl	80a0bda <_ZN14RecursiveMutex6unlockEv>
        unlock();
    }

    return clock;
}
 80a0ce6:	9802      	ldr	r0, [sp, #8]
 80a0ce8:	b008      	add	sp, #32
 80a0cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0cee <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
 80a0cee:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
 80a0cf0:	7800      	ldrb	r0, [r0, #0]
 80a0cf2:	f7ff fd87 	bl	80a0804 <HAL_SPI_Send_Receive_Data>
}
 80a0cf6:	b2c0      	uxtb	r0, r0
 80a0cf8:	bd08      	pop	{r3, pc}

080a0cfa <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a0cfa:	7800      	ldrb	r0, [r0, #0]
 80a0cfc:	f7ff bd92 	b.w	80a0824 <HAL_SPI_Is_Enabled>

080a0d00 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0d00:	b510      	push	{r4, lr}
 80a0d02:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0d04:	6800      	ldr	r0, [r0, #0]
 80a0d06:	b118      	cbz	r0, 80a0d10 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a0d08:	f7ff ff44 	bl	80a0b94 <free>
            wakeupSource_ = nullptr;
 80a0d0c:	2300      	movs	r3, #0
 80a0d0e:	6023      	str	r3, [r4, #0]
 80a0d10:	bd10      	pop	{r4, pc}

080a0d12 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0d12:	b510      	push	{r4, lr}
 80a0d14:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a0d16:	f7ff fff3 	bl	80a0d00 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0d1a:	4620      	mov	r0, r4
 80a0d1c:	bd10      	pop	{r4, pc}
	...

080a0d20 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0d24:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0d26:	4c08      	ldr	r4, [pc, #32]	; (80a0d48 <_GLOBAL__sub_I_System+0x28>)
 80a0d28:	2000      	movs	r0, #0
 80a0d2a:	6020      	str	r0, [r4, #0]
 80a0d2c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0d2e:	71a0      	strb	r0, [r4, #6]
 80a0d30:	8120      	strh	r0, [r4, #8]
 80a0d32:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0d34:	f7ff fe8a 	bl	80a0a4c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a0d38:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a0d3e:	4a03      	ldr	r2, [pc, #12]	; (80a0d4c <_GLOBAL__sub_I_System+0x2c>)
 80a0d40:	4903      	ldr	r1, [pc, #12]	; (80a0d50 <_GLOBAL__sub_I_System+0x30>)
 80a0d42:	f000 bfe1 	b.w	80a1d08 <__aeabi_atexit>
 80a0d46:	bf00      	nop
 80a0d48:	20000114 	.word	0x20000114
 80a0d4c:	20000068 	.word	0x20000068
 80a0d50:	080a0d13 	.word	0x080a0d13

080a0d54 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0d56:	4606      	mov	r6, r0
 80a0d58:	460d      	mov	r5, r1
 80a0d5a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0d5c:	2400      	movs	r4, #0
  while (size--) {
 80a0d5e:	42bd      	cmp	r5, r7
 80a0d60:	d00c      	beq.n	80a0d7c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0d62:	6833      	ldr	r3, [r6, #0]
 80a0d64:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0d68:	689b      	ldr	r3, [r3, #8]
 80a0d6a:	4630      	mov	r0, r6
 80a0d6c:	4798      	blx	r3
     if (chunk>=0)
 80a0d6e:	2800      	cmp	r0, #0
 80a0d70:	db01      	blt.n	80a0d76 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0d72:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0d74:	e7f3      	b.n	80a0d5e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0d76:	2c00      	cmp	r4, #0
 80a0d78:	bf08      	it	eq
 80a0d7a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0d7c:	4620      	mov	r0, r4
 80a0d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0d80 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0d80:	b570      	push	{r4, r5, r6, lr}
 80a0d82:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0d84:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0d86:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0d88:	b149      	cbz	r1, 80a0d9e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0d8a:	f001 fdcc 	bl	80a2926 <strlen>
 80a0d8e:	682b      	ldr	r3, [r5, #0]
 80a0d90:	4602      	mov	r2, r0
 80a0d92:	4621      	mov	r1, r4
 80a0d94:	4628      	mov	r0, r5
    }
 80a0d96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0d9a:	68db      	ldr	r3, [r3, #12]
 80a0d9c:	4718      	bx	r3
    }
 80a0d9e:	bd70      	pop	{r4, r5, r6, pc}

080a0da0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0da0:	6803      	ldr	r3, [r0, #0]
 80a0da2:	689b      	ldr	r3, [r3, #8]
 80a0da4:	4718      	bx	r3

080a0da6 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0da6:	2a01      	cmp	r2, #1
 80a0da8:	bf98      	it	ls
 80a0daa:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0dac:	b530      	push	{r4, r5, lr}
 80a0dae:	460b      	mov	r3, r1
 80a0db0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0db2:	2100      	movs	r1, #0
 80a0db4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0db8:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a0dbc:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a0dc0:	fb05 3312 	mls	r3, r5, r2, r3
 80a0dc4:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0dc6:	2b09      	cmp	r3, #9
 80a0dc8:	bf94      	ite	ls
 80a0dca:	3330      	addls	r3, #48	; 0x30
 80a0dcc:	3337      	addhi	r3, #55	; 0x37
 80a0dce:	b2db      	uxtb	r3, r3
 80a0dd0:	4621      	mov	r1, r4
 80a0dd2:	f804 3901 	strb.w	r3, [r4], #-1
 80a0dd6:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0dd8:	2d00      	cmp	r5, #0
 80a0dda:	d1ef      	bne.n	80a0dbc <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0ddc:	f7ff ffd0 	bl	80a0d80 <_ZN5Print5writeEPKc>
}
 80a0de0:	b00b      	add	sp, #44	; 0x2c
 80a0de2:	bd30      	pop	{r4, r5, pc}

080a0de4 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0de4:	2300      	movs	r3, #0
 80a0de6:	461a      	mov	r2, r3
 80a0de8:	4619      	mov	r1, r3
 80a0dea:	6840      	ldr	r0, [r0, #4]
 80a0dec:	f7ff be82 	b.w	80a0af4 <network_on>

080a0df0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a0df0:	680b      	ldr	r3, [r1, #0]
 80a0df2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a0df4:	b113      	cbz	r3, 80a0dfc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a0df6:	685a      	ldr	r2, [r3, #4]
 80a0df8:	3201      	adds	r2, #1
 80a0dfa:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a0dfc:	4770      	bx	lr
	...

080a0e00 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0e00:	4a01      	ldr	r2, [pc, #4]	; (80a0e08 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0e02:	4b02      	ldr	r3, [pc, #8]	; (80a0e0c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0e04:	601a      	str	r2, [r3, #0]
 80a0e06:	4770      	bx	lr
 80a0e08:	080a2a52 	.word	0x080a2a52
 80a0e0c:	20000120 	.word	0x20000120

080a0e10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0e10:	4b02      	ldr	r3, [pc, #8]	; (80a0e1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0e12:	681a      	ldr	r2, [r3, #0]
 80a0e14:	4b02      	ldr	r3, [pc, #8]	; (80a0e20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0e16:	601a      	str	r2, [r3, #0]
 80a0e18:	4770      	bx	lr
 80a0e1a:	bf00      	nop
 80a0e1c:	20000000 	.word	0x20000000
 80a0e20:	20000124 	.word	0x20000124

080a0e24 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0e24:	2100      	movs	r1, #0
 80a0e26:	f7ff be19 	b.w	80a0a5c <system_delay_ms>

080a0e2a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0e2a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0e2c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0e2e:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0e30:	b113      	cbz	r3, 80a0e38 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0e32:	2203      	movs	r2, #3
 80a0e34:	4601      	mov	r1, r0
 80a0e36:	4798      	blx	r3
    }
 80a0e38:	4620      	mov	r0, r4
 80a0e3a:	bd10      	pop	{r4, pc}

080a0e3c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0e3c:	b510      	push	{r4, lr}
 80a0e3e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0e40:	f7ff fff3 	bl	80a0e2a <_ZNSt14_Function_baseD1Ev>
 80a0e44:	4620      	mov	r0, r4
 80a0e46:	bd10      	pop	{r4, pc}

080a0e48 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a0e48:	b513      	push	{r0, r1, r4, lr}
 80a0e4a:	460b      	mov	r3, r1
 80a0e4c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0e4e:	c803      	ldmia	r0, {r0, r1}
 80a0e50:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0e54:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0e58:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0e5c:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a0e60:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0e64:	b002      	add	sp, #8
 80a0e66:	bd10      	pop	{r4, pc}

080a0e68 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0e68:	4803      	ldr	r0, [pc, #12]	; (80a0e78 <_GLOBAL__sub_I_RGB+0x10>)
 80a0e6a:	2300      	movs	r3, #0
 80a0e6c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0e6e:	4a03      	ldr	r2, [pc, #12]	; (80a0e7c <_GLOBAL__sub_I_RGB+0x14>)
 80a0e70:	4903      	ldr	r1, [pc, #12]	; (80a0e80 <_GLOBAL__sub_I_RGB+0x18>)
 80a0e72:	f000 bf49 	b.w	80a1d08 <__aeabi_atexit>
 80a0e76:	bf00      	nop
 80a0e78:	20000128 	.word	0x20000128
 80a0e7c:	20000068 	.word	0x20000068
 80a0e80:	080a0e3d 	.word	0x080a0e3d

080a0e84 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0e84:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0e86:	4b14      	ldr	r3, [pc, #80]	; (80a0ed8 <serialEventRun+0x54>)
 80a0e88:	b133      	cbz	r3, 80a0e98 <serialEventRun+0x14>
 80a0e8a:	f000 fc1d 	bl	80a16c8 <_Z16_fetch_usbserialv>
 80a0e8e:	6803      	ldr	r3, [r0, #0]
 80a0e90:	691b      	ldr	r3, [r3, #16]
 80a0e92:	4798      	blx	r3
 80a0e94:	2800      	cmp	r0, #0
 80a0e96:	dc16      	bgt.n	80a0ec6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0e98:	4b10      	ldr	r3, [pc, #64]	; (80a0edc <serialEventRun+0x58>)
 80a0e9a:	b133      	cbz	r3, 80a0eaa <serialEventRun+0x26>
 80a0e9c:	f000 fcc4 	bl	80a1828 <_Z22__fetch_global_Serial1v>
 80a0ea0:	6803      	ldr	r3, [r0, #0]
 80a0ea2:	691b      	ldr	r3, [r3, #16]
 80a0ea4:	4798      	blx	r3
 80a0ea6:	2800      	cmp	r0, #0
 80a0ea8:	dc10      	bgt.n	80a0ecc <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0eaa:	4b0d      	ldr	r3, [pc, #52]	; (80a0ee0 <serialEventRun+0x5c>)
 80a0eac:	b10b      	cbz	r3, 80a0eb2 <serialEventRun+0x2e>
 80a0eae:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0eb2:	4b0c      	ldr	r3, [pc, #48]	; (80a0ee4 <serialEventRun+0x60>)
 80a0eb4:	b17b      	cbz	r3, 80a0ed6 <serialEventRun+0x52>
 80a0eb6:	f000 fc35 	bl	80a1724 <_Z17_fetch_usbserial1v>
 80a0eba:	6803      	ldr	r3, [r0, #0]
 80a0ebc:	691b      	ldr	r3, [r3, #16]
 80a0ebe:	4798      	blx	r3
 80a0ec0:	2800      	cmp	r0, #0
 80a0ec2:	dc06      	bgt.n	80a0ed2 <serialEventRun+0x4e>
 80a0ec4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0ec6:	f3af 8000 	nop.w
 80a0eca:	e7e5      	b.n	80a0e98 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0ecc:	f3af 8000 	nop.w
 80a0ed0:	e7eb      	b.n	80a0eaa <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0ed2:	f3af 8000 	nop.w
 80a0ed6:	bd08      	pop	{r3, pc}
	...

080a0ee8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0ee8:	b508      	push	{r3, lr}
	serialEventRun();
 80a0eea:	f7ff ffcb 	bl	80a0e84 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0eee:	f7ff fcb1 	bl	80a0854 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0ef2:	4b01      	ldr	r3, [pc, #4]	; (80a0ef8 <_post_loop+0x10>)
 80a0ef4:	6018      	str	r0, [r3, #0]
 80a0ef6:	bd08      	pop	{r3, pc}
 80a0ef8:	200001a0 	.word	0x200001a0

080a0efc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0efc:	4802      	ldr	r0, [pc, #8]	; (80a0f08 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0efe:	4a03      	ldr	r2, [pc, #12]	; (80a0f0c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0f00:	4903      	ldr	r1, [pc, #12]	; (80a0f10 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0f02:	1a12      	subs	r2, r2, r0
 80a0f04:	f001 bcb8 	b.w	80a2878 <memcpy>
 80a0f08:	40024000 	.word	0x40024000
 80a0f0c:	40024004 	.word	0x40024004
 80a0f10:	080a2ca0 	.word	0x080a2ca0

080a0f14 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0f14:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0f16:	2300      	movs	r3, #0
 80a0f18:	9300      	str	r3, [sp, #0]
 80a0f1a:	461a      	mov	r2, r3
 80a0f1c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0f20:	f7ff fdbe 	bl	80a0aa0 <system_ctrl_set_result>
}
 80a0f24:	b003      	add	sp, #12
 80a0f26:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0f2c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0f2c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0f2e:	8843      	ldrh	r3, [r0, #2]
 80a0f30:	2b0a      	cmp	r3, #10
 80a0f32:	d008      	beq.n	80a0f46 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0f34:	2b50      	cmp	r3, #80	; 0x50
 80a0f36:	d109      	bne.n	80a0f4c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0f38:	4b09      	ldr	r3, [pc, #36]	; (80a0f60 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0f3a:	681b      	ldr	r3, [r3, #0]
 80a0f3c:	b13b      	cbz	r3, 80a0f4e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0f3e:	b003      	add	sp, #12
 80a0f40:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0f44:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0f46:	f7ff ffe5 	bl	80a0f14 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0f4a:	e006      	b.n	80a0f5a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0f4c:	2300      	movs	r3, #0
 80a0f4e:	9300      	str	r3, [sp, #0]
 80a0f50:	461a      	mov	r2, r3
 80a0f52:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0f56:	f7ff fda3 	bl	80a0aa0 <system_ctrl_set_result>
        break;
    }
}
 80a0f5a:	b003      	add	sp, #12
 80a0f5c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0f60:	20000138 	.word	0x20000138

080a0f64 <module_user_init_hook>:

void module_user_init_hook()
{
 80a0f64:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0f66:	4c10      	ldr	r4, [pc, #64]	; (80a0fa8 <module_user_init_hook+0x44>)
 80a0f68:	4d10      	ldr	r5, [pc, #64]	; (80a0fac <module_user_init_hook+0x48>)
 80a0f6a:	6823      	ldr	r3, [r4, #0]
 80a0f6c:	42ab      	cmp	r3, r5
 80a0f6e:	4b10      	ldr	r3, [pc, #64]	; (80a0fb0 <module_user_init_hook+0x4c>)
 80a0f70:	bf0c      	ite	eq
 80a0f72:	2201      	moveq	r2, #1
 80a0f74:	2200      	movne	r2, #0
 80a0f76:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0f78:	d002      	beq.n	80a0f80 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0f7a:	f7ff ffbf 	bl	80a0efc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0f7e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0f80:	f7ff fc60 	bl	80a0844 <HAL_RNG_GetRandomNumber>
 80a0f84:	4604      	mov	r4, r0
    srand(seed);
 80a0f86:	f001 fc8b 	bl	80a28a0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0f8a:	4b0a      	ldr	r3, [pc, #40]	; (80a0fb4 <module_user_init_hook+0x50>)
 80a0f8c:	b113      	cbz	r3, 80a0f94 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0f8e:	4620      	mov	r0, r4
 80a0f90:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0f94:	2100      	movs	r1, #0
 80a0f96:	4807      	ldr	r0, [pc, #28]	; (80a0fb4 <module_user_init_hook+0x50>)
 80a0f98:	f7ff fdec 	bl	80a0b74 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0fa0:	2100      	movs	r1, #0
 80a0fa2:	4805      	ldr	r0, [pc, #20]	; (80a0fb8 <module_user_init_hook+0x54>)
 80a0fa4:	f7ff bd72 	b.w	80a0a8c <system_ctrl_set_app_request_handler>
 80a0fa8:	40024000 	.word	0x40024000
 80a0fac:	9a271c1e 	.word	0x9a271c1e
 80a0fb0:	2000013c 	.word	0x2000013c
 80a0fb4:	00000000 	.word	0x00000000
 80a0fb8:	080a0f2d 	.word	0x080a0f2d

080a0fbc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0fbc:	4770      	bx	lr

080a0fbe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a0fbe:	2000      	movs	r0, #0
 80a0fc0:	4770      	bx	lr

080a0fc2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0fc2:	b510      	push	{r4, lr}
 80a0fc4:	4604      	mov	r4, r0
 80a0fc6:	2110      	movs	r1, #16
 80a0fc8:	f000 feac 	bl	80a1d24 <_ZdlPvj>
 80a0fcc:	4620      	mov	r0, r4
 80a0fce:	bd10      	pop	{r4, pc}

080a0fd0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a0fd0:	b508      	push	{r3, lr}
      { delete this; }
 80a0fd2:	b108      	cbz	r0, 80a0fd8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a0fd4:	f7ff fff5 	bl	80a0fc2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0fd8:	bd08      	pop	{r3, pc}

080a0fda <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0fda:	2200      	movs	r2, #0
 80a0fdc:	6002      	str	r2, [r0, #0]
 80a0fde:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a0fe2:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a0fe4:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0fe6:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a0fea:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0fec:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0fee:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a0ff0:	680c      	ldr	r4, [r1, #0]
 80a0ff2:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0ff4:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a0ff6:	bd10      	pop	{r4, pc}

080a0ff8 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a0ff8:	b510      	push	{r4, lr}
 80a0ffa:	4604      	mov	r4, r0
    free((void*)msg_);
 80a0ffc:	6800      	ldr	r0, [r0, #0]
 80a0ffe:	f7ff fdc9 	bl	80a0b94 <free>
}
 80a1002:	4620      	mov	r0, r4
 80a1004:	bd10      	pop	{r4, pc}

080a1006 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a1006:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a1008:	68c4      	ldr	r4, [r0, #12]
 80a100a:	b1f4      	cbz	r4, 80a104a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a100c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a100e:	2b02      	cmp	r3, #2
 80a1010:	d103      	bne.n	80a101a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a1012:	f104 000c 	add.w	r0, r4, #12
 80a1016:	f7ff ffef 	bl	80a0ff8 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a101a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a101c:	b135      	cbz	r5, 80a102c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a101e:	4628      	mov	r0, r5
 80a1020:	f7ff ff03 	bl	80a0e2a <_ZNSt14_Function_baseD1Ev>
 80a1024:	2110      	movs	r1, #16
 80a1026:	4628      	mov	r0, r5
 80a1028:	f000 fe7c 	bl	80a1d24 <_ZdlPvj>
 80a102c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a102e:	b135      	cbz	r5, 80a103e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a1030:	4628      	mov	r0, r5
 80a1032:	f7ff fefa 	bl	80a0e2a <_ZNSt14_Function_baseD1Ev>
 80a1036:	2110      	movs	r1, #16
 80a1038:	4628      	mov	r0, r5
 80a103a:	f000 fe73 	bl	80a1d24 <_ZdlPvj>
 80a103e:	4620      	mov	r0, r4
 80a1040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1044:	2114      	movs	r1, #20
 80a1046:	f000 be6d 	b.w	80a1d24 <_ZdlPvj>
 80a104a:	bd38      	pop	{r3, r4, r5, pc}

080a104c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a104c:	b513      	push	{r0, r1, r4, lr}
 80a104e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1050:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a1054:	2300      	movs	r3, #0
 80a1056:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1058:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a105a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a105c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a105e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1060:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1062:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1064:	f7ff f83c 	bl	80a00e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1068:	4620      	mov	r0, r4
 80a106a:	b002      	add	sp, #8
 80a106c:	bd10      	pop	{r4, pc}

080a106e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a106e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1070:	460c      	mov	r4, r1
 80a1072:	4606      	mov	r6, r0
 80a1074:	460f      	mov	r7, r1
 80a1076:	f854 3b04 	ldr.w	r3, [r4], #4
 80a107a:	ad02      	add	r5, sp, #8
 80a107c:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a1080:	4621      	mov	r1, r4
 80a1082:	a801      	add	r0, sp, #4
 80a1084:	f7ff feb4 	bl	80a0df0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a1088:	4629      	mov	r1, r5
 80a108a:	4630      	mov	r0, r6
 80a108c:	f7ff ffde 	bl	80a104c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1090:	a801      	add	r0, sp, #4
 80a1092:	f7ff f825 	bl	80a00e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1096:	4620      	mov	r0, r4
 80a1098:	f7ff f822 	bl	80a00e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a109c:	4638      	mov	r0, r7
 80a109e:	2108      	movs	r1, #8
 80a10a0:	f000 fe40 	bl	80a1d24 <_ZdlPvj>
        return p;
    }
 80a10a4:	4630      	mov	r0, r6
 80a10a6:	b003      	add	sp, #12
 80a10a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a10ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a10ac:	b538      	push	{r3, r4, r5, lr}
 80a10ae:	2300      	movs	r3, #0
 80a10b0:	4604      	mov	r4, r0
 80a10b2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a10b4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a10b6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a10b8:	f7fe ffef 	bl	80a009a <_Znwj>
 80a10bc:	b128      	cbz	r0, 80a10ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a10be:	2301      	movs	r3, #1
 80a10c0:	6043      	str	r3, [r0, #4]
 80a10c2:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a10c4:	4b02      	ldr	r3, [pc, #8]	; (80a10d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a10c6:	60c5      	str	r5, [r0, #12]
 80a10c8:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a10ca:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a10cc:	4620      	mov	r0, r4
 80a10ce:	bd38      	pop	{r3, r4, r5, pc}
 80a10d0:	080a2ae8 	.word	0x080a2ae8

080a10d4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a10d4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a10d6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a10d8:	b90a      	cbnz	r2, 80a10de <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a10da:	f000 fe36 	bl	80a1d4a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a10de:	68c3      	ldr	r3, [r0, #12]
    }
 80a10e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a10e4:	4718      	bx	r3

080a10e6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a10e6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a10e8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a10ea:	f100 0110 	add.w	r1, r0, #16
 80a10ee:	f7ff fff1 	bl	80a10d4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a10f2:	bd08      	pop	{r3, pc}

080a10f4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a10f4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a10f6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a10f8:	b90a      	cbnz	r2, 80a10fe <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a10fa:	f000 fe26 	bl	80a1d4a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a10fe:	68c3      	ldr	r3, [r0, #12]
    }
 80a1100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1104:	4718      	bx	r3

080a1106 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a1106:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1108:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a110a:	f100 0110 	add.w	r1, r0, #16
 80a110e:	f7ff fff1 	bl	80a10f4 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1112:	bd08      	pop	{r3, pc}

080a1114 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1114:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1116:	2300      	movs	r3, #0
 80a1118:	6083      	str	r3, [r0, #8]
 80a111a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a111c:	4604      	mov	r4, r0
 80a111e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1120:	b12b      	cbz	r3, 80a112e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1122:	2202      	movs	r2, #2
 80a1124:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1126:	68eb      	ldr	r3, [r5, #12]
 80a1128:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a112a:	68ab      	ldr	r3, [r5, #8]
 80a112c:	60a3      	str	r3, [r4, #8]
	}
    }
 80a112e:	4620      	mov	r0, r4
 80a1130:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1134 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a1134:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1136:	b089      	sub	sp, #36	; 0x24
 80a1138:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a113a:	4668      	mov	r0, sp
 80a113c:	f7ff ff4d 	bl	80a0fda <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1140:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1144:	2300      	movs	r3, #0
 80a1146:	f88d 3008 	strb.w	r3, [sp, #8]
 80a114a:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a114e:	2b00      	cmp	r3, #0
 80a1150:	d103      	bne.n	80a115a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a1152:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a1156:	2900      	cmp	r1, #0
 80a1158:	d1f7      	bne.n	80a114a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a115a:	d002      	beq.n	80a1162 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a115c:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1160:	e063      	b.n	80a122a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a1162:	f114 050c 	adds.w	r5, r4, #12
 80a1166:	d003      	beq.n	80a1170 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a1168:	4669      	mov	r1, sp
 80a116a:	4628      	mov	r0, r5
 80a116c:	f7ff ff35 	bl	80a0fda <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1170:	f3bf 8f5f 	dmb	sy
 80a1174:	2301      	movs	r3, #1
 80a1176:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1178:	f3bf 8f5f 	dmb	sy
 80a117c:	f104 0308 	add.w	r3, r4, #8
 80a1180:	2000      	movs	r0, #0
 80a1182:	e853 6f00 	ldrex	r6, [r3]
 80a1186:	e843 0200 	strex	r2, r0, [r3]
 80a118a:	2a00      	cmp	r2, #0
 80a118c:	d1f9      	bne.n	80a1182 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a118e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1192:	2e00      	cmp	r6, #0
 80a1194:	d049      	beq.n	80a122a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1196:	f7ff fc69 	bl	80a0a6c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a119a:	b120      	cbz	r0, 80a11a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a119c:	4629      	mov	r1, r5
 80a119e:	4630      	mov	r0, r6
 80a11a0:	f7ff ff98 	bl	80a10d4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a11a4:	e03a      	b.n	80a121c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a11a6:	4631      	mov	r1, r6
 80a11a8:	a802      	add	r0, sp, #8
 80a11aa:	f7ff ffb3 	bl	80a1114 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a11ae:	68e0      	ldr	r0, [r4, #12]
 80a11b0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a11b4:	b108      	cbz	r0, 80a11ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a11b6:	f001 fb9b 	bl	80a28f0 <strdup>
 80a11ba:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a11bc:	2010      	movs	r0, #16
 80a11be:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a11c2:	f7fe ff6a 	bl	80a009a <_Znwj>
 80a11c6:	4605      	mov	r5, r0
 80a11c8:	b1e8      	cbz	r0, 80a1206 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a11ca:	2700      	movs	r7, #0
 80a11cc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a11ce:	2018      	movs	r0, #24
 80a11d0:	f7fe ff63 	bl	80a009a <_Znwj>
 80a11d4:	4604      	mov	r4, r0
 80a11d6:	b188      	cbz	r0, 80a11fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a11d8:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a11da:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a11dc:	a802      	add	r0, sp, #8
 80a11de:	f7ff fe33 	bl	80a0e48 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a11e2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a11e4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a11e6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a11e8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a11ea:	9204      	str	r2, [sp, #16]
 80a11ec:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a11ee:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a11f0:	60e3      	str	r3, [r4, #12]
 80a11f2:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a11f6:	9205      	str	r2, [sp, #20]
 80a11f8:	f7ff feef 	bl	80a0fda <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a11fc:	4b0d      	ldr	r3, [pc, #52]	; (80a1234 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a11fe:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1200:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1202:	4b0d      	ldr	r3, [pc, #52]	; (80a1238 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a1204:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a1206:	a806      	add	r0, sp, #24
 80a1208:	f7ff fef6 	bl	80a0ff8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a120c:	a802      	add	r0, sp, #8
 80a120e:	f7ff fe0c 	bl	80a0e2a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1212:	2200      	movs	r2, #0
 80a1214:	4629      	mov	r1, r5
 80a1216:	4809      	ldr	r0, [pc, #36]	; (80a123c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a1218:	f7ff fc30 	bl	80a0a7c <application_thread_invoke>
 80a121c:	4630      	mov	r0, r6
 80a121e:	f7ff fe04 	bl	80a0e2a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1222:	2110      	movs	r1, #16
 80a1224:	4630      	mov	r0, r6
 80a1226:	f000 fd7d 	bl	80a1d24 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a122a:	4668      	mov	r0, sp
 80a122c:	f7ff fee4 	bl	80a0ff8 <_ZN8particle5ErrorD1Ev>
    }
 80a1230:	b009      	add	sp, #36	; 0x24
 80a1232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1234:	080a10e7 	.word	0x080a10e7
 80a1238:	080a135d 	.word	0x080a135d
 80a123c:	080a18a9 	.word	0x080a18a9

080a1240 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1244:	b08b      	sub	sp, #44	; 0x2c
 80a1246:	4606      	mov	r6, r0
 80a1248:	460f      	mov	r7, r1
 80a124a:	4690      	mov	r8, r2
 80a124c:	4699      	mov	r9, r3
 80a124e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1252:	f7ff fc7f 	bl	80a0b54 <spark_cloud_flag_connected>
 80a1256:	ad07      	add	r5, sp, #28
    if (!connected()) {
 80a1258:	4683      	mov	fp, r0
 80a125a:	bb30      	cbnz	r0, 80a12aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a125c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a1260:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1262:	a905      	add	r1, sp, #20
 80a1264:	4628      	mov	r0, r5
 80a1266:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a126a:	f7ff feb6 	bl	80a0fda <_ZN8particle5ErrorC1EOS0_>
 80a126e:	2014      	movs	r0, #20
 80a1270:	f7fe ff13 	bl	80a009a <_Znwj>
 80a1274:	4604      	mov	r4, r0
 80a1276:	b158      	cbz	r0, 80a1290 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a1278:	2302      	movs	r3, #2
 80a127a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a127c:	2301      	movs	r3, #1
 80a127e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1280:	f8c0 b004 	str.w	fp, [r0, #4]
 80a1284:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a1288:	4629      	mov	r1, r5
 80a128a:	300c      	adds	r0, #12
 80a128c:	f7ff fea5 	bl	80a0fda <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a1290:	4630      	mov	r0, r6
 80a1292:	4621      	mov	r1, r4
 80a1294:	f840 4b04 	str.w	r4, [r0], #4
 80a1298:	f7ff ff08 	bl	80a10ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a129c:	4628      	mov	r0, r5
 80a129e:	f7ff feab 	bl	80a0ff8 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a12a2:	a805      	add	r0, sp, #20
 80a12a4:	f7ff fea8 	bl	80a0ff8 <_ZN8particle5ErrorD1Ev>
 80a12a8:	e052      	b.n	80a1350 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a12aa:	2400      	movs	r4, #0
 80a12ac:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a12ae:	2014      	movs	r0, #20
 80a12b0:	606c      	str	r4, [r5, #4]
 80a12b2:	60ac      	str	r4, [r5, #8]
 80a12b4:	9307      	str	r3, [sp, #28]
 80a12b6:	f7fe fef0 	bl	80a009a <_Znwj>
 80a12ba:	4601      	mov	r1, r0
 80a12bc:	b118      	cbz	r0, 80a12c6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a12be:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a12c0:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a12c2:	6044      	str	r4, [r0, #4]
 80a12c4:	6084      	str	r4, [r0, #8]
 80a12c6:	a804      	add	r0, sp, #16
 80a12c8:	9103      	str	r1, [sp, #12]
 80a12ca:	f7ff feef 	bl	80a10ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a12ce:	4b22      	ldr	r3, [pc, #136]	; (80a1358 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a12d0:	2008      	movs	r0, #8
 80a12d2:	9308      	str	r3, [sp, #32]
 80a12d4:	f7fe fee1 	bl	80a009a <_Znwj>
 80a12d8:	4604      	mov	r4, r0
 80a12da:	b128      	cbz	r0, 80a12e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a12dc:	9b03      	ldr	r3, [sp, #12]
 80a12de:	a904      	add	r1, sp, #16
 80a12e0:	f840 3b04 	str.w	r3, [r0], #4
 80a12e4:	f7ff fd84 	bl	80a0df0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a12e8:	9500      	str	r5, [sp, #0]
 80a12ea:	fa5f f38a 	uxtb.w	r3, sl
 80a12ee:	464a      	mov	r2, r9
 80a12f0:	4641      	mov	r1, r8
 80a12f2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a12f4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a12f6:	f7ff fc35 	bl	80a0b64 <spark_send_event>
 80a12fa:	b920      	cbnz	r0, 80a1306 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a12fc:	9b03      	ldr	r3, [sp, #12]
 80a12fe:	785b      	ldrb	r3, [r3, #1]
 80a1300:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1304:	b183      	cbz	r3, 80a1328 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a1306:	9b03      	ldr	r3, [sp, #12]
 80a1308:	a904      	add	r1, sp, #16
 80a130a:	a806      	add	r0, sp, #24
 80a130c:	9305      	str	r3, [sp, #20]
 80a130e:	f7ff fd6f 	bl	80a0df0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a1312:	a905      	add	r1, sp, #20
 80a1314:	4630      	mov	r0, r6
 80a1316:	f7ff fe99 	bl	80a104c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a131a:	a806      	add	r0, sp, #24
 80a131c:	f7fe fee0 	bl	80a00e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1320:	a804      	add	r0, sp, #16
 80a1322:	f7fe fedd 	bl	80a00e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1326:	e013      	b.n	80a1350 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a1328:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a132c:	a905      	add	r1, sp, #20
 80a132e:	a803      	add	r0, sp, #12
 80a1330:	9205      	str	r2, [sp, #20]
 80a1332:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1336:	f7ff fefd 	bl	80a1134 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a133a:	a805      	add	r0, sp, #20
 80a133c:	f7ff fe5c 	bl	80a0ff8 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1340:	a805      	add	r0, sp, #20
 80a1342:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1344:	f7ff fe93 	bl	80a106e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a1348:	a806      	add	r0, sp, #24
 80a134a:	f7fe fec9 	bl	80a00e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a134e:	e7da      	b.n	80a1306 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 80a1350:	4630      	mov	r0, r6
 80a1352:	b00b      	add	sp, #44	; 0x2c
 80a1354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1358:	080a14cd 	.word	0x080a14cd

080a135c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a135c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a135e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1360:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1362:	d006      	beq.n	80a1372 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a1364:	2a03      	cmp	r2, #3
 80a1366:	d017      	beq.n	80a1398 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a1368:	2a01      	cmp	r2, #1
 80a136a:	d122      	bne.n	80a13b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a136c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a136e:	6003      	str	r3, [r0, #0]
	      break;
 80a1370:	e01f      	b.n	80a13b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1372:	2018      	movs	r0, #24
 80a1374:	680e      	ldr	r6, [r1, #0]
 80a1376:	f7fe fe90 	bl	80a009a <_Znwj>
 80a137a:	4605      	mov	r5, r0
 80a137c:	b150      	cbz	r0, 80a1394 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a137e:	4631      	mov	r1, r6
 80a1380:	f7ff fec8 	bl	80a1114 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1384:	6930      	ldr	r0, [r6, #16]
 80a1386:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a138a:	b108      	cbz	r0, 80a1390 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a138c:	f001 fab0 	bl	80a28f0 <strdup>
 80a1390:	6128      	str	r0, [r5, #16]
 80a1392:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1394:	6025      	str	r5, [r4, #0]
 80a1396:	e00c      	b.n	80a13b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1398:	6804      	ldr	r4, [r0, #0]
 80a139a:	b154      	cbz	r4, 80a13b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a139c:	f104 0010 	add.w	r0, r4, #16
 80a13a0:	f7ff fe2a 	bl	80a0ff8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a13a4:	4620      	mov	r0, r4
 80a13a6:	f7ff fd40 	bl	80a0e2a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a13aa:	2118      	movs	r1, #24
 80a13ac:	4620      	mov	r0, r4
 80a13ae:	f000 fcb9 	bl	80a1d24 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a13b2:	2000      	movs	r0, #0
 80a13b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a13b6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a13b6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a13b8:	2300      	movs	r3, #0
 80a13ba:	6083      	str	r3, [r0, #8]
 80a13bc:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a13be:	4604      	mov	r4, r0
 80a13c0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a13c2:	b12b      	cbz	r3, 80a13d0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a13c4:	2202      	movs	r2, #2
 80a13c6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a13c8:	68eb      	ldr	r3, [r5, #12]
 80a13ca:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a13cc:	68ab      	ldr	r3, [r5, #8]
 80a13ce:	60a3      	str	r3, [r4, #8]
	}
    }
 80a13d0:	4620      	mov	r0, r4
 80a13d2:	bd38      	pop	{r3, r4, r5, pc}

080a13d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a13d4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a13d6:	b570      	push	{r4, r5, r6, lr}
 80a13d8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a13da:	d006      	beq.n	80a13ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a13dc:	2a03      	cmp	r2, #3
 80a13de:	d011      	beq.n	80a1404 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a13e0:	2a01      	cmp	r2, #1
 80a13e2:	d118      	bne.n	80a1416 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a13e4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a13e6:	6003      	str	r3, [r0, #0]
	      break;
 80a13e8:	e015      	b.n	80a1416 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a13ea:	2014      	movs	r0, #20
 80a13ec:	680e      	ldr	r6, [r1, #0]
 80a13ee:	f7fe fe54 	bl	80a009a <_Znwj>
 80a13f2:	4605      	mov	r5, r0
 80a13f4:	b120      	cbz	r0, 80a1400 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a13f6:	4631      	mov	r1, r6
 80a13f8:	f7ff ffdd 	bl	80a13b6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a13fc:	7c33      	ldrb	r3, [r6, #16]
 80a13fe:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1400:	6025      	str	r5, [r4, #0]
 80a1402:	e008      	b.n	80a1416 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1404:	6804      	ldr	r4, [r0, #0]
 80a1406:	b134      	cbz	r4, 80a1416 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1408:	4620      	mov	r0, r4
 80a140a:	f7ff fd0e 	bl	80a0e2a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a140e:	2114      	movs	r1, #20
 80a1410:	4620      	mov	r0, r4
 80a1412:	f000 fc87 	bl	80a1d24 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1416:	2000      	movs	r0, #0
 80a1418:	bd70      	pop	{r4, r5, r6, pc}
	...

080a141c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a141c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a141e:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1420:	f3bf 8f5f 	dmb	sy
 80a1424:	b087      	sub	sp, #28
 80a1426:	2300      	movs	r3, #0
 80a1428:	e850 6f00 	ldrex	r6, [r0]
 80a142c:	e840 3200 	strex	r2, r3, [r0]
 80a1430:	2a00      	cmp	r2, #0
 80a1432:	d1f9      	bne.n	80a1428 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a1434:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1438:	2e00      	cmp	r6, #0
 80a143a:	d03f      	beq.n	80a14bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a143c:	4618      	mov	r0, r3
 80a143e:	f7ff fb15 	bl	80a0a6c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1442:	4607      	mov	r7, r0
 80a1444:	b120      	cbz	r0, 80a1450 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1446:	4621      	mov	r1, r4
 80a1448:	4630      	mov	r0, r6
 80a144a:	f7ff fe53 	bl	80a10f4 <_ZNKSt8functionIFvRKbEEclES1_>
 80a144e:	e02e      	b.n	80a14ae <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1450:	4631      	mov	r1, r6
 80a1452:	a801      	add	r0, sp, #4
 80a1454:	f7ff ffaf 	bl	80a13b6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1458:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a145a:	2010      	movs	r0, #16
 80a145c:	f88d 3014 	strb.w	r3, [sp, #20]
 80a1460:	f7fe fe1b 	bl	80a009a <_Znwj>
 80a1464:	4605      	mov	r5, r0
 80a1466:	b1d0      	cbz	r0, 80a149e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1468:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a146a:	2014      	movs	r0, #20
 80a146c:	f7fe fe15 	bl	80a009a <_Znwj>
 80a1470:	4604      	mov	r4, r0
 80a1472:	b178      	cbz	r0, 80a1494 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1474:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1476:	4601      	mov	r1, r0
 80a1478:	a801      	add	r0, sp, #4
 80a147a:	f7ff fce5 	bl	80a0e48 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a147e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1480:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1482:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1484:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1486:	9203      	str	r2, [sp, #12]
 80a1488:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a148a:	60e3      	str	r3, [r4, #12]
 80a148c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1490:	9204      	str	r2, [sp, #16]
 80a1492:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1494:	4b0a      	ldr	r3, [pc, #40]	; (80a14c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1496:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1498:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a149a:	4b0a      	ldr	r3, [pc, #40]	; (80a14c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a149c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a149e:	a801      	add	r0, sp, #4
 80a14a0:	f7ff fcc3 	bl	80a0e2a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a14a4:	2200      	movs	r2, #0
 80a14a6:	4629      	mov	r1, r5
 80a14a8:	4807      	ldr	r0, [pc, #28]	; (80a14c8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a14aa:	f7ff fae7 	bl	80a0a7c <application_thread_invoke>
 80a14ae:	4630      	mov	r0, r6
 80a14b0:	f7ff fcbb 	bl	80a0e2a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a14b4:	2110      	movs	r1, #16
 80a14b6:	4630      	mov	r0, r6
 80a14b8:	f000 fc34 	bl	80a1d24 <_ZdlPvj>
        }
    }
 80a14bc:	b007      	add	sp, #28
 80a14be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a14c0:	080a1107 	.word	0x080a1107
 80a14c4:	080a13d5 	.word	0x080a13d5
 80a14c8:	080a18a9 	.word	0x080a18a9

080a14cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a14cc:	b530      	push	{r4, r5, lr}
 80a14ce:	4604      	mov	r4, r0
 80a14d0:	b085      	sub	sp, #20
 80a14d2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a14d4:	4668      	mov	r0, sp
 80a14d6:	4611      	mov	r1, r2
 80a14d8:	f7ff fdc9 	bl	80a106e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a14dc:	b17c      	cbz	r4, 80a14fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a14de:	b224      	sxth	r4, r4
 80a14e0:	4628      	mov	r0, r5
 80a14e2:	b10d      	cbz	r5, 80a14e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a14e4:	f001 fa04 	bl	80a28f0 <strdup>
 80a14e8:	9002      	str	r0, [sp, #8]
 80a14ea:	a902      	add	r1, sp, #8
 80a14ec:	4668      	mov	r0, sp
 80a14ee:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a14f2:	f7ff fe1f 	bl	80a1134 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a14f6:	a802      	add	r0, sp, #8
 80a14f8:	f7ff fd7e 	bl	80a0ff8 <_ZN8particle5ErrorD1Ev>
 80a14fc:	e01d      	b.n	80a153a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a14fe:	f04f 0201 	mov.w	r2, #1
 80a1502:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1504:	f88d 4008 	strb.w	r4, [sp, #8]
 80a1508:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a150c:	42a3      	cmp	r3, r4
 80a150e:	d103      	bne.n	80a1518 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a1510:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a1514:	2900      	cmp	r1, #0
 80a1516:	d1f7      	bne.n	80a1508 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a1518:	d002      	beq.n	80a1520 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a151a:	f88d 3008 	strb.w	r3, [sp, #8]
 80a151e:	e00c      	b.n	80a153a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a1520:	f110 010c 	adds.w	r1, r0, #12
 80a1524:	f04f 0301 	mov.w	r3, #1
 80a1528:	bf18      	it	ne
 80a152a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a152c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a1530:	3004      	adds	r0, #4
 80a1532:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a1536:	f7ff ff71 	bl	80a141c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a153a:	a801      	add	r0, sp, #4
 80a153c:	f7fe fdd0 	bl	80a00e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a1540:	b005      	add	sp, #20
 80a1542:	bd30      	pop	{r4, r5, pc}

080a1544 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1544:	4770      	bx	lr

080a1546 <_ZN9IPAddressD0Ev>:
 80a1546:	b510      	push	{r4, lr}
 80a1548:	4604      	mov	r4, r0
 80a154a:	2118      	movs	r1, #24
 80a154c:	f000 fbea 	bl	80a1d24 <_ZdlPvj>
 80a1550:	4620      	mov	r0, r4
 80a1552:	bd10      	pop	{r4, pc}

080a1554 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1556:	460f      	mov	r7, r1
 80a1558:	f100 0608 	add.w	r6, r0, #8
 80a155c:	1d05      	adds	r5, r0, #4
 80a155e:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1560:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1564:	220a      	movs	r2, #10
 80a1566:	4638      	mov	r0, r7
 80a1568:	f7ff fc1d 	bl	80a0da6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a156c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a156e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1570:	d007      	beq.n	80a1582 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1572:	2c00      	cmp	r4, #0
 80a1574:	d0f4      	beq.n	80a1560 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1576:	212e      	movs	r1, #46	; 0x2e
 80a1578:	4638      	mov	r0, r7
 80a157a:	f7ff fc11 	bl	80a0da0 <_ZN5Print5printEc>
 80a157e:	4404      	add	r4, r0
 80a1580:	e7ee      	b.n	80a1560 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1582:	4620      	mov	r0, r4
 80a1584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1588 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1588:	b510      	push	{r4, lr}
 80a158a:	4604      	mov	r4, r0
 80a158c:	4b04      	ldr	r3, [pc, #16]	; (80a15a0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a158e:	2211      	movs	r2, #17
 80a1590:	f840 3b04 	str.w	r3, [r0], #4
 80a1594:	2100      	movs	r1, #0
 80a1596:	f001 f97a 	bl	80a288e <memset>
{
    clear();
}
 80a159a:	4620      	mov	r0, r4
 80a159c:	bd10      	pop	{r4, pc}
 80a159e:	bf00      	nop
 80a15a0:	080a2b04 	.word	0x080a2b04

080a15a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a15a4:	4603      	mov	r3, r0
 80a15a6:	4a07      	ldr	r2, [pc, #28]	; (80a15c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a15a8:	b510      	push	{r4, lr}
 80a15aa:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a15ae:	f101 0210 	add.w	r2, r1, #16
 80a15b2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a15b6:	4291      	cmp	r1, r2
 80a15b8:	f843 4b04 	str.w	r4, [r3], #4
 80a15bc:	d1f9      	bne.n	80a15b2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a15be:	780a      	ldrb	r2, [r1, #0]
 80a15c0:	701a      	strb	r2, [r3, #0]
}
 80a15c2:	bd10      	pop	{r4, pc}
 80a15c4:	080a2b04 	.word	0x080a2b04

080a15c8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a15c8:	4a02      	ldr	r2, [pc, #8]	; (80a15d4 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a15ca:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a15cc:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a15ce:	2204      	movs	r2, #4
 80a15d0:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a15d2:	4770      	bx	lr
 80a15d4:	080a2b04 	.word	0x080a2b04

080a15d8 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a15d8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a15da:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a15de:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a15e2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a15e6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a15ea:	2304      	movs	r3, #4
 80a15ec:	6041      	str	r1, [r0, #4]
 80a15ee:	7503      	strb	r3, [r0, #20]
 80a15f0:	bd10      	pop	{r4, pc}
	...

080a15f4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a15f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a15f6:	4d04      	ldr	r5, [pc, #16]	; (80a1608 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a15f8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a15fa:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a15fe:	9500      	str	r5, [sp, #0]
 80a1600:	f7ff ffea 	bl	80a15d8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1604:	b003      	add	sp, #12
 80a1606:	bd30      	pop	{r4, r5, pc}
 80a1608:	080a2b04 	.word	0x080a2b04

080a160c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a160c:	7441      	strb	r1, [r0, #17]
 80a160e:	4770      	bx	lr

080a1610 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1610:	4770      	bx	lr

080a1612 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1612:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1614:	2100      	movs	r1, #0
 80a1616:	7c00      	ldrb	r0, [r0, #16]
 80a1618:	f7ff f9f8 	bl	80a0a0c <HAL_USB_USART_Receive_Data>
}
 80a161c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1620:	bf28      	it	cs
 80a1622:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1626:	bd08      	pop	{r3, pc}

080a1628 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1628:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a162a:	2101      	movs	r1, #1
 80a162c:	7c00      	ldrb	r0, [r0, #16]
 80a162e:	f7ff f9ed 	bl	80a0a0c <HAL_USB_USART_Receive_Data>
}
 80a1632:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1636:	bf28      	it	cs
 80a1638:	f04f 30ff 	movcs.w	r0, #4294967295
 80a163c:	bd08      	pop	{r3, pc}

080a163e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a163e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1640:	7c00      	ldrb	r0, [r0, #16]
 80a1642:	f7ff f9db 	bl	80a09fc <HAL_USB_USART_Available_Data_For_Write>
}
 80a1646:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a164a:	bd08      	pop	{r3, pc}

080a164c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a164c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a164e:	7c00      	ldrb	r0, [r0, #16]
 80a1650:	f7ff f9cc 	bl	80a09ec <HAL_USB_USART_Available_Data>
}
 80a1654:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1658:	bd08      	pop	{r3, pc}

080a165a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a165a:	7c00      	ldrb	r0, [r0, #16]
 80a165c:	f7ff b9e6 	b.w	80a0a2c <HAL_USB_USART_Flush_Data>

080a1660 <_ZN9USBSerialD0Ev>:
 80a1660:	b510      	push	{r4, lr}
 80a1662:	4604      	mov	r4, r0
 80a1664:	2114      	movs	r1, #20
 80a1666:	f000 fb5d 	bl	80a1d24 <_ZdlPvj>
 80a166a:	4620      	mov	r0, r4
 80a166c:	bd10      	pop	{r4, pc}

080a166e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a166e:	b538      	push	{r3, r4, r5, lr}
 80a1670:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1672:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1674:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1676:	f7ff f9c1 	bl	80a09fc <HAL_USB_USART_Available_Data_For_Write>
 80a167a:	2800      	cmp	r0, #0
 80a167c:	dc01      	bgt.n	80a1682 <_ZN9USBSerial5writeEh+0x14>
 80a167e:	7c60      	ldrb	r0, [r4, #17]
 80a1680:	b128      	cbz	r0, 80a168e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1682:	4629      	mov	r1, r5
 80a1684:	7c20      	ldrb	r0, [r4, #16]
 80a1686:	f7ff f9c9 	bl	80a0a1c <HAL_USB_USART_Send_Data>
 80a168a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a168e:	bd38      	pop	{r3, r4, r5, pc}

080a1690 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1690:	b510      	push	{r4, lr}
 80a1692:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1694:	2300      	movs	r3, #0
 80a1696:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a169c:	60a3      	str	r3, [r4, #8]
 80a169e:	4b05      	ldr	r3, [pc, #20]	; (80a16b4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a16a0:	4608      	mov	r0, r1
 80a16a2:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a16a4:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a16a6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a16a8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a16aa:	4611      	mov	r1, r2
 80a16ac:	f7ff f996 	bl	80a09dc <HAL_USB_USART_Init>
}
 80a16b0:	4620      	mov	r0, r4
 80a16b2:	bd10      	pop	{r4, pc}
 80a16b4:	080a2b18 	.word	0x080a2b18

080a16b8 <_Z19acquireSerialBufferv>:
 80a16b8:	b510      	push	{r4, lr}
 80a16ba:	4604      	mov	r4, r0
 80a16bc:	2214      	movs	r2, #20
 80a16be:	2100      	movs	r1, #0
 80a16c0:	f001 f8e5 	bl	80a288e <memset>
 80a16c4:	4620      	mov	r0, r4
 80a16c6:	bd10      	pop	{r4, pc}

080a16c8 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a16c8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a16ca:	4d0e      	ldr	r5, [pc, #56]	; (80a1704 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a16cc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a16ce:	a801      	add	r0, sp, #4
 80a16d0:	f7ff fff2 	bl	80a16b8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a16d4:	6829      	ldr	r1, [r5, #0]
 80a16d6:	f011 0401 	ands.w	r4, r1, #1
 80a16da:	d110      	bne.n	80a16fe <_Z16_fetch_usbserialv+0x36>
 80a16dc:	4628      	mov	r0, r5
 80a16de:	f7fe fce0 	bl	80a00a2 <__cxa_guard_acquire>
 80a16e2:	b160      	cbz	r0, 80a16fe <_Z16_fetch_usbserialv+0x36>
 80a16e4:	aa01      	add	r2, sp, #4
 80a16e6:	4621      	mov	r1, r4
 80a16e8:	4807      	ldr	r0, [pc, #28]	; (80a1708 <_Z16_fetch_usbserialv+0x40>)
 80a16ea:	f7ff ffd1 	bl	80a1690 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a16ee:	4628      	mov	r0, r5
 80a16f0:	f7fe fcdc 	bl	80a00ac <__cxa_guard_release>
 80a16f4:	4a05      	ldr	r2, [pc, #20]	; (80a170c <_Z16_fetch_usbserialv+0x44>)
 80a16f6:	4906      	ldr	r1, [pc, #24]	; (80a1710 <_Z16_fetch_usbserialv+0x48>)
 80a16f8:	4803      	ldr	r0, [pc, #12]	; (80a1708 <_Z16_fetch_usbserialv+0x40>)
 80a16fa:	f000 fb05 	bl	80a1d08 <__aeabi_atexit>
	return _usbserial;
}
 80a16fe:	4802      	ldr	r0, [pc, #8]	; (80a1708 <_Z16_fetch_usbserialv+0x40>)
 80a1700:	b007      	add	sp, #28
 80a1702:	bd30      	pop	{r4, r5, pc}
 80a1704:	20000140 	.word	0x20000140
 80a1708:	20000148 	.word	0x20000148
 80a170c:	20000068 	.word	0x20000068
 80a1710:	080a1611 	.word	0x080a1611

080a1714 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1714:	b510      	push	{r4, lr}
 80a1716:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1718:	2214      	movs	r2, #20
 80a171a:	2100      	movs	r1, #0
 80a171c:	f001 f8b7 	bl	80a288e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1720:	4620      	mov	r0, r4
 80a1722:	bd10      	pop	{r4, pc}

080a1724 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1724:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1726:	4c0e      	ldr	r4, [pc, #56]	; (80a1760 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1728:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a172a:	a801      	add	r0, sp, #4
 80a172c:	f7ff fff2 	bl	80a1714 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1730:	6823      	ldr	r3, [r4, #0]
 80a1732:	07db      	lsls	r3, r3, #31
 80a1734:	d410      	bmi.n	80a1758 <_Z17_fetch_usbserial1v+0x34>
 80a1736:	4620      	mov	r0, r4
 80a1738:	f7fe fcb3 	bl	80a00a2 <__cxa_guard_acquire>
 80a173c:	b160      	cbz	r0, 80a1758 <_Z17_fetch_usbserial1v+0x34>
 80a173e:	aa01      	add	r2, sp, #4
 80a1740:	2101      	movs	r1, #1
 80a1742:	4808      	ldr	r0, [pc, #32]	; (80a1764 <_Z17_fetch_usbserial1v+0x40>)
 80a1744:	f7ff ffa4 	bl	80a1690 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1748:	4620      	mov	r0, r4
 80a174a:	f7fe fcaf 	bl	80a00ac <__cxa_guard_release>
 80a174e:	4a06      	ldr	r2, [pc, #24]	; (80a1768 <_Z17_fetch_usbserial1v+0x44>)
 80a1750:	4906      	ldr	r1, [pc, #24]	; (80a176c <_Z17_fetch_usbserial1v+0x48>)
 80a1752:	4804      	ldr	r0, [pc, #16]	; (80a1764 <_Z17_fetch_usbserial1v+0x40>)
 80a1754:	f000 fad8 	bl	80a1d08 <__aeabi_atexit>
  return _usbserial1;
}
 80a1758:	4802      	ldr	r0, [pc, #8]	; (80a1764 <_Z17_fetch_usbserial1v+0x40>)
 80a175a:	b006      	add	sp, #24
 80a175c:	bd10      	pop	{r4, pc}
 80a175e:	bf00      	nop
 80a1760:	20000144 	.word	0x20000144
 80a1764:	2000015c 	.word	0x2000015c
 80a1768:	20000068 	.word	0x20000068
 80a176c:	080a1611 	.word	0x080a1611

080a1770 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1770:	4770      	bx	lr

080a1772 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1772:	7441      	strb	r1, [r0, #17]
 80a1774:	4770      	bx	lr

080a1776 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1776:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1778:	7c00      	ldrb	r0, [r0, #16]
 80a177a:	f7ff f8cb 	bl	80a0914 <HAL_USART_Available_Data_For_Write>
}
 80a177e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1782:	bd08      	pop	{r3, pc}

080a1784 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1784:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1786:	7c00      	ldrb	r0, [r0, #16]
 80a1788:	f7ff f89c 	bl	80a08c4 <HAL_USART_Available_Data>
}
 80a178c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1790:	bd08      	pop	{r3, pc}

080a1792 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1792:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1794:	7c00      	ldrb	r0, [r0, #16]
 80a1796:	f7ff f8a5 	bl	80a08e4 <HAL_USART_Peek_Data>
}
 80a179a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a179e:	bf28      	it	cs
 80a17a0:	f04f 30ff 	movcs.w	r0, #4294967295
 80a17a4:	bd08      	pop	{r3, pc}

080a17a6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a17a6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a17a8:	7c00      	ldrb	r0, [r0, #16]
 80a17aa:	f7ff f893 	bl	80a08d4 <HAL_USART_Read_Data>
}
 80a17ae:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a17b2:	bf28      	it	cs
 80a17b4:	f04f 30ff 	movcs.w	r0, #4294967295
 80a17b8:	bd08      	pop	{r3, pc}

080a17ba <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a17ba:	7c00      	ldrb	r0, [r0, #16]
 80a17bc:	f7ff b89a 	b.w	80a08f4 <HAL_USART_Flush_Data>

080a17c0 <_ZN11USARTSerialD0Ev>:
 80a17c0:	b510      	push	{r4, lr}
 80a17c2:	4604      	mov	r4, r0
 80a17c4:	2114      	movs	r1, #20
 80a17c6:	f000 faad 	bl	80a1d24 <_ZdlPvj>
 80a17ca:	4620      	mov	r0, r4
 80a17cc:	bd10      	pop	{r4, pc}

080a17ce <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a17ce:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a17d0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a17d2:	4604      	mov	r4, r0
 80a17d4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a17d6:	b925      	cbnz	r5, 80a17e2 <_ZN11USARTSerial5writeEh+0x14>
 80a17d8:	7c00      	ldrb	r0, [r0, #16]
 80a17da:	f7ff f89b 	bl	80a0914 <HAL_USART_Available_Data_For_Write>
 80a17de:	2800      	cmp	r0, #0
 80a17e0:	dd05      	ble.n	80a17ee <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a17e2:	4631      	mov	r1, r6
 80a17e4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a17e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a17ea:	f7ff b863 	b.w	80a08b4 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a17ee:	4628      	mov	r0, r5
 80a17f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a17f4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a17f4:	b510      	push	{r4, lr}
 80a17f6:	4604      	mov	r4, r0
 80a17f8:	4608      	mov	r0, r1
 80a17fa:	4611      	mov	r1, r2
 80a17fc:	2200      	movs	r2, #0
 80a17fe:	6062      	str	r2, [r4, #4]
 80a1800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1804:	60a2      	str	r2, [r4, #8]
 80a1806:	4a05      	ldr	r2, [pc, #20]	; (80a181c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1808:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a180a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a180c:	2201      	movs	r2, #1
 80a180e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1810:	461a      	mov	r2, r3
 80a1812:	f7ff f847 	bl	80a08a4 <HAL_USART_Init>
}
 80a1816:	4620      	mov	r0, r4
 80a1818:	bd10      	pop	{r4, pc}
 80a181a:	bf00      	nop
 80a181c:	080a2b48 	.word	0x080a2b48

080a1820 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1820:	7c00      	ldrb	r0, [r0, #16]
 80a1822:	f7ff b86f 	b.w	80a0904 <HAL_USART_Is_Enabled>
	...

080a1828 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a182a:	4c19      	ldr	r4, [pc, #100]	; (80a1890 <_Z22__fetch_global_Serial1v+0x68>)
 80a182c:	6825      	ldr	r5, [r4, #0]
 80a182e:	b94d      	cbnz	r5, 80a1844 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a1830:	2084      	movs	r0, #132	; 0x84
 80a1832:	f7fe fc32 	bl	80a009a <_Znwj>
 80a1836:	4606      	mov	r6, r0
 80a1838:	b118      	cbz	r0, 80a1842 <_Z22__fetch_global_Serial1v+0x1a>
 80a183a:	2284      	movs	r2, #132	; 0x84
 80a183c:	4629      	mov	r1, r5
 80a183e:	f001 f826 	bl	80a288e <memset>
 80a1842:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a1844:	4d13      	ldr	r5, [pc, #76]	; (80a1894 <_Z22__fetch_global_Serial1v+0x6c>)
 80a1846:	682e      	ldr	r6, [r5, #0]
 80a1848:	b94e      	cbnz	r6, 80a185e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a184a:	2084      	movs	r0, #132	; 0x84
 80a184c:	f7fe fc25 	bl	80a009a <_Znwj>
 80a1850:	4607      	mov	r7, r0
 80a1852:	b118      	cbz	r0, 80a185c <_Z22__fetch_global_Serial1v+0x34>
 80a1854:	2284      	movs	r2, #132	; 0x84
 80a1856:	4631      	mov	r1, r6
 80a1858:	f001 f819 	bl	80a288e <memset>
 80a185c:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a185e:	4f0e      	ldr	r7, [pc, #56]	; (80a1898 <_Z22__fetch_global_Serial1v+0x70>)
 80a1860:	6839      	ldr	r1, [r7, #0]
 80a1862:	f011 0601 	ands.w	r6, r1, #1
 80a1866:	d111      	bne.n	80a188c <_Z22__fetch_global_Serial1v+0x64>
 80a1868:	4638      	mov	r0, r7
 80a186a:	f7fe fc1a 	bl	80a00a2 <__cxa_guard_acquire>
 80a186e:	b168      	cbz	r0, 80a188c <_Z22__fetch_global_Serial1v+0x64>
 80a1870:	6822      	ldr	r2, [r4, #0]
 80a1872:	4631      	mov	r1, r6
 80a1874:	682b      	ldr	r3, [r5, #0]
 80a1876:	4809      	ldr	r0, [pc, #36]	; (80a189c <_Z22__fetch_global_Serial1v+0x74>)
 80a1878:	f7ff ffbc 	bl	80a17f4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a187c:	4638      	mov	r0, r7
 80a187e:	f7fe fc15 	bl	80a00ac <__cxa_guard_release>
 80a1882:	4a07      	ldr	r2, [pc, #28]	; (80a18a0 <_Z22__fetch_global_Serial1v+0x78>)
 80a1884:	4907      	ldr	r1, [pc, #28]	; (80a18a4 <_Z22__fetch_global_Serial1v+0x7c>)
 80a1886:	4805      	ldr	r0, [pc, #20]	; (80a189c <_Z22__fetch_global_Serial1v+0x74>)
 80a1888:	f000 fa3e 	bl	80a1d08 <__aeabi_atexit>
#endif
	return serial1;
}
 80a188c:	4803      	ldr	r0, [pc, #12]	; (80a189c <_Z22__fetch_global_Serial1v+0x74>)
 80a188e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1890:	2000018c 	.word	0x2000018c
 80a1894:	20000184 	.word	0x20000184
 80a1898:	20000188 	.word	0x20000188
 80a189c:	20000170 	.word	0x20000170
 80a18a0:	20000068 	.word	0x20000068
 80a18a4:	080a1771 	.word	0x080a1771

080a18a8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a18a8:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a18aa:	6883      	ldr	r3, [r0, #8]
 80a18ac:	4604      	mov	r4, r0
 80a18ae:	b90b      	cbnz	r3, 80a18b4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a18b0:	f000 fa4b 	bl	80a1d4a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a18b4:	68c3      	ldr	r3, [r0, #12]
 80a18b6:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a18b8:	68a3      	ldr	r3, [r4, #8]
 80a18ba:	b11b      	cbz	r3, 80a18c4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a18bc:	2203      	movs	r2, #3
 80a18be:	4621      	mov	r1, r4
 80a18c0:	4620      	mov	r0, r4
 80a18c2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a18c4:	4620      	mov	r0, r4
}
 80a18c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a18ca:	2110      	movs	r1, #16
 80a18cc:	f000 ba2a 	b.w	80a1d24 <_ZdlPvj>

080a18d0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a18d0:	4770      	bx	lr

080a18d2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a18d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a18d4:	4606      	mov	r6, r0
 80a18d6:	4615      	mov	r5, r2
 80a18d8:	460c      	mov	r4, r1
 80a18da:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a18dc:	42bc      	cmp	r4, r7
 80a18de:	d006      	beq.n	80a18ee <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a18e0:	6833      	ldr	r3, [r6, #0]
 80a18e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a18e6:	689b      	ldr	r3, [r3, #8]
 80a18e8:	4630      	mov	r0, r6
 80a18ea:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a18ec:	e7f6      	b.n	80a18dc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a18ee:	4628      	mov	r0, r5
 80a18f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a18f2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a18f2:	2200      	movs	r2, #0
 80a18f4:	7c00      	ldrb	r0, [r0, #16]
 80a18f6:	f7ff b82d 	b.w	80a0954 <HAL_I2C_Write_Data>

080a18fa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a18fa:	2100      	movs	r1, #0
 80a18fc:	7c00      	ldrb	r0, [r0, #16]
 80a18fe:	f7ff b831 	b.w	80a0964 <HAL_I2C_Available_Data>

080a1902 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1902:	2100      	movs	r1, #0
 80a1904:	7c00      	ldrb	r0, [r0, #16]
 80a1906:	f7ff b835 	b.w	80a0974 <HAL_I2C_Read_Data>

080a190a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a190a:	2100      	movs	r1, #0
 80a190c:	7c00      	ldrb	r0, [r0, #16]
 80a190e:	f7ff b839 	b.w	80a0984 <HAL_I2C_Peek_Data>

080a1912 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1912:	2100      	movs	r1, #0
 80a1914:	7c00      	ldrb	r0, [r0, #16]
 80a1916:	f7ff b83d 	b.w	80a0994 <HAL_I2C_Flush_Data>

080a191a <_ZN7TwoWireD0Ev>:
 80a191a:	b510      	push	{r4, lr}
 80a191c:	4604      	mov	r4, r0
 80a191e:	2114      	movs	r1, #20
 80a1920:	f000 fa00 	bl	80a1d24 <_ZdlPvj>
 80a1924:	4620      	mov	r0, r4
 80a1926:	bd10      	pop	{r4, pc}

080a1928 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a1928:	b510      	push	{r4, lr}
 80a192a:	4604      	mov	r4, r0
 80a192c:	2300      	movs	r3, #0
 80a192e:	6063      	str	r3, [r4, #4]
 80a1930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1934:	60a3      	str	r3, [r4, #8]
 80a1936:	4b04      	ldr	r3, [pc, #16]	; (80a1948 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a1938:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a193a:	4608      	mov	r0, r1
 80a193c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a193e:	4611      	mov	r1, r2
 80a1940:	f7ff f838 	bl	80a09b4 <HAL_I2C_Init>
}
 80a1944:	4620      	mov	r0, r4
 80a1946:	bd10      	pop	{r4, pc}
 80a1948:	080a2b78 	.word	0x080a2b78

080a194c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a194c:	2300      	movs	r3, #0
 80a194e:	461a      	mov	r2, r3
 80a1950:	4619      	mov	r1, r3
 80a1952:	7c00      	ldrb	r0, [r0, #16]
 80a1954:	f7fe bfe6 	b.w	80a0924 <HAL_I2C_Begin>

080a1958 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a1958:	b570      	push	{r4, r5, r6, lr}
 80a195a:	460c      	mov	r4, r1
 80a195c:	4606      	mov	r6, r0
 80a195e:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
 80a1960:	2514      	movs	r5, #20
 80a1962:	462a      	mov	r2, r5
 80a1964:	2100      	movs	r1, #0
 80a1966:	a801      	add	r0, sp, #4
 80a1968:	f000 ff91 	bl	80a288e <memset>
 80a196c:	7823      	ldrb	r3, [r4, #0]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
 80a196e:	2200      	movs	r2, #0
 80a1970:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1974:	6863      	ldr	r3, [r4, #4]
 80a1976:	a901      	add	r1, sp, #4
 80a1978:	9303      	str	r3, [sp, #12]
 80a197a:	68e3      	ldr	r3, [r4, #12]
 80a197c:	7c30      	ldrb	r0, [r6, #16]
 80a197e:	9304      	str	r3, [sp, #16]
 80a1980:	7a23      	ldrb	r3, [r4, #8]
 80a1982:	f8ad 5004 	strh.w	r5, [sp, #4]
 80a1986:	9305      	str	r3, [sp, #20]
 80a1988:	f7ff f81e 	bl	80a09c8 <HAL_I2C_Request_Data_Ex>
}
 80a198c:	b006      	add	sp, #24
 80a198e:	bd70      	pop	{r4, r5, r6, pc}

080a1990 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
 80a1990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80a1992:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a1994:	f88d 1000 	strb.w	r1, [sp]
 80a1998:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a199c:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80a199e:	bf18      	it	ne
 80a19a0:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a19a2:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
 80a19a4:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
 80a19a6:	f88d 3008 	strb.w	r3, [sp, #8]
 80a19aa:	f7ff ffd5 	bl	80a1958 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a19ae:	b005      	add	sp, #20
 80a19b0:	f85d fb04 	ldr.w	pc, [sp], #4

080a19b4 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
 80a19b4:	2301      	movs	r3, #1
 80a19b6:	f7ff bfeb 	b.w	80a1990 <_ZN7TwoWire11requestFromEhjh>

080a19ba <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a19ba:	2200      	movs	r2, #0
 80a19bc:	7c00      	ldrb	r0, [r0, #16]
 80a19be:	f7fe bfb9 	b.w	80a0934 <HAL_I2C_Begin_Transmission>

080a19c2 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a19c2:	b2c9      	uxtb	r1, r1
 80a19c4:	f7ff bff9 	b.w	80a19ba <_ZN7TwoWire17beginTransmissionEh>

080a19c8 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a19c8:	2200      	movs	r2, #0
 80a19ca:	7c00      	ldrb	r0, [r0, #16]
 80a19cc:	f7fe bfba 	b.w	80a0944 <HAL_I2C_End_Transmission>

080a19d0 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a19d0:	2101      	movs	r1, #1
 80a19d2:	f7ff bff9 	b.w	80a19c8 <_ZN7TwoWire15endTransmissionEh>

080a19d6 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a19d6:	2100      	movs	r1, #0
 80a19d8:	7c00      	ldrb	r0, [r0, #16]
 80a19da:	f7fe bfe3 	b.w	80a09a4 <HAL_I2C_Is_Enabled>

080a19de <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a19de:	2200      	movs	r2, #0
 80a19e0:	4611      	mov	r1, r2
 80a19e2:	6840      	ldr	r0, [r0, #4]
 80a19e4:	f7ff b87e 	b.w	80a0ae4 <network_ready>

080a19e8 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a19e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a19ea:	4616      	mov	r6, r2
 80a19ec:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a19ee:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a19f0:	460f      	mov	r7, r1
 80a19f2:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a19f4:	2100      	movs	r1, #0
 80a19f6:	a803      	add	r0, sp, #12
 80a19f8:	f000 ff49 	bl	80a288e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a19fc:	4630      	mov	r0, r6
 80a19fe:	f000 ff92 	bl	80a2926 <strlen>
 80a1a02:	2500      	movs	r5, #0
 80a1a04:	9500      	str	r5, [sp, #0]
 80a1a06:	b281      	uxth	r1, r0
 80a1a08:	687b      	ldr	r3, [r7, #4]
 80a1a0a:	aa03      	add	r2, sp, #12
 80a1a0c:	4630      	mov	r0, r6
 80a1a0e:	f7ff f815 	bl	80a0a3c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1a12:	b120      	cbz	r0, 80a1a1e <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1a14:	4629      	mov	r1, r5
 80a1a16:	4620      	mov	r0, r4
 80a1a18:	f7ff fdd6 	bl	80a15c8 <_ZN9IPAddressC1Em>
 80a1a1c:	e003      	b.n	80a1a26 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1a1e:	a903      	add	r1, sp, #12
 80a1a20:	4620      	mov	r0, r4
 80a1a22:	f7ff fdbf 	bl	80a15a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1a26:	4620      	mov	r0, r4
 80a1a28:	b009      	add	sp, #36	; 0x24
 80a1a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1a2c <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1a2c:	2200      	movs	r2, #0
 80a1a2e:	4611      	mov	r1, r2
 80a1a30:	6840      	ldr	r0, [r0, #4]
 80a1a32:	f7ff b877 	b.w	80a0b24 <network_listening>

080a1a36 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1a36:	2200      	movs	r2, #0
 80a1a38:	4611      	mov	r1, r2
 80a1a3a:	6840      	ldr	r0, [r0, #4]
 80a1a3c:	f7ff b882 	b.w	80a0b44 <network_get_listen_timeout>

080a1a40 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1a40:	2200      	movs	r2, #0
 80a1a42:	6840      	ldr	r0, [r0, #4]
 80a1a44:	f7ff b876 	b.w	80a0b34 <network_set_listen_timeout>

080a1a48 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1a48:	2200      	movs	r2, #0
 80a1a4a:	f081 0101 	eor.w	r1, r1, #1
 80a1a4e:	6840      	ldr	r0, [r0, #4]
 80a1a50:	f7ff b860 	b.w	80a0b14 <network_listen>

080a1a54 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a1a54:	2300      	movs	r3, #0
 80a1a56:	461a      	mov	r2, r3
 80a1a58:	4619      	mov	r1, r3
 80a1a5a:	6840      	ldr	r0, [r0, #4]
 80a1a5c:	f7ff b852 	b.w	80a0b04 <network_off>

080a1a60 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1a60:	2200      	movs	r2, #0
 80a1a62:	4611      	mov	r1, r2
 80a1a64:	6840      	ldr	r0, [r0, #4]
 80a1a66:	f7ff b82d 	b.w	80a0ac4 <network_connecting>

080a1a6a <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1a6a:	2200      	movs	r2, #0
 80a1a6c:	2102      	movs	r1, #2
 80a1a6e:	6840      	ldr	r0, [r0, #4]
 80a1a70:	f7ff b830 	b.w	80a0ad4 <network_disconnect>

080a1a74 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1a74:	2300      	movs	r3, #0
 80a1a76:	461a      	mov	r2, r3
 80a1a78:	6840      	ldr	r0, [r0, #4]
 80a1a7a:	f7ff b81b 	b.w	80a0ab4 <network_connect>
	...

080a1a80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1a80:	4b02      	ldr	r3, [pc, #8]	; (80a1a8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1a82:	2204      	movs	r2, #4
 80a1a84:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1a86:	4a02      	ldr	r2, [pc, #8]	; (80a1a90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1a88:	601a      	str	r2, [r3, #0]
 80a1a8a:	4770      	bx	lr
 80a1a8c:	20000190 	.word	0x20000190
 80a1a90:	080a2ba0 	.word	0x080a2ba0

080a1a94 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1a94:	2300      	movs	r3, #0
 80a1a96:	461a      	mov	r2, r3
 80a1a98:	6840      	ldr	r0, [r0, #4]
 80a1a9a:	f7ff b80b 	b.w	80a0ab4 <network_connect>

080a1a9e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1a9e:	2200      	movs	r2, #0
 80a1aa0:	2102      	movs	r1, #2
 80a1aa2:	6840      	ldr	r0, [r0, #4]
 80a1aa4:	f7ff b816 	b.w	80a0ad4 <network_disconnect>

080a1aa8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1aa8:	2200      	movs	r2, #0
 80a1aaa:	4611      	mov	r1, r2
 80a1aac:	6840      	ldr	r0, [r0, #4]
 80a1aae:	f7ff b809 	b.w	80a0ac4 <network_connecting>

080a1ab2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1ab2:	2200      	movs	r2, #0
 80a1ab4:	4611      	mov	r1, r2
 80a1ab6:	6840      	ldr	r0, [r0, #4]
 80a1ab8:	f7ff b814 	b.w	80a0ae4 <network_ready>

080a1abc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1abc:	2300      	movs	r3, #0
 80a1abe:	461a      	mov	r2, r3
 80a1ac0:	4619      	mov	r1, r3
 80a1ac2:	6840      	ldr	r0, [r0, #4]
 80a1ac4:	f7ff b816 	b.w	80a0af4 <network_on>

080a1ac8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1ac8:	2300      	movs	r3, #0
 80a1aca:	461a      	mov	r2, r3
 80a1acc:	4619      	mov	r1, r3
 80a1ace:	6840      	ldr	r0, [r0, #4]
 80a1ad0:	f7ff b818 	b.w	80a0b04 <network_off>

080a1ad4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1ad4:	2200      	movs	r2, #0
 80a1ad6:	f081 0101 	eor.w	r1, r1, #1
 80a1ada:	6840      	ldr	r0, [r0, #4]
 80a1adc:	f7ff b81a 	b.w	80a0b14 <network_listen>

080a1ae0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1ae0:	2200      	movs	r2, #0
 80a1ae2:	6840      	ldr	r0, [r0, #4]
 80a1ae4:	f7ff b826 	b.w	80a0b34 <network_set_listen_timeout>

080a1ae8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1ae8:	2200      	movs	r2, #0
 80a1aea:	4611      	mov	r1, r2
 80a1aec:	6840      	ldr	r0, [r0, #4]
 80a1aee:	f7ff b829 	b.w	80a0b44 <network_get_listen_timeout>

080a1af2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1af2:	2200      	movs	r2, #0
 80a1af4:	4611      	mov	r1, r2
 80a1af6:	6840      	ldr	r0, [r0, #4]
 80a1af8:	f7ff b814 	b.w	80a0b24 <network_listening>

080a1afc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1afc:	b570      	push	{r4, r5, r6, lr}
 80a1afe:	4616      	mov	r6, r2
 80a1b00:	b08e      	sub	sp, #56	; 0x38
 80a1b02:	4604      	mov	r4, r0
    IPAddress addr;
 80a1b04:	a808      	add	r0, sp, #32
 80a1b06:	f7ff fd3f 	bl	80a1588 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1b0a:	2211      	movs	r2, #17
 80a1b0c:	2100      	movs	r1, #0
 80a1b0e:	a803      	add	r0, sp, #12
 80a1b10:	f000 febd 	bl	80a288e <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1b14:	4630      	mov	r0, r6
 80a1b16:	f000 ff06 	bl	80a2926 <strlen>
 80a1b1a:	2500      	movs	r5, #0
 80a1b1c:	4b0a      	ldr	r3, [pc, #40]	; (80a1b48 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1b1e:	9500      	str	r5, [sp, #0]
 80a1b20:	b281      	uxth	r1, r0
 80a1b22:	685b      	ldr	r3, [r3, #4]
 80a1b24:	aa03      	add	r2, sp, #12
 80a1b26:	4630      	mov	r0, r6
 80a1b28:	f7fe ff88 	bl	80a0a3c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1b2c:	b120      	cbz	r0, 80a1b38 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1b2e:	4629      	mov	r1, r5
 80a1b30:	4620      	mov	r0, r4
 80a1b32:	f7ff fd49 	bl	80a15c8 <_ZN9IPAddressC1Em>
 80a1b36:	e003      	b.n	80a1b40 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1b38:	a903      	add	r1, sp, #12
 80a1b3a:	4620      	mov	r0, r4
 80a1b3c:	f7ff fd32 	bl	80a15a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1b40:	4620      	mov	r0, r4
 80a1b42:	b00e      	add	sp, #56	; 0x38
 80a1b44:	bd70      	pop	{r4, r5, r6, pc}
 80a1b46:	bf00      	nop
 80a1b48:	20000190 	.word	0x20000190

080a1b4c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a1b4c:	4b02      	ldr	r3, [pc, #8]	; (80a1b58 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a1b4e:	4a03      	ldr	r2, [pc, #12]	; (80a1b5c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1b50:	601a      	str	r2, [r3, #0]
 80a1b52:	2200      	movs	r2, #0
 80a1b54:	605a      	str	r2, [r3, #4]
 80a1b56:	4770      	bx	lr
 80a1b58:	20000198 	.word	0x20000198
 80a1b5c:	080a2bd4 	.word	0x080a2bd4

080a1b60 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1b60:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a1b62:	4e1a      	ldr	r6, [pc, #104]	; (80a1bcc <pinAvailable+0x6c>)
 80a1b64:	4604      	mov	r4, r0
 80a1b66:	6831      	ldr	r1, [r6, #0]
 80a1b68:	f011 0501 	ands.w	r5, r1, #1
 80a1b6c:	d10f      	bne.n	80a1b8e <pinAvailable+0x2e>
 80a1b6e:	4630      	mov	r0, r6
 80a1b70:	f7fe fa97 	bl	80a00a2 <__cxa_guard_acquire>
 80a1b74:	b158      	cbz	r0, 80a1b8e <pinAvailable+0x2e>
 80a1b76:	4629      	mov	r1, r5
 80a1b78:	4815      	ldr	r0, [pc, #84]	; (80a1bd0 <pinAvailable+0x70>)
 80a1b7a:	f7ff f831 	bl	80a0be0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1b7e:	4630      	mov	r0, r6
 80a1b80:	f7fe fa94 	bl	80a00ac <__cxa_guard_release>
 80a1b84:	4a13      	ldr	r2, [pc, #76]	; (80a1bd4 <pinAvailable+0x74>)
 80a1b86:	4914      	ldr	r1, [pc, #80]	; (80a1bd8 <pinAvailable+0x78>)
 80a1b88:	4811      	ldr	r0, [pc, #68]	; (80a1bd0 <pinAvailable+0x70>)
 80a1b8a:	f000 f8bd 	bl	80a1d08 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a1b8e:	4810      	ldr	r0, [pc, #64]	; (80a1bd0 <pinAvailable+0x70>)
 80a1b90:	f7ff f8b3 	bl	80a0cfa <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1b94:	b128      	cbz	r0, 80a1ba2 <pinAvailable+0x42>
 80a1b96:	f1a4 030d 	sub.w	r3, r4, #13
 80a1b9a:	2b02      	cmp	r3, #2
 80a1b9c:	d801      	bhi.n	80a1ba2 <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a1b9e:	2000      	movs	r0, #0
 80a1ba0:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1ba2:	f000 f88b 	bl	80a1cbc <_Z19__fetch_global_Wirev>
 80a1ba6:	f7ff ff16 	bl	80a19d6 <_ZN7TwoWire9isEnabledEv>
 80a1baa:	b108      	cbz	r0, 80a1bb0 <pinAvailable+0x50>
 80a1bac:	2c01      	cmp	r4, #1
 80a1bae:	d9f6      	bls.n	80a1b9e <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a1bb0:	f7ff fe3a 	bl	80a1828 <_Z22__fetch_global_Serial1v>
 80a1bb4:	f7ff fe34 	bl	80a1820 <_ZN11USARTSerial9isEnabledEv>
 80a1bb8:	b118      	cbz	r0, 80a1bc2 <pinAvailable+0x62>
 80a1bba:	f1a4 0312 	sub.w	r3, r4, #18
 80a1bbe:	2b01      	cmp	r3, #1
 80a1bc0:	d9ed      	bls.n	80a1b9e <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1bc2:	2c17      	cmp	r4, #23
 80a1bc4:	bf8c      	ite	hi
 80a1bc6:	2000      	movhi	r0, #0
 80a1bc8:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1bca:	bd70      	pop	{r4, r5, r6, pc}
 80a1bcc:	20000104 	.word	0x20000104
 80a1bd0:	20000108 	.word	0x20000108
 80a1bd4:	20000068 	.word	0x20000068
 80a1bd8:	080a028d 	.word	0x080a028d

080a1bdc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1bdc:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1bde:	b538      	push	{r3, r4, r5, lr}
 80a1be0:	4604      	mov	r4, r0
 80a1be2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1be4:	d80a      	bhi.n	80a1bfc <pinMode+0x20>
 80a1be6:	29ff      	cmp	r1, #255	; 0xff
 80a1be8:	d008      	beq.n	80a1bfc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1bea:	f7ff ffb9 	bl	80a1b60 <pinAvailable>
 80a1bee:	b128      	cbz	r0, 80a1bfc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1bf0:	4629      	mov	r1, r5
 80a1bf2:	4620      	mov	r0, r4
}
 80a1bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1bf8:	f7fe bdc4 	b.w	80a0784 <HAL_Pin_Mode>
 80a1bfc:	bd38      	pop	{r3, r4, r5, pc}

080a1bfe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1bfe:	b538      	push	{r3, r4, r5, lr}
 80a1c00:	4604      	mov	r4, r0
 80a1c02:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1c04:	f7fe fdc6 	bl	80a0794 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1c08:	28ff      	cmp	r0, #255	; 0xff
 80a1c0a:	d010      	beq.n	80a1c2e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1c0c:	2806      	cmp	r0, #6
 80a1c0e:	d804      	bhi.n	80a1c1a <digitalWrite+0x1c>
 80a1c10:	234d      	movs	r3, #77	; 0x4d
 80a1c12:	fa23 f000 	lsr.w	r0, r3, r0
 80a1c16:	07c3      	lsls	r3, r0, #31
 80a1c18:	d409      	bmi.n	80a1c2e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1c1a:	4620      	mov	r0, r4
 80a1c1c:	f7ff ffa0 	bl	80a1b60 <pinAvailable>
 80a1c20:	b128      	cbz	r0, 80a1c2e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1c22:	4629      	mov	r1, r5
 80a1c24:	4620      	mov	r0, r4
}
 80a1c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1c2a:	f7fe bdbb 	b.w	80a07a4 <HAL_GPIO_Write>
 80a1c2e:	bd38      	pop	{r3, r4, r5, pc}

080a1c30 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a1c30:	b510      	push	{r4, lr}
 80a1c32:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1c34:	f7fe fdae 	bl	80a0794 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a1c38:	3804      	subs	r0, #4
 80a1c3a:	b2c0      	uxtb	r0, r0
 80a1c3c:	2801      	cmp	r0, #1
 80a1c3e:	d908      	bls.n	80a1c52 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a1c40:	4620      	mov	r0, r4
 80a1c42:	f7ff ff8d 	bl	80a1b60 <pinAvailable>
 80a1c46:	b120      	cbz	r0, 80a1c52 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1c48:	4620      	mov	r0, r4
}
 80a1c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1c4e:	f7fe bdb1 	b.w	80a07b4 <HAL_GPIO_Read>
}
 80a1c52:	2000      	movs	r0, #0
 80a1c54:	bd10      	pop	{r4, pc}
	...

080a1c58 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1c58:	b513      	push	{r0, r1, r4, lr}
 80a1c5a:	4c08      	ldr	r4, [pc, #32]	; (80a1c7c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1c5c:	2300      	movs	r3, #0
 80a1c5e:	461a      	mov	r2, r3
 80a1c60:	4619      	mov	r1, r3
 80a1c62:	9300      	str	r3, [sp, #0]
 80a1c64:	4620      	mov	r0, r4
 80a1c66:	f7ff fcc5 	bl	80a15f4 <_ZN9IPAddressC1Ehhhh>
 80a1c6a:	4620      	mov	r0, r4
 80a1c6c:	4a04      	ldr	r2, [pc, #16]	; (80a1c80 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1c6e:	4905      	ldr	r1, [pc, #20]	; (80a1c84 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1c70:	b002      	add	sp, #8
 80a1c72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1c76:	f000 b847 	b.w	80a1d08 <__aeabi_atexit>
 80a1c7a:	bf00      	nop
 80a1c7c:	200001a4 	.word	0x200001a4
 80a1c80:	20000068 	.word	0x20000068
 80a1c84:	080a1545 	.word	0x080a1545

080a1c88 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a1c88:	b570      	push	{r4, r5, r6, lr}
 80a1c8a:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1c8c:	2514      	movs	r5, #20
 80a1c8e:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1c90:	4e09      	ldr	r6, [pc, #36]	; (80a1cb8 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1c92:	2100      	movs	r1, #0
 80a1c94:	f000 fdfb 	bl	80a288e <memset>
 80a1c98:	8025      	strh	r5, [r4, #0]
 80a1c9a:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1c9c:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1c9e:	60a5      	str	r5, [r4, #8]
 80a1ca0:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1ca2:	4628      	mov	r0, r5
 80a1ca4:	f000 f840 	bl	80a1d28 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1ca8:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1caa:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1cac:	4628      	mov	r0, r5
 80a1cae:	f000 f83b 	bl	80a1d28 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1cb2:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a1cb4:	4620      	mov	r0, r4
 80a1cb6:	bd70      	pop	{r4, r5, r6, pc}
 80a1cb8:	080a2c00 	.word	0x080a2c00

080a1cbc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1cbc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1cbe:	4d0e      	ldr	r5, [pc, #56]	; (80a1cf8 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1cc0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1cc2:	6829      	ldr	r1, [r5, #0]
 80a1cc4:	f011 0401 	ands.w	r4, r1, #1
 80a1cc8:	d113      	bne.n	80a1cf2 <_Z19__fetch_global_Wirev+0x36>
 80a1cca:	4628      	mov	r0, r5
 80a1ccc:	f7fe f9e9 	bl	80a00a2 <__cxa_guard_acquire>
 80a1cd0:	b178      	cbz	r0, 80a1cf2 <_Z19__fetch_global_Wirev+0x36>
 80a1cd2:	a801      	add	r0, sp, #4
 80a1cd4:	f7ff ffd8 	bl	80a1c88 <_Z17acquireWireBufferv>
 80a1cd8:	aa01      	add	r2, sp, #4
 80a1cda:	4621      	mov	r1, r4
 80a1cdc:	4807      	ldr	r0, [pc, #28]	; (80a1cfc <_Z19__fetch_global_Wirev+0x40>)
 80a1cde:	f7ff fe23 	bl	80a1928 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a1ce2:	4628      	mov	r0, r5
 80a1ce4:	f7fe f9e2 	bl	80a00ac <__cxa_guard_release>
 80a1ce8:	4a05      	ldr	r2, [pc, #20]	; (80a1d00 <_Z19__fetch_global_Wirev+0x44>)
 80a1cea:	4906      	ldr	r1, [pc, #24]	; (80a1d04 <_Z19__fetch_global_Wirev+0x48>)
 80a1cec:	4803      	ldr	r0, [pc, #12]	; (80a1cfc <_Z19__fetch_global_Wirev+0x40>)
 80a1cee:	f000 f80b 	bl	80a1d08 <__aeabi_atexit>
	return wire;
}
 80a1cf2:	4802      	ldr	r0, [pc, #8]	; (80a1cfc <_Z19__fetch_global_Wirev+0x40>)
 80a1cf4:	b007      	add	sp, #28
 80a1cf6:	bd30      	pop	{r4, r5, pc}
 80a1cf8:	200001bc 	.word	0x200001bc
 80a1cfc:	200001c0 	.word	0x200001c0
 80a1d00:	20000068 	.word	0x20000068
 80a1d04:	080a18d1 	.word	0x080a18d1

080a1d08 <__aeabi_atexit>:
 80a1d08:	460b      	mov	r3, r1
 80a1d0a:	4601      	mov	r1, r0
 80a1d0c:	4618      	mov	r0, r3
 80a1d0e:	f000 bda5 	b.w	80a285c <__cxa_atexit>
	...

080a1d14 <_ZSt15get_new_handlerv>:
 80a1d14:	4b02      	ldr	r3, [pc, #8]	; (80a1d20 <_ZSt15get_new_handlerv+0xc>)
 80a1d16:	6818      	ldr	r0, [r3, #0]
 80a1d18:	f3bf 8f5f 	dmb	sy
 80a1d1c:	4770      	bx	lr
 80a1d1e:	bf00      	nop
 80a1d20:	200001d4 	.word	0x200001d4

080a1d24 <_ZdlPvj>:
 80a1d24:	f7fe b9bb 	b.w	80a009e <_ZdlPv>

080a1d28 <_ZnajRKSt9nothrow_t>:
 80a1d28:	f000 b800 	b.w	80a1d2c <_ZnwjRKSt9nothrow_t>

080a1d2c <_ZnwjRKSt9nothrow_t>:
 80a1d2c:	b510      	push	{r4, lr}
 80a1d2e:	2800      	cmp	r0, #0
 80a1d30:	bf14      	ite	ne
 80a1d32:	4604      	movne	r4, r0
 80a1d34:	2401      	moveq	r4, #1
 80a1d36:	4620      	mov	r0, r4
 80a1d38:	f7fe ff24 	bl	80a0b84 <malloc>
 80a1d3c:	b920      	cbnz	r0, 80a1d48 <_ZnwjRKSt9nothrow_t+0x1c>
 80a1d3e:	f7ff ffe9 	bl	80a1d14 <_ZSt15get_new_handlerv>
 80a1d42:	b108      	cbz	r0, 80a1d48 <_ZnwjRKSt9nothrow_t+0x1c>
 80a1d44:	4780      	blx	r0
 80a1d46:	e7f6      	b.n	80a1d36 <_ZnwjRKSt9nothrow_t+0xa>
 80a1d48:	bd10      	pop	{r4, pc}

080a1d4a <_ZSt25__throw_bad_function_callv>:
 80a1d4a:	b508      	push	{r3, lr}
 80a1d4c:	f7fe ff32 	bl	80a0bb4 <abort>

080a1d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1d50:	4b18      	ldr	r3, [pc, #96]	; (80a1db4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1d52:	681a      	ldr	r2, [r3, #0]
 80a1d54:	07d1      	lsls	r1, r2, #31
 80a1d56:	bf5c      	itt	pl
 80a1d58:	2201      	movpl	r2, #1
 80a1d5a:	601a      	strpl	r2, [r3, #0]
 80a1d5c:	4b16      	ldr	r3, [pc, #88]	; (80a1db8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1d5e:	681a      	ldr	r2, [r3, #0]
 80a1d60:	07d2      	lsls	r2, r2, #31
 80a1d62:	bf5c      	itt	pl
 80a1d64:	2201      	movpl	r2, #1
 80a1d66:	601a      	strpl	r2, [r3, #0]
 80a1d68:	4b14      	ldr	r3, [pc, #80]	; (80a1dbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1d6a:	681a      	ldr	r2, [r3, #0]
 80a1d6c:	07d0      	lsls	r0, r2, #31
 80a1d6e:	bf5c      	itt	pl
 80a1d70:	2201      	movpl	r2, #1
 80a1d72:	601a      	strpl	r2, [r3, #0]
 80a1d74:	4b12      	ldr	r3, [pc, #72]	; (80a1dc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1d76:	681a      	ldr	r2, [r3, #0]
 80a1d78:	07d1      	lsls	r1, r2, #31
 80a1d7a:	bf5c      	itt	pl
 80a1d7c:	2201      	movpl	r2, #1
 80a1d7e:	601a      	strpl	r2, [r3, #0]
 80a1d80:	4b10      	ldr	r3, [pc, #64]	; (80a1dc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1d82:	681a      	ldr	r2, [r3, #0]
 80a1d84:	07d2      	lsls	r2, r2, #31
 80a1d86:	bf5c      	itt	pl
 80a1d88:	2201      	movpl	r2, #1
 80a1d8a:	601a      	strpl	r2, [r3, #0]
 80a1d8c:	4b0e      	ldr	r3, [pc, #56]	; (80a1dc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1d8e:	681a      	ldr	r2, [r3, #0]
 80a1d90:	07d0      	lsls	r0, r2, #31
 80a1d92:	bf5c      	itt	pl
 80a1d94:	2201      	movpl	r2, #1
 80a1d96:	601a      	strpl	r2, [r3, #0]
 80a1d98:	4b0c      	ldr	r3, [pc, #48]	; (80a1dcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1d9a:	681a      	ldr	r2, [r3, #0]
 80a1d9c:	07d1      	lsls	r1, r2, #31
 80a1d9e:	bf5c      	itt	pl
 80a1da0:	2201      	movpl	r2, #1
 80a1da2:	601a      	strpl	r2, [r3, #0]
 80a1da4:	4b0a      	ldr	r3, [pc, #40]	; (80a1dd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1da6:	681a      	ldr	r2, [r3, #0]
 80a1da8:	07d2      	lsls	r2, r2, #31
 80a1daa:	bf5c      	itt	pl
 80a1dac:	2201      	movpl	r2, #1
 80a1dae:	601a      	strpl	r2, [r3, #0]
 80a1db0:	4770      	bx	lr
 80a1db2:	bf00      	nop
 80a1db4:	200001f4 	.word	0x200001f4
 80a1db8:	200001f0 	.word	0x200001f0
 80a1dbc:	200001ec 	.word	0x200001ec
 80a1dc0:	200001e8 	.word	0x200001e8
 80a1dc4:	200001e4 	.word	0x200001e4
 80a1dc8:	200001e0 	.word	0x200001e0
 80a1dcc:	200001dc 	.word	0x200001dc
 80a1dd0:	200001d8 	.word	0x200001d8

080a1dd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1dd4:	4b24      	ldr	r3, [pc, #144]	; (80a1e68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1dd6:	681a      	ldr	r2, [r3, #0]
 80a1dd8:	07d0      	lsls	r0, r2, #31
 80a1dda:	bf5c      	itt	pl
 80a1ddc:	2201      	movpl	r2, #1
 80a1dde:	601a      	strpl	r2, [r3, #0]
 80a1de0:	4b22      	ldr	r3, [pc, #136]	; (80a1e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1de2:	681a      	ldr	r2, [r3, #0]
 80a1de4:	07d1      	lsls	r1, r2, #31
 80a1de6:	bf5c      	itt	pl
 80a1de8:	2201      	movpl	r2, #1
 80a1dea:	601a      	strpl	r2, [r3, #0]
 80a1dec:	4b20      	ldr	r3, [pc, #128]	; (80a1e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1dee:	681a      	ldr	r2, [r3, #0]
 80a1df0:	07d2      	lsls	r2, r2, #31
 80a1df2:	bf5c      	itt	pl
 80a1df4:	2201      	movpl	r2, #1
 80a1df6:	601a      	strpl	r2, [r3, #0]
 80a1df8:	4b1e      	ldr	r3, [pc, #120]	; (80a1e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1dfa:	681a      	ldr	r2, [r3, #0]
 80a1dfc:	07d0      	lsls	r0, r2, #31
 80a1dfe:	bf5c      	itt	pl
 80a1e00:	2201      	movpl	r2, #1
 80a1e02:	601a      	strpl	r2, [r3, #0]
 80a1e04:	4b1c      	ldr	r3, [pc, #112]	; (80a1e78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1e06:	681a      	ldr	r2, [r3, #0]
 80a1e08:	07d1      	lsls	r1, r2, #31
 80a1e0a:	bf5c      	itt	pl
 80a1e0c:	2201      	movpl	r2, #1
 80a1e0e:	601a      	strpl	r2, [r3, #0]
 80a1e10:	4b1a      	ldr	r3, [pc, #104]	; (80a1e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1e12:	681a      	ldr	r2, [r3, #0]
 80a1e14:	07d2      	lsls	r2, r2, #31
 80a1e16:	bf5c      	itt	pl
 80a1e18:	2201      	movpl	r2, #1
 80a1e1a:	601a      	strpl	r2, [r3, #0]
 80a1e1c:	4b18      	ldr	r3, [pc, #96]	; (80a1e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1e1e:	681a      	ldr	r2, [r3, #0]
 80a1e20:	07d0      	lsls	r0, r2, #31
 80a1e22:	bf5c      	itt	pl
 80a1e24:	2201      	movpl	r2, #1
 80a1e26:	601a      	strpl	r2, [r3, #0]
 80a1e28:	4b16      	ldr	r3, [pc, #88]	; (80a1e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1e2a:	681a      	ldr	r2, [r3, #0]
 80a1e2c:	07d1      	lsls	r1, r2, #31
 80a1e2e:	bf5c      	itt	pl
 80a1e30:	2201      	movpl	r2, #1
 80a1e32:	601a      	strpl	r2, [r3, #0]
 80a1e34:	4b14      	ldr	r3, [pc, #80]	; (80a1e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1e36:	681a      	ldr	r2, [r3, #0]
 80a1e38:	07d2      	lsls	r2, r2, #31
 80a1e3a:	bf5c      	itt	pl
 80a1e3c:	2201      	movpl	r2, #1
 80a1e3e:	601a      	strpl	r2, [r3, #0]
 80a1e40:	4b12      	ldr	r3, [pc, #72]	; (80a1e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1e42:	681a      	ldr	r2, [r3, #0]
 80a1e44:	07d0      	lsls	r0, r2, #31
 80a1e46:	bf5c      	itt	pl
 80a1e48:	2201      	movpl	r2, #1
 80a1e4a:	601a      	strpl	r2, [r3, #0]
 80a1e4c:	4b10      	ldr	r3, [pc, #64]	; (80a1e90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1e4e:	681a      	ldr	r2, [r3, #0]
 80a1e50:	07d1      	lsls	r1, r2, #31
 80a1e52:	bf5c      	itt	pl
 80a1e54:	2201      	movpl	r2, #1
 80a1e56:	601a      	strpl	r2, [r3, #0]
 80a1e58:	4b0e      	ldr	r3, [pc, #56]	; (80a1e94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1e5a:	681a      	ldr	r2, [r3, #0]
 80a1e5c:	07d2      	lsls	r2, r2, #31
 80a1e5e:	bf5c      	itt	pl
 80a1e60:	2201      	movpl	r2, #1
 80a1e62:	601a      	strpl	r2, [r3, #0]
 80a1e64:	4770      	bx	lr
 80a1e66:	bf00      	nop
 80a1e68:	20000224 	.word	0x20000224
 80a1e6c:	20000220 	.word	0x20000220
 80a1e70:	2000021c 	.word	0x2000021c
 80a1e74:	20000218 	.word	0x20000218
 80a1e78:	20000214 	.word	0x20000214
 80a1e7c:	20000210 	.word	0x20000210
 80a1e80:	2000020c 	.word	0x2000020c
 80a1e84:	20000208 	.word	0x20000208
 80a1e88:	20000204 	.word	0x20000204
 80a1e8c:	20000200 	.word	0x20000200
 80a1e90:	200001fc 	.word	0x200001fc
 80a1e94:	200001f8 	.word	0x200001f8

080a1e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1e98:	4b24      	ldr	r3, [pc, #144]	; (80a1f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1e9a:	681a      	ldr	r2, [r3, #0]
 80a1e9c:	07d0      	lsls	r0, r2, #31
 80a1e9e:	bf5c      	itt	pl
 80a1ea0:	2201      	movpl	r2, #1
 80a1ea2:	601a      	strpl	r2, [r3, #0]
 80a1ea4:	4b22      	ldr	r3, [pc, #136]	; (80a1f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1ea6:	681a      	ldr	r2, [r3, #0]
 80a1ea8:	07d1      	lsls	r1, r2, #31
 80a1eaa:	bf5c      	itt	pl
 80a1eac:	2201      	movpl	r2, #1
 80a1eae:	601a      	strpl	r2, [r3, #0]
 80a1eb0:	4b20      	ldr	r3, [pc, #128]	; (80a1f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1eb2:	681a      	ldr	r2, [r3, #0]
 80a1eb4:	07d2      	lsls	r2, r2, #31
 80a1eb6:	bf5c      	itt	pl
 80a1eb8:	2201      	movpl	r2, #1
 80a1eba:	601a      	strpl	r2, [r3, #0]
 80a1ebc:	4b1e      	ldr	r3, [pc, #120]	; (80a1f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1ebe:	681a      	ldr	r2, [r3, #0]
 80a1ec0:	07d0      	lsls	r0, r2, #31
 80a1ec2:	bf5c      	itt	pl
 80a1ec4:	2201      	movpl	r2, #1
 80a1ec6:	601a      	strpl	r2, [r3, #0]
 80a1ec8:	4b1c      	ldr	r3, [pc, #112]	; (80a1f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1eca:	681a      	ldr	r2, [r3, #0]
 80a1ecc:	07d1      	lsls	r1, r2, #31
 80a1ece:	bf5c      	itt	pl
 80a1ed0:	2201      	movpl	r2, #1
 80a1ed2:	601a      	strpl	r2, [r3, #0]
 80a1ed4:	4b1a      	ldr	r3, [pc, #104]	; (80a1f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1ed6:	681a      	ldr	r2, [r3, #0]
 80a1ed8:	07d2      	lsls	r2, r2, #31
 80a1eda:	bf5c      	itt	pl
 80a1edc:	2201      	movpl	r2, #1
 80a1ede:	601a      	strpl	r2, [r3, #0]
 80a1ee0:	4b18      	ldr	r3, [pc, #96]	; (80a1f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1ee2:	681a      	ldr	r2, [r3, #0]
 80a1ee4:	07d0      	lsls	r0, r2, #31
 80a1ee6:	bf5c      	itt	pl
 80a1ee8:	2201      	movpl	r2, #1
 80a1eea:	601a      	strpl	r2, [r3, #0]
 80a1eec:	4b16      	ldr	r3, [pc, #88]	; (80a1f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1eee:	681a      	ldr	r2, [r3, #0]
 80a1ef0:	07d1      	lsls	r1, r2, #31
 80a1ef2:	bf5c      	itt	pl
 80a1ef4:	2201      	movpl	r2, #1
 80a1ef6:	601a      	strpl	r2, [r3, #0]
 80a1ef8:	4b14      	ldr	r3, [pc, #80]	; (80a1f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1efa:	681a      	ldr	r2, [r3, #0]
 80a1efc:	07d2      	lsls	r2, r2, #31
 80a1efe:	bf5c      	itt	pl
 80a1f00:	2201      	movpl	r2, #1
 80a1f02:	601a      	strpl	r2, [r3, #0]
 80a1f04:	4b12      	ldr	r3, [pc, #72]	; (80a1f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1f06:	681a      	ldr	r2, [r3, #0]
 80a1f08:	07d0      	lsls	r0, r2, #31
 80a1f0a:	bf5c      	itt	pl
 80a1f0c:	2201      	movpl	r2, #1
 80a1f0e:	601a      	strpl	r2, [r3, #0]
 80a1f10:	4b10      	ldr	r3, [pc, #64]	; (80a1f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1f12:	681a      	ldr	r2, [r3, #0]
 80a1f14:	07d1      	lsls	r1, r2, #31
 80a1f16:	bf5c      	itt	pl
 80a1f18:	2201      	movpl	r2, #1
 80a1f1a:	601a      	strpl	r2, [r3, #0]
 80a1f1c:	4b0e      	ldr	r3, [pc, #56]	; (80a1f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1f1e:	681a      	ldr	r2, [r3, #0]
 80a1f20:	07d2      	lsls	r2, r2, #31
 80a1f22:	bf5c      	itt	pl
 80a1f24:	2201      	movpl	r2, #1
 80a1f26:	601a      	strpl	r2, [r3, #0]
 80a1f28:	4770      	bx	lr
 80a1f2a:	bf00      	nop
 80a1f2c:	20000254 	.word	0x20000254
 80a1f30:	20000250 	.word	0x20000250
 80a1f34:	2000024c 	.word	0x2000024c
 80a1f38:	20000248 	.word	0x20000248
 80a1f3c:	20000244 	.word	0x20000244
 80a1f40:	20000240 	.word	0x20000240
 80a1f44:	2000023c 	.word	0x2000023c
 80a1f48:	20000238 	.word	0x20000238
 80a1f4c:	20000234 	.word	0x20000234
 80a1f50:	20000230 	.word	0x20000230
 80a1f54:	2000022c 	.word	0x2000022c
 80a1f58:	20000228 	.word	0x20000228

080a1f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1f5c:	4b18      	ldr	r3, [pc, #96]	; (80a1fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1f5e:	681a      	ldr	r2, [r3, #0]
 80a1f60:	07d1      	lsls	r1, r2, #31
 80a1f62:	bf5c      	itt	pl
 80a1f64:	2201      	movpl	r2, #1
 80a1f66:	601a      	strpl	r2, [r3, #0]
 80a1f68:	4b16      	ldr	r3, [pc, #88]	; (80a1fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1f6a:	681a      	ldr	r2, [r3, #0]
 80a1f6c:	07d2      	lsls	r2, r2, #31
 80a1f6e:	bf5c      	itt	pl
 80a1f70:	2201      	movpl	r2, #1
 80a1f72:	601a      	strpl	r2, [r3, #0]
 80a1f74:	4b14      	ldr	r3, [pc, #80]	; (80a1fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1f76:	681a      	ldr	r2, [r3, #0]
 80a1f78:	07d0      	lsls	r0, r2, #31
 80a1f7a:	bf5c      	itt	pl
 80a1f7c:	2201      	movpl	r2, #1
 80a1f7e:	601a      	strpl	r2, [r3, #0]
 80a1f80:	4b12      	ldr	r3, [pc, #72]	; (80a1fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1f82:	681a      	ldr	r2, [r3, #0]
 80a1f84:	07d1      	lsls	r1, r2, #31
 80a1f86:	bf5c      	itt	pl
 80a1f88:	2201      	movpl	r2, #1
 80a1f8a:	601a      	strpl	r2, [r3, #0]
 80a1f8c:	4b10      	ldr	r3, [pc, #64]	; (80a1fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1f8e:	681a      	ldr	r2, [r3, #0]
 80a1f90:	07d2      	lsls	r2, r2, #31
 80a1f92:	bf5c      	itt	pl
 80a1f94:	2201      	movpl	r2, #1
 80a1f96:	601a      	strpl	r2, [r3, #0]
 80a1f98:	4b0e      	ldr	r3, [pc, #56]	; (80a1fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1f9a:	681a      	ldr	r2, [r3, #0]
 80a1f9c:	07d0      	lsls	r0, r2, #31
 80a1f9e:	bf5c      	itt	pl
 80a1fa0:	2201      	movpl	r2, #1
 80a1fa2:	601a      	strpl	r2, [r3, #0]
 80a1fa4:	4b0c      	ldr	r3, [pc, #48]	; (80a1fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1fa6:	681a      	ldr	r2, [r3, #0]
 80a1fa8:	07d1      	lsls	r1, r2, #31
 80a1faa:	bf5c      	itt	pl
 80a1fac:	2201      	movpl	r2, #1
 80a1fae:	601a      	strpl	r2, [r3, #0]
 80a1fb0:	4b0a      	ldr	r3, [pc, #40]	; (80a1fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1fb2:	681a      	ldr	r2, [r3, #0]
 80a1fb4:	07d2      	lsls	r2, r2, #31
 80a1fb6:	bf5c      	itt	pl
 80a1fb8:	2201      	movpl	r2, #1
 80a1fba:	601a      	strpl	r2, [r3, #0]
 80a1fbc:	4770      	bx	lr
 80a1fbe:	bf00      	nop
 80a1fc0:	20000274 	.word	0x20000274
 80a1fc4:	20000270 	.word	0x20000270
 80a1fc8:	2000026c 	.word	0x2000026c
 80a1fcc:	20000268 	.word	0x20000268
 80a1fd0:	20000264 	.word	0x20000264
 80a1fd4:	20000260 	.word	0x20000260
 80a1fd8:	2000025c 	.word	0x2000025c
 80a1fdc:	20000258 	.word	0x20000258

080a1fe0 <__aeabi_drsub>:
 80a1fe0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1fe4:	e002      	b.n	80a1fec <__adddf3>
 80a1fe6:	bf00      	nop

080a1fe8 <__aeabi_dsub>:
 80a1fe8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1fec <__adddf3>:
 80a1fec:	b530      	push	{r4, r5, lr}
 80a1fee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1ff2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1ff6:	ea94 0f05 	teq	r4, r5
 80a1ffa:	bf08      	it	eq
 80a1ffc:	ea90 0f02 	teqeq	r0, r2
 80a2000:	bf1f      	itttt	ne
 80a2002:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2006:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a200a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a200e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2012:	f000 80e2 	beq.w	80a21da <__adddf3+0x1ee>
 80a2016:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a201a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a201e:	bfb8      	it	lt
 80a2020:	426d      	neglt	r5, r5
 80a2022:	dd0c      	ble.n	80a203e <__adddf3+0x52>
 80a2024:	442c      	add	r4, r5
 80a2026:	ea80 0202 	eor.w	r2, r0, r2
 80a202a:	ea81 0303 	eor.w	r3, r1, r3
 80a202e:	ea82 0000 	eor.w	r0, r2, r0
 80a2032:	ea83 0101 	eor.w	r1, r3, r1
 80a2036:	ea80 0202 	eor.w	r2, r0, r2
 80a203a:	ea81 0303 	eor.w	r3, r1, r3
 80a203e:	2d36      	cmp	r5, #54	; 0x36
 80a2040:	bf88      	it	hi
 80a2042:	bd30      	pophi	{r4, r5, pc}
 80a2044:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2048:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a204c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2050:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2054:	d002      	beq.n	80a205c <__adddf3+0x70>
 80a2056:	4240      	negs	r0, r0
 80a2058:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a205c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2060:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2064:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2068:	d002      	beq.n	80a2070 <__adddf3+0x84>
 80a206a:	4252      	negs	r2, r2
 80a206c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2070:	ea94 0f05 	teq	r4, r5
 80a2074:	f000 80a7 	beq.w	80a21c6 <__adddf3+0x1da>
 80a2078:	f1a4 0401 	sub.w	r4, r4, #1
 80a207c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2080:	db0d      	blt.n	80a209e <__adddf3+0xb2>
 80a2082:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2086:	fa22 f205 	lsr.w	r2, r2, r5
 80a208a:	1880      	adds	r0, r0, r2
 80a208c:	f141 0100 	adc.w	r1, r1, #0
 80a2090:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2094:	1880      	adds	r0, r0, r2
 80a2096:	fa43 f305 	asr.w	r3, r3, r5
 80a209a:	4159      	adcs	r1, r3
 80a209c:	e00e      	b.n	80a20bc <__adddf3+0xd0>
 80a209e:	f1a5 0520 	sub.w	r5, r5, #32
 80a20a2:	f10e 0e20 	add.w	lr, lr, #32
 80a20a6:	2a01      	cmp	r2, #1
 80a20a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a20ac:	bf28      	it	cs
 80a20ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a20b2:	fa43 f305 	asr.w	r3, r3, r5
 80a20b6:	18c0      	adds	r0, r0, r3
 80a20b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a20bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a20c0:	d507      	bpl.n	80a20d2 <__adddf3+0xe6>
 80a20c2:	f04f 0e00 	mov.w	lr, #0
 80a20c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80a20ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a20ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80a20d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a20d6:	d31b      	bcc.n	80a2110 <__adddf3+0x124>
 80a20d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a20dc:	d30c      	bcc.n	80a20f8 <__adddf3+0x10c>
 80a20de:	0849      	lsrs	r1, r1, #1
 80a20e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80a20e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a20e8:	f104 0401 	add.w	r4, r4, #1
 80a20ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a20f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a20f4:	f080 809a 	bcs.w	80a222c <__adddf3+0x240>
 80a20f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a20fc:	bf08      	it	eq
 80a20fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2102:	f150 0000 	adcs.w	r0, r0, #0
 80a2106:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a210a:	ea41 0105 	orr.w	r1, r1, r5
 80a210e:	bd30      	pop	{r4, r5, pc}
 80a2110:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2114:	4140      	adcs	r0, r0
 80a2116:	eb41 0101 	adc.w	r1, r1, r1
 80a211a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a211e:	f1a4 0401 	sub.w	r4, r4, #1
 80a2122:	d1e9      	bne.n	80a20f8 <__adddf3+0x10c>
 80a2124:	f091 0f00 	teq	r1, #0
 80a2128:	bf04      	itt	eq
 80a212a:	4601      	moveq	r1, r0
 80a212c:	2000      	moveq	r0, #0
 80a212e:	fab1 f381 	clz	r3, r1
 80a2132:	bf08      	it	eq
 80a2134:	3320      	addeq	r3, #32
 80a2136:	f1a3 030b 	sub.w	r3, r3, #11
 80a213a:	f1b3 0220 	subs.w	r2, r3, #32
 80a213e:	da0c      	bge.n	80a215a <__adddf3+0x16e>
 80a2140:	320c      	adds	r2, #12
 80a2142:	dd08      	ble.n	80a2156 <__adddf3+0x16a>
 80a2144:	f102 0c14 	add.w	ip, r2, #20
 80a2148:	f1c2 020c 	rsb	r2, r2, #12
 80a214c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2150:	fa21 f102 	lsr.w	r1, r1, r2
 80a2154:	e00c      	b.n	80a2170 <__adddf3+0x184>
 80a2156:	f102 0214 	add.w	r2, r2, #20
 80a215a:	bfd8      	it	le
 80a215c:	f1c2 0c20 	rsble	ip, r2, #32
 80a2160:	fa01 f102 	lsl.w	r1, r1, r2
 80a2164:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2168:	bfdc      	itt	le
 80a216a:	ea41 010c 	orrle.w	r1, r1, ip
 80a216e:	4090      	lslle	r0, r2
 80a2170:	1ae4      	subs	r4, r4, r3
 80a2172:	bfa2      	ittt	ge
 80a2174:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2178:	4329      	orrge	r1, r5
 80a217a:	bd30      	popge	{r4, r5, pc}
 80a217c:	ea6f 0404 	mvn.w	r4, r4
 80a2180:	3c1f      	subs	r4, #31
 80a2182:	da1c      	bge.n	80a21be <__adddf3+0x1d2>
 80a2184:	340c      	adds	r4, #12
 80a2186:	dc0e      	bgt.n	80a21a6 <__adddf3+0x1ba>
 80a2188:	f104 0414 	add.w	r4, r4, #20
 80a218c:	f1c4 0220 	rsb	r2, r4, #32
 80a2190:	fa20 f004 	lsr.w	r0, r0, r4
 80a2194:	fa01 f302 	lsl.w	r3, r1, r2
 80a2198:	ea40 0003 	orr.w	r0, r0, r3
 80a219c:	fa21 f304 	lsr.w	r3, r1, r4
 80a21a0:	ea45 0103 	orr.w	r1, r5, r3
 80a21a4:	bd30      	pop	{r4, r5, pc}
 80a21a6:	f1c4 040c 	rsb	r4, r4, #12
 80a21aa:	f1c4 0220 	rsb	r2, r4, #32
 80a21ae:	fa20 f002 	lsr.w	r0, r0, r2
 80a21b2:	fa01 f304 	lsl.w	r3, r1, r4
 80a21b6:	ea40 0003 	orr.w	r0, r0, r3
 80a21ba:	4629      	mov	r1, r5
 80a21bc:	bd30      	pop	{r4, r5, pc}
 80a21be:	fa21 f004 	lsr.w	r0, r1, r4
 80a21c2:	4629      	mov	r1, r5
 80a21c4:	bd30      	pop	{r4, r5, pc}
 80a21c6:	f094 0f00 	teq	r4, #0
 80a21ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a21ce:	bf06      	itte	eq
 80a21d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a21d4:	3401      	addeq	r4, #1
 80a21d6:	3d01      	subne	r5, #1
 80a21d8:	e74e      	b.n	80a2078 <__adddf3+0x8c>
 80a21da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a21de:	bf18      	it	ne
 80a21e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a21e4:	d029      	beq.n	80a223a <__adddf3+0x24e>
 80a21e6:	ea94 0f05 	teq	r4, r5
 80a21ea:	bf08      	it	eq
 80a21ec:	ea90 0f02 	teqeq	r0, r2
 80a21f0:	d005      	beq.n	80a21fe <__adddf3+0x212>
 80a21f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80a21f6:	bf04      	itt	eq
 80a21f8:	4619      	moveq	r1, r3
 80a21fa:	4610      	moveq	r0, r2
 80a21fc:	bd30      	pop	{r4, r5, pc}
 80a21fe:	ea91 0f03 	teq	r1, r3
 80a2202:	bf1e      	ittt	ne
 80a2204:	2100      	movne	r1, #0
 80a2206:	2000      	movne	r0, #0
 80a2208:	bd30      	popne	{r4, r5, pc}
 80a220a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a220e:	d105      	bne.n	80a221c <__adddf3+0x230>
 80a2210:	0040      	lsls	r0, r0, #1
 80a2212:	4149      	adcs	r1, r1
 80a2214:	bf28      	it	cs
 80a2216:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a221a:	bd30      	pop	{r4, r5, pc}
 80a221c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2220:	bf3c      	itt	cc
 80a2222:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2226:	bd30      	popcc	{r4, r5, pc}
 80a2228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a222c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2230:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2234:	f04f 0000 	mov.w	r0, #0
 80a2238:	bd30      	pop	{r4, r5, pc}
 80a223a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a223e:	bf1a      	itte	ne
 80a2240:	4619      	movne	r1, r3
 80a2242:	4610      	movne	r0, r2
 80a2244:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2248:	bf1c      	itt	ne
 80a224a:	460b      	movne	r3, r1
 80a224c:	4602      	movne	r2, r0
 80a224e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2252:	bf06      	itte	eq
 80a2254:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2258:	ea91 0f03 	teqeq	r1, r3
 80a225c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2260:	bd30      	pop	{r4, r5, pc}
 80a2262:	bf00      	nop

080a2264 <__aeabi_ui2d>:
 80a2264:	f090 0f00 	teq	r0, #0
 80a2268:	bf04      	itt	eq
 80a226a:	2100      	moveq	r1, #0
 80a226c:	4770      	bxeq	lr
 80a226e:	b530      	push	{r4, r5, lr}
 80a2270:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2274:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2278:	f04f 0500 	mov.w	r5, #0
 80a227c:	f04f 0100 	mov.w	r1, #0
 80a2280:	e750      	b.n	80a2124 <__adddf3+0x138>
 80a2282:	bf00      	nop

080a2284 <__aeabi_i2d>:
 80a2284:	f090 0f00 	teq	r0, #0
 80a2288:	bf04      	itt	eq
 80a228a:	2100      	moveq	r1, #0
 80a228c:	4770      	bxeq	lr
 80a228e:	b530      	push	{r4, r5, lr}
 80a2290:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2294:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2298:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a229c:	bf48      	it	mi
 80a229e:	4240      	negmi	r0, r0
 80a22a0:	f04f 0100 	mov.w	r1, #0
 80a22a4:	e73e      	b.n	80a2124 <__adddf3+0x138>
 80a22a6:	bf00      	nop

080a22a8 <__aeabi_f2d>:
 80a22a8:	0042      	lsls	r2, r0, #1
 80a22aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a22ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80a22b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a22b6:	bf1f      	itttt	ne
 80a22b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a22bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a22c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a22c4:	4770      	bxne	lr
 80a22c6:	f092 0f00 	teq	r2, #0
 80a22ca:	bf14      	ite	ne
 80a22cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a22d0:	4770      	bxeq	lr
 80a22d2:	b530      	push	{r4, r5, lr}
 80a22d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a22d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a22dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a22e0:	e720      	b.n	80a2124 <__adddf3+0x138>
 80a22e2:	bf00      	nop

080a22e4 <__aeabi_ul2d>:
 80a22e4:	ea50 0201 	orrs.w	r2, r0, r1
 80a22e8:	bf08      	it	eq
 80a22ea:	4770      	bxeq	lr
 80a22ec:	b530      	push	{r4, r5, lr}
 80a22ee:	f04f 0500 	mov.w	r5, #0
 80a22f2:	e00a      	b.n	80a230a <__aeabi_l2d+0x16>

080a22f4 <__aeabi_l2d>:
 80a22f4:	ea50 0201 	orrs.w	r2, r0, r1
 80a22f8:	bf08      	it	eq
 80a22fa:	4770      	bxeq	lr
 80a22fc:	b530      	push	{r4, r5, lr}
 80a22fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2302:	d502      	bpl.n	80a230a <__aeabi_l2d+0x16>
 80a2304:	4240      	negs	r0, r0
 80a2306:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a230a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a230e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2312:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2316:	f43f aedc 	beq.w	80a20d2 <__adddf3+0xe6>
 80a231a:	f04f 0203 	mov.w	r2, #3
 80a231e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2322:	bf18      	it	ne
 80a2324:	3203      	addne	r2, #3
 80a2326:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a232a:	bf18      	it	ne
 80a232c:	3203      	addne	r2, #3
 80a232e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2332:	f1c2 0320 	rsb	r3, r2, #32
 80a2336:	fa00 fc03 	lsl.w	ip, r0, r3
 80a233a:	fa20 f002 	lsr.w	r0, r0, r2
 80a233e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2342:	ea40 000e 	orr.w	r0, r0, lr
 80a2346:	fa21 f102 	lsr.w	r1, r1, r2
 80a234a:	4414      	add	r4, r2
 80a234c:	e6c1      	b.n	80a20d2 <__adddf3+0xe6>
 80a234e:	bf00      	nop

080a2350 <__aeabi_d2iz>:
 80a2350:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2354:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2358:	d215      	bcs.n	80a2386 <__aeabi_d2iz+0x36>
 80a235a:	d511      	bpl.n	80a2380 <__aeabi_d2iz+0x30>
 80a235c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2360:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2364:	d912      	bls.n	80a238c <__aeabi_d2iz+0x3c>
 80a2366:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a236a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a236e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2372:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2376:	fa23 f002 	lsr.w	r0, r3, r2
 80a237a:	bf18      	it	ne
 80a237c:	4240      	negne	r0, r0
 80a237e:	4770      	bx	lr
 80a2380:	f04f 0000 	mov.w	r0, #0
 80a2384:	4770      	bx	lr
 80a2386:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a238a:	d105      	bne.n	80a2398 <__aeabi_d2iz+0x48>
 80a238c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a2390:	bf08      	it	eq
 80a2392:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a2396:	4770      	bx	lr
 80a2398:	f04f 0000 	mov.w	r0, #0
 80a239c:	4770      	bx	lr
 80a239e:	bf00      	nop

080a23a0 <__aeabi_frsub>:
 80a23a0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a23a4:	e002      	b.n	80a23ac <__addsf3>
 80a23a6:	bf00      	nop

080a23a8 <__aeabi_fsub>:
 80a23a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a23ac <__addsf3>:
 80a23ac:	0042      	lsls	r2, r0, #1
 80a23ae:	bf1f      	itttt	ne
 80a23b0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a23b4:	ea92 0f03 	teqne	r2, r3
 80a23b8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a23bc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a23c0:	d06a      	beq.n	80a2498 <__addsf3+0xec>
 80a23c2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a23c6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a23ca:	bfc1      	itttt	gt
 80a23cc:	18d2      	addgt	r2, r2, r3
 80a23ce:	4041      	eorgt	r1, r0
 80a23d0:	4048      	eorgt	r0, r1
 80a23d2:	4041      	eorgt	r1, r0
 80a23d4:	bfb8      	it	lt
 80a23d6:	425b      	neglt	r3, r3
 80a23d8:	2b19      	cmp	r3, #25
 80a23da:	bf88      	it	hi
 80a23dc:	4770      	bxhi	lr
 80a23de:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a23e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a23e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a23ea:	bf18      	it	ne
 80a23ec:	4240      	negne	r0, r0
 80a23ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a23f2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a23f6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a23fa:	bf18      	it	ne
 80a23fc:	4249      	negne	r1, r1
 80a23fe:	ea92 0f03 	teq	r2, r3
 80a2402:	d03f      	beq.n	80a2484 <__addsf3+0xd8>
 80a2404:	f1a2 0201 	sub.w	r2, r2, #1
 80a2408:	fa41 fc03 	asr.w	ip, r1, r3
 80a240c:	eb10 000c 	adds.w	r0, r0, ip
 80a2410:	f1c3 0320 	rsb	r3, r3, #32
 80a2414:	fa01 f103 	lsl.w	r1, r1, r3
 80a2418:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a241c:	d502      	bpl.n	80a2424 <__addsf3+0x78>
 80a241e:	4249      	negs	r1, r1
 80a2420:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a2424:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a2428:	d313      	bcc.n	80a2452 <__addsf3+0xa6>
 80a242a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a242e:	d306      	bcc.n	80a243e <__addsf3+0x92>
 80a2430:	0840      	lsrs	r0, r0, #1
 80a2432:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2436:	f102 0201 	add.w	r2, r2, #1
 80a243a:	2afe      	cmp	r2, #254	; 0xfe
 80a243c:	d251      	bcs.n	80a24e2 <__addsf3+0x136>
 80a243e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a2442:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2446:	bf08      	it	eq
 80a2448:	f020 0001 	biceq.w	r0, r0, #1
 80a244c:	ea40 0003 	orr.w	r0, r0, r3
 80a2450:	4770      	bx	lr
 80a2452:	0049      	lsls	r1, r1, #1
 80a2454:	eb40 0000 	adc.w	r0, r0, r0
 80a2458:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a245c:	f1a2 0201 	sub.w	r2, r2, #1
 80a2460:	d1ed      	bne.n	80a243e <__addsf3+0x92>
 80a2462:	fab0 fc80 	clz	ip, r0
 80a2466:	f1ac 0c08 	sub.w	ip, ip, #8
 80a246a:	ebb2 020c 	subs.w	r2, r2, ip
 80a246e:	fa00 f00c 	lsl.w	r0, r0, ip
 80a2472:	bfaa      	itet	ge
 80a2474:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2478:	4252      	neglt	r2, r2
 80a247a:	4318      	orrge	r0, r3
 80a247c:	bfbc      	itt	lt
 80a247e:	40d0      	lsrlt	r0, r2
 80a2480:	4318      	orrlt	r0, r3
 80a2482:	4770      	bx	lr
 80a2484:	f092 0f00 	teq	r2, #0
 80a2488:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a248c:	bf06      	itte	eq
 80a248e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a2492:	3201      	addeq	r2, #1
 80a2494:	3b01      	subne	r3, #1
 80a2496:	e7b5      	b.n	80a2404 <__addsf3+0x58>
 80a2498:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a249c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a24a0:	bf18      	it	ne
 80a24a2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a24a6:	d021      	beq.n	80a24ec <__addsf3+0x140>
 80a24a8:	ea92 0f03 	teq	r2, r3
 80a24ac:	d004      	beq.n	80a24b8 <__addsf3+0x10c>
 80a24ae:	f092 0f00 	teq	r2, #0
 80a24b2:	bf08      	it	eq
 80a24b4:	4608      	moveq	r0, r1
 80a24b6:	4770      	bx	lr
 80a24b8:	ea90 0f01 	teq	r0, r1
 80a24bc:	bf1c      	itt	ne
 80a24be:	2000      	movne	r0, #0
 80a24c0:	4770      	bxne	lr
 80a24c2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a24c6:	d104      	bne.n	80a24d2 <__addsf3+0x126>
 80a24c8:	0040      	lsls	r0, r0, #1
 80a24ca:	bf28      	it	cs
 80a24cc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a24d0:	4770      	bx	lr
 80a24d2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a24d6:	bf3c      	itt	cc
 80a24d8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a24dc:	4770      	bxcc	lr
 80a24de:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a24e2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a24e6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a24ea:	4770      	bx	lr
 80a24ec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a24f0:	bf16      	itet	ne
 80a24f2:	4608      	movne	r0, r1
 80a24f4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a24f8:	4601      	movne	r1, r0
 80a24fa:	0242      	lsls	r2, r0, #9
 80a24fc:	bf06      	itte	eq
 80a24fe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a2502:	ea90 0f01 	teqeq	r0, r1
 80a2506:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a250a:	4770      	bx	lr

080a250c <__aeabi_ui2f>:
 80a250c:	f04f 0300 	mov.w	r3, #0
 80a2510:	e004      	b.n	80a251c <__aeabi_i2f+0x8>
 80a2512:	bf00      	nop

080a2514 <__aeabi_i2f>:
 80a2514:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a2518:	bf48      	it	mi
 80a251a:	4240      	negmi	r0, r0
 80a251c:	ea5f 0c00 	movs.w	ip, r0
 80a2520:	bf08      	it	eq
 80a2522:	4770      	bxeq	lr
 80a2524:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a2528:	4601      	mov	r1, r0
 80a252a:	f04f 0000 	mov.w	r0, #0
 80a252e:	e01c      	b.n	80a256a <__aeabi_l2f+0x2a>

080a2530 <__aeabi_ul2f>:
 80a2530:	ea50 0201 	orrs.w	r2, r0, r1
 80a2534:	bf08      	it	eq
 80a2536:	4770      	bxeq	lr
 80a2538:	f04f 0300 	mov.w	r3, #0
 80a253c:	e00a      	b.n	80a2554 <__aeabi_l2f+0x14>
 80a253e:	bf00      	nop

080a2540 <__aeabi_l2f>:
 80a2540:	ea50 0201 	orrs.w	r2, r0, r1
 80a2544:	bf08      	it	eq
 80a2546:	4770      	bxeq	lr
 80a2548:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a254c:	d502      	bpl.n	80a2554 <__aeabi_l2f+0x14>
 80a254e:	4240      	negs	r0, r0
 80a2550:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2554:	ea5f 0c01 	movs.w	ip, r1
 80a2558:	bf02      	ittt	eq
 80a255a:	4684      	moveq	ip, r0
 80a255c:	4601      	moveq	r1, r0
 80a255e:	2000      	moveq	r0, #0
 80a2560:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a2564:	bf08      	it	eq
 80a2566:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a256a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a256e:	fabc f28c 	clz	r2, ip
 80a2572:	3a08      	subs	r2, #8
 80a2574:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a2578:	db10      	blt.n	80a259c <__aeabi_l2f+0x5c>
 80a257a:	fa01 fc02 	lsl.w	ip, r1, r2
 80a257e:	4463      	add	r3, ip
 80a2580:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2584:	f1c2 0220 	rsb	r2, r2, #32
 80a2588:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a258c:	fa20 f202 	lsr.w	r2, r0, r2
 80a2590:	eb43 0002 	adc.w	r0, r3, r2
 80a2594:	bf08      	it	eq
 80a2596:	f020 0001 	biceq.w	r0, r0, #1
 80a259a:	4770      	bx	lr
 80a259c:	f102 0220 	add.w	r2, r2, #32
 80a25a0:	fa01 fc02 	lsl.w	ip, r1, r2
 80a25a4:	f1c2 0220 	rsb	r2, r2, #32
 80a25a8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a25ac:	fa21 f202 	lsr.w	r2, r1, r2
 80a25b0:	eb43 0002 	adc.w	r0, r3, r2
 80a25b4:	bf08      	it	eq
 80a25b6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a25ba:	4770      	bx	lr

080a25bc <__aeabi_fmul>:
 80a25bc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a25c0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a25c4:	bf1e      	ittt	ne
 80a25c6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a25ca:	ea92 0f0c 	teqne	r2, ip
 80a25ce:	ea93 0f0c 	teqne	r3, ip
 80a25d2:	d06f      	beq.n	80a26b4 <__aeabi_fmul+0xf8>
 80a25d4:	441a      	add	r2, r3
 80a25d6:	ea80 0c01 	eor.w	ip, r0, r1
 80a25da:	0240      	lsls	r0, r0, #9
 80a25dc:	bf18      	it	ne
 80a25de:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a25e2:	d01e      	beq.n	80a2622 <__aeabi_fmul+0x66>
 80a25e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a25e8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a25ec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a25f0:	fba0 3101 	umull	r3, r1, r0, r1
 80a25f4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a25f8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a25fc:	bf3e      	ittt	cc
 80a25fe:	0049      	lslcc	r1, r1, #1
 80a2600:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2604:	005b      	lslcc	r3, r3, #1
 80a2606:	ea40 0001 	orr.w	r0, r0, r1
 80a260a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a260e:	2afd      	cmp	r2, #253	; 0xfd
 80a2610:	d81d      	bhi.n	80a264e <__aeabi_fmul+0x92>
 80a2612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2616:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a261a:	bf08      	it	eq
 80a261c:	f020 0001 	biceq.w	r0, r0, #1
 80a2620:	4770      	bx	lr
 80a2622:	f090 0f00 	teq	r0, #0
 80a2626:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a262a:	bf08      	it	eq
 80a262c:	0249      	lsleq	r1, r1, #9
 80a262e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2632:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a2636:	3a7f      	subs	r2, #127	; 0x7f
 80a2638:	bfc2      	ittt	gt
 80a263a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a263e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2642:	4770      	bxgt	lr
 80a2644:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2648:	f04f 0300 	mov.w	r3, #0
 80a264c:	3a01      	subs	r2, #1
 80a264e:	dc5d      	bgt.n	80a270c <__aeabi_fmul+0x150>
 80a2650:	f112 0f19 	cmn.w	r2, #25
 80a2654:	bfdc      	itt	le
 80a2656:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a265a:	4770      	bxle	lr
 80a265c:	f1c2 0200 	rsb	r2, r2, #0
 80a2660:	0041      	lsls	r1, r0, #1
 80a2662:	fa21 f102 	lsr.w	r1, r1, r2
 80a2666:	f1c2 0220 	rsb	r2, r2, #32
 80a266a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a266e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a2672:	f140 0000 	adc.w	r0, r0, #0
 80a2676:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a267a:	bf08      	it	eq
 80a267c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2680:	4770      	bx	lr
 80a2682:	f092 0f00 	teq	r2, #0
 80a2686:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a268a:	bf02      	ittt	eq
 80a268c:	0040      	lsleq	r0, r0, #1
 80a268e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2692:	3a01      	subeq	r2, #1
 80a2694:	d0f9      	beq.n	80a268a <__aeabi_fmul+0xce>
 80a2696:	ea40 000c 	orr.w	r0, r0, ip
 80a269a:	f093 0f00 	teq	r3, #0
 80a269e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a26a2:	bf02      	ittt	eq
 80a26a4:	0049      	lsleq	r1, r1, #1
 80a26a6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a26aa:	3b01      	subeq	r3, #1
 80a26ac:	d0f9      	beq.n	80a26a2 <__aeabi_fmul+0xe6>
 80a26ae:	ea41 010c 	orr.w	r1, r1, ip
 80a26b2:	e78f      	b.n	80a25d4 <__aeabi_fmul+0x18>
 80a26b4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a26b8:	ea92 0f0c 	teq	r2, ip
 80a26bc:	bf18      	it	ne
 80a26be:	ea93 0f0c 	teqne	r3, ip
 80a26c2:	d00a      	beq.n	80a26da <__aeabi_fmul+0x11e>
 80a26c4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a26c8:	bf18      	it	ne
 80a26ca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a26ce:	d1d8      	bne.n	80a2682 <__aeabi_fmul+0xc6>
 80a26d0:	ea80 0001 	eor.w	r0, r0, r1
 80a26d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a26d8:	4770      	bx	lr
 80a26da:	f090 0f00 	teq	r0, #0
 80a26de:	bf17      	itett	ne
 80a26e0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a26e4:	4608      	moveq	r0, r1
 80a26e6:	f091 0f00 	teqne	r1, #0
 80a26ea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a26ee:	d014      	beq.n	80a271a <__aeabi_fmul+0x15e>
 80a26f0:	ea92 0f0c 	teq	r2, ip
 80a26f4:	d101      	bne.n	80a26fa <__aeabi_fmul+0x13e>
 80a26f6:	0242      	lsls	r2, r0, #9
 80a26f8:	d10f      	bne.n	80a271a <__aeabi_fmul+0x15e>
 80a26fa:	ea93 0f0c 	teq	r3, ip
 80a26fe:	d103      	bne.n	80a2708 <__aeabi_fmul+0x14c>
 80a2700:	024b      	lsls	r3, r1, #9
 80a2702:	bf18      	it	ne
 80a2704:	4608      	movne	r0, r1
 80a2706:	d108      	bne.n	80a271a <__aeabi_fmul+0x15e>
 80a2708:	ea80 0001 	eor.w	r0, r0, r1
 80a270c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2710:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2714:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2718:	4770      	bx	lr
 80a271a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a271e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a2722:	4770      	bx	lr

080a2724 <__aeabi_fdiv>:
 80a2724:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2728:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a272c:	bf1e      	ittt	ne
 80a272e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2732:	ea92 0f0c 	teqne	r2, ip
 80a2736:	ea93 0f0c 	teqne	r3, ip
 80a273a:	d069      	beq.n	80a2810 <__aeabi_fdiv+0xec>
 80a273c:	eba2 0203 	sub.w	r2, r2, r3
 80a2740:	ea80 0c01 	eor.w	ip, r0, r1
 80a2744:	0249      	lsls	r1, r1, #9
 80a2746:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a274a:	d037      	beq.n	80a27bc <__aeabi_fdiv+0x98>
 80a274c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a2750:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a2754:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2758:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a275c:	428b      	cmp	r3, r1
 80a275e:	bf38      	it	cc
 80a2760:	005b      	lslcc	r3, r3, #1
 80a2762:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a2766:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a276a:	428b      	cmp	r3, r1
 80a276c:	bf24      	itt	cs
 80a276e:	1a5b      	subcs	r3, r3, r1
 80a2770:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2774:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a2778:	bf24      	itt	cs
 80a277a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a277e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2782:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a2786:	bf24      	itt	cs
 80a2788:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a278c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2790:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a2794:	bf24      	itt	cs
 80a2796:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a279a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a279e:	011b      	lsls	r3, r3, #4
 80a27a0:	bf18      	it	ne
 80a27a2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a27a6:	d1e0      	bne.n	80a276a <__aeabi_fdiv+0x46>
 80a27a8:	2afd      	cmp	r2, #253	; 0xfd
 80a27aa:	f63f af50 	bhi.w	80a264e <__aeabi_fmul+0x92>
 80a27ae:	428b      	cmp	r3, r1
 80a27b0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a27b4:	bf08      	it	eq
 80a27b6:	f020 0001 	biceq.w	r0, r0, #1
 80a27ba:	4770      	bx	lr
 80a27bc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a27c0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a27c4:	327f      	adds	r2, #127	; 0x7f
 80a27c6:	bfc2      	ittt	gt
 80a27c8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a27cc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a27d0:	4770      	bxgt	lr
 80a27d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a27d6:	f04f 0300 	mov.w	r3, #0
 80a27da:	3a01      	subs	r2, #1
 80a27dc:	e737      	b.n	80a264e <__aeabi_fmul+0x92>
 80a27de:	f092 0f00 	teq	r2, #0
 80a27e2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a27e6:	bf02      	ittt	eq
 80a27e8:	0040      	lsleq	r0, r0, #1
 80a27ea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a27ee:	3a01      	subeq	r2, #1
 80a27f0:	d0f9      	beq.n	80a27e6 <__aeabi_fdiv+0xc2>
 80a27f2:	ea40 000c 	orr.w	r0, r0, ip
 80a27f6:	f093 0f00 	teq	r3, #0
 80a27fa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a27fe:	bf02      	ittt	eq
 80a2800:	0049      	lsleq	r1, r1, #1
 80a2802:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2806:	3b01      	subeq	r3, #1
 80a2808:	d0f9      	beq.n	80a27fe <__aeabi_fdiv+0xda>
 80a280a:	ea41 010c 	orr.w	r1, r1, ip
 80a280e:	e795      	b.n	80a273c <__aeabi_fdiv+0x18>
 80a2810:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2814:	ea92 0f0c 	teq	r2, ip
 80a2818:	d108      	bne.n	80a282c <__aeabi_fdiv+0x108>
 80a281a:	0242      	lsls	r2, r0, #9
 80a281c:	f47f af7d 	bne.w	80a271a <__aeabi_fmul+0x15e>
 80a2820:	ea93 0f0c 	teq	r3, ip
 80a2824:	f47f af70 	bne.w	80a2708 <__aeabi_fmul+0x14c>
 80a2828:	4608      	mov	r0, r1
 80a282a:	e776      	b.n	80a271a <__aeabi_fmul+0x15e>
 80a282c:	ea93 0f0c 	teq	r3, ip
 80a2830:	d104      	bne.n	80a283c <__aeabi_fdiv+0x118>
 80a2832:	024b      	lsls	r3, r1, #9
 80a2834:	f43f af4c 	beq.w	80a26d0 <__aeabi_fmul+0x114>
 80a2838:	4608      	mov	r0, r1
 80a283a:	e76e      	b.n	80a271a <__aeabi_fmul+0x15e>
 80a283c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2840:	bf18      	it	ne
 80a2842:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2846:	d1ca      	bne.n	80a27de <__aeabi_fdiv+0xba>
 80a2848:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a284c:	f47f af5c 	bne.w	80a2708 <__aeabi_fmul+0x14c>
 80a2850:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a2854:	f47f af3c 	bne.w	80a26d0 <__aeabi_fmul+0x114>
 80a2858:	e75f      	b.n	80a271a <__aeabi_fmul+0x15e>
 80a285a:	bf00      	nop

080a285c <__cxa_atexit>:
 80a285c:	b510      	push	{r4, lr}
 80a285e:	4c05      	ldr	r4, [pc, #20]	; (80a2874 <__cxa_atexit+0x18>)
 80a2860:	4613      	mov	r3, r2
 80a2862:	b12c      	cbz	r4, 80a2870 <__cxa_atexit+0x14>
 80a2864:	460a      	mov	r2, r1
 80a2866:	4601      	mov	r1, r0
 80a2868:	2002      	movs	r0, #2
 80a286a:	f3af 8000 	nop.w
 80a286e:	bd10      	pop	{r4, pc}
 80a2870:	4620      	mov	r0, r4
 80a2872:	bd10      	pop	{r4, pc}
 80a2874:	00000000 	.word	0x00000000

080a2878 <memcpy>:
 80a2878:	b510      	push	{r4, lr}
 80a287a:	1e43      	subs	r3, r0, #1
 80a287c:	440a      	add	r2, r1
 80a287e:	4291      	cmp	r1, r2
 80a2880:	d004      	beq.n	80a288c <memcpy+0x14>
 80a2882:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2886:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a288a:	e7f8      	b.n	80a287e <memcpy+0x6>
 80a288c:	bd10      	pop	{r4, pc}

080a288e <memset>:
 80a288e:	4603      	mov	r3, r0
 80a2890:	4402      	add	r2, r0
 80a2892:	4293      	cmp	r3, r2
 80a2894:	d002      	beq.n	80a289c <memset+0xe>
 80a2896:	f803 1b01 	strb.w	r1, [r3], #1
 80a289a:	e7fa      	b.n	80a2892 <memset+0x4>
 80a289c:	4770      	bx	lr
	...

080a28a0 <srand>:
 80a28a0:	b538      	push	{r3, r4, r5, lr}
 80a28a2:	4b12      	ldr	r3, [pc, #72]	; (80a28ec <srand+0x4c>)
 80a28a4:	4605      	mov	r5, r0
 80a28a6:	681c      	ldr	r4, [r3, #0]
 80a28a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a28aa:	b9d3      	cbnz	r3, 80a28e2 <srand+0x42>
 80a28ac:	2018      	movs	r0, #24
 80a28ae:	f7fe f969 	bl	80a0b84 <malloc>
 80a28b2:	f243 330e 	movw	r3, #13070	; 0x330e
 80a28b6:	63a0      	str	r0, [r4, #56]	; 0x38
 80a28b8:	8003      	strh	r3, [r0, #0]
 80a28ba:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a28be:	8043      	strh	r3, [r0, #2]
 80a28c0:	f241 2334 	movw	r3, #4660	; 0x1234
 80a28c4:	8083      	strh	r3, [r0, #4]
 80a28c6:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a28ca:	80c3      	strh	r3, [r0, #6]
 80a28cc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a28d0:	8103      	strh	r3, [r0, #8]
 80a28d2:	2305      	movs	r3, #5
 80a28d4:	8143      	strh	r3, [r0, #10]
 80a28d6:	230b      	movs	r3, #11
 80a28d8:	8183      	strh	r3, [r0, #12]
 80a28da:	2201      	movs	r2, #1
 80a28dc:	2300      	movs	r3, #0
 80a28de:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a28e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a28e4:	2200      	movs	r2, #0
 80a28e6:	611d      	str	r5, [r3, #16]
 80a28e8:	615a      	str	r2, [r3, #20]
 80a28ea:	bd38      	pop	{r3, r4, r5, pc}
 80a28ec:	20000064 	.word	0x20000064

080a28f0 <strdup>:
 80a28f0:	4b02      	ldr	r3, [pc, #8]	; (80a28fc <strdup+0xc>)
 80a28f2:	4601      	mov	r1, r0
 80a28f4:	6818      	ldr	r0, [r3, #0]
 80a28f6:	f000 b803 	b.w	80a2900 <_strdup_r>
 80a28fa:	bf00      	nop
 80a28fc:	20000064 	.word	0x20000064

080a2900 <_strdup_r>:
 80a2900:	b570      	push	{r4, r5, r6, lr}
 80a2902:	4606      	mov	r6, r0
 80a2904:	4608      	mov	r0, r1
 80a2906:	460c      	mov	r4, r1
 80a2908:	f000 f80d 	bl	80a2926 <strlen>
 80a290c:	1c45      	adds	r5, r0, #1
 80a290e:	4629      	mov	r1, r5
 80a2910:	4630      	mov	r0, r6
 80a2912:	f7fe f957 	bl	80a0bc4 <_malloc_r>
 80a2916:	4606      	mov	r6, r0
 80a2918:	b118      	cbz	r0, 80a2922 <_strdup_r+0x22>
 80a291a:	462a      	mov	r2, r5
 80a291c:	4621      	mov	r1, r4
 80a291e:	f7ff ffab 	bl	80a2878 <memcpy>
 80a2922:	4630      	mov	r0, r6
 80a2924:	bd70      	pop	{r4, r5, r6, pc}

080a2926 <strlen>:
 80a2926:	4603      	mov	r3, r0
 80a2928:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a292c:	2a00      	cmp	r2, #0
 80a292e:	d1fb      	bne.n	80a2928 <strlen+0x2>
 80a2930:	1a18      	subs	r0, r3, r0
 80a2932:	3801      	subs	r0, #1
 80a2934:	4770      	bx	lr

080a2936 <strncpy>:
 80a2936:	4603      	mov	r3, r0
 80a2938:	b510      	push	{r4, lr}
 80a293a:	b142      	cbz	r2, 80a294e <strncpy+0x18>
 80a293c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2940:	3a01      	subs	r2, #1
 80a2942:	f803 4b01 	strb.w	r4, [r3], #1
 80a2946:	2c00      	cmp	r4, #0
 80a2948:	d1f7      	bne.n	80a293a <strncpy+0x4>
 80a294a:	441a      	add	r2, r3
 80a294c:	e000      	b.n	80a2950 <strncpy+0x1a>
 80a294e:	bd10      	pop	{r4, pc}
 80a2950:	4293      	cmp	r3, r2
 80a2952:	d002      	beq.n	80a295a <strncpy+0x24>
 80a2954:	f803 4b01 	strb.w	r4, [r3], #1
 80a2958:	e7fa      	b.n	80a2950 <strncpy+0x1a>
 80a295a:	bd10      	pop	{r4, pc}

080a295c <dynalib_user>:
 80a295c:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a296c:	0000 0000 6425 6500 0076 494c 3353 4844     ....%d.ev.LIS3DH
 80a297c:	6320 6e6f 6966 7567 6172 6974 6e6f 6520      configuration e
 80a298c:	7272 726f 4c00 5349 4433 2048 6f63 666e     rror.LIS3DH conf
 80a299c:	6769 7275 6465 7320 6375 6563 7373 7566     igured successfu
 80a29ac:	6c6c 0079 494c 3353 4844 0000               lly.LIS3DH..

080a29b8 <_ZTV15Adafruit_LIS3DH>:
	...
 80a29c0:	00b5 080a 0245 080a 00b3 080a 073b 080a     ....E.......;...
 80a29d0:	029d 080a                                   ....

080a29d4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 80a29d4:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
 80a29e4:	6169 006c 5355 5342 7265 6169 316c 7400     ial.USBSerial1.t
 80a29f4:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
 80a2a04:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
 80a2a14:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
 80a2a24:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
 80a2a34:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
 80a2a44:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 80a2a54:	0070 3025 3031 2075 5d00 0020 202c 2800     p.%010u .] ., .(
 80a2a64:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 80a2a74:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
 80a2a84:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
 80a2a94:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
 80a2aa4:	666e 006f 6177 6e72 7000 6e61 6369 6100     nfo.warn.panic.a
 80a2ab4:	6c6c 5a00 2500 302b 6433 253a 3230 0075     ll.Z.%+03d:%02u.
 80a2ac4:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
 80a2ad4:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

080a2ae0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a2ae8:	0fbd 080a 0fc3 080a 1007 080a 0fd1 080a     ................
 80a2af8:	0fbf 080a                                   ....

080a2afc <_ZTV9IPAddress>:
	...
 80a2b04:	1555 080a 1545 080a 1547 080a               U...E...G...

080a2b10 <_ZTV9USBSerial>:
	...
 80a2b18:	1611 080a 1661 080a 166f 080a 0d55 080a     ....a...o...U...
 80a2b28:	164d 080a 1613 080a 1629 080a 165b 080a     M.......)...[...
 80a2b38:	163f 080a 160d 080a                         ?.......

080a2b40 <_ZTV11USARTSerial>:
	...
 80a2b48:	1771 080a 17c1 080a 17cf 080a 0d55 080a     q...........U...
 80a2b58:	1785 080a 17a7 080a 1793 080a 17bb 080a     ................
 80a2b68:	1773 080a 1777 080a                         s...w...

080a2b70 <_ZTV7TwoWire>:
	...
 80a2b78:	18d1 080a 191b 080a 18f3 080a 18d3 080a     ................
 80a2b88:	18fb 080a 1903 080a 190b 080a 1913 080a     ................

080a2b98 <_ZTVN5spark9WiFiClassE>:
	...
 80a2ba0:	1a75 080a 1a6b 080a 1a61 080a 19df 080a     u...k...a.......
 80a2bb0:	0de5 080a 1a55 080a 1a49 080a 1a41 080a     ....U...I...A...
 80a2bc0:	1a37 080a 1a2d 080a 19e9 080a               7...-.......

080a2bcc <_ZTVN5spark12NetworkClassE>:
	...
 80a2bd4:	1a95 080a 1a9f 080a 1aa9 080a 1ab3 080a     ................
 80a2be4:	1abd 080a 1ac9 080a 1ad5 080a 1ae1 080a     ................
 80a2bf4:	1ae9 080a 1af3 080a 1afd 080a               ............

080a2c00 <_ZSt7nothrow>:
 80a2c00:	0000 0000                                   ....

080a2c04 <__sf_fake_stdin>:
	...

080a2c24 <__sf_fake_stdout>:
	...

080a2c44 <__sf_fake_stderr>:
	...
 80a2c64:	0043                                        C.

080a2c66 <link_const_variable_data_end>:
	...

080a2c68 <link_constructors_location>:
 80a2c68:	080a0255 	.word	0x080a0255
 80a2c6c:	080a0289 	.word	0x080a0289
 80a2c70:	080a076f 	.word	0x080a076f
 80a2c74:	080a0d21 	.word	0x080a0d21
 80a2c78:	080a0e01 	.word	0x080a0e01
 80a2c7c:	080a0e11 	.word	0x080a0e11
 80a2c80:	080a0e69 	.word	0x080a0e69
 80a2c84:	080a1a81 	.word	0x080a1a81
 80a2c88:	080a1b4d 	.word	0x080a1b4d
 80a2c8c:	080a1c59 	.word	0x080a1c59
 80a2c90:	080a1d51 	.word	0x080a1d51
 80a2c94:	080a1dd5 	.word	0x080a1dd5
 80a2c98:	080a1e99 	.word	0x080a1e99
 80a2c9c:	080a1f5d 	.word	0x080a1f5d
